
new_kiban_can_practice.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ca0  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  08004e80  08004e80  00005e80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fd4  08004fd4  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fd4  08004fd4  00005fd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fdc  08004fdc  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fdc  08004fdc  00005fdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fe0  08004fe0  00005fe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004fe4  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002c0  20000068  0800504c  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000328  0800504c  00006328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f8eb  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002093  00000000  00000000  00015983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c68  00000000  00000000  00017a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000978  00000000  00000000  00018680  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026296  00000000  00000000  00018ff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e6f5  00000000  00000000  0003f28e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f0651  00000000  00000000  0004d983  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013dfd4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b58  00000000  00000000  0013e018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00141b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000068 	.word	0x20000068
 80001fc:	00000000 	.word	0x00000000
 8000200:	08004e68 	.word	0x08004e68

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000006c 	.word	0x2000006c
 800021c:	08004e68 	.word	0x08004e68

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <HAL_FDCAN_RxFifo0Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs){
 80005b0:	b580      	push	{r7, lr}
 80005b2:	b082      	sub	sp, #8
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	if ((RxFifo0ITs & FDCAN_IT_RX_FIFO0_NEW_MESSAGE) != RESET) {
 80005ba:	683b      	ldr	r3, [r7, #0]
 80005bc:	f003 0301 	and.w	r3, r3, #1
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d01d      	beq.n	8000600 <HAL_FDCAN_RxFifo0Callback+0x50>

	        /* Retrieve Rx messages from RX FIFO0 */
		if (HAL_FDCAN_GetRxMessage(&hfdcan1, FDCAN_RX_FIFO0, &RxHeader, RxData) != HAL_OK) {
 80005c4:	4b10      	ldr	r3, [pc, #64]	@ (8000608 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80005c6:	4a11      	ldr	r2, [pc, #68]	@ (800060c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80005c8:	2140      	movs	r1, #64	@ 0x40
 80005ca:	4811      	ldr	r0, [pc, #68]	@ (8000610 <HAL_FDCAN_RxFifo0Callback+0x60>)
 80005cc:	f000 ff64 	bl	8001498 <HAL_FDCAN_GetRxMessage>
 80005d0:	4603      	mov	r3, r0
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d004      	beq.n	80005e0 <HAL_FDCAN_RxFifo0Callback+0x30>
			printf("fdcan_getrxmessage is error\r\n");
 80005d6:	480f      	ldr	r0, [pc, #60]	@ (8000614 <HAL_FDCAN_RxFifo0Callback+0x64>)
 80005d8:	f003 fd1e 	bl	8004018 <puts>
			Error_Handler();
 80005dc:	f000 f9d4 	bl	8000988 <Error_Handler>
		}

		if (RxHeader.Identifier == 0x300) {
 80005e0:	4b0a      	ldr	r3, [pc, #40]	@ (800060c <HAL_FDCAN_RxFifo0Callback+0x5c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80005e8:	d10a      	bne.n	8000600 <HAL_FDCAN_RxFifo0Callback+0x50>
			count = (int16_t)((RxData[0] << 8) | RxData[1]);
 80005ea:	4b07      	ldr	r3, [pc, #28]	@ (8000608 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	021b      	lsls	r3, r3, #8
 80005f0:	b21a      	sxth	r2, r3
 80005f2:	4b05      	ldr	r3, [pc, #20]	@ (8000608 <HAL_FDCAN_RxFifo0Callback+0x58>)
 80005f4:	785b      	ldrb	r3, [r3, #1]
 80005f6:	b21b      	sxth	r3, r3
 80005f8:	4313      	orrs	r3, r2
 80005fa:	b21a      	sxth	r2, r3
 80005fc:	4b06      	ldr	r3, [pc, #24]	@ (8000618 <HAL_FDCAN_RxFifo0Callback+0x68>)
 80005fe:	801a      	strh	r2, [r3, #0]
		}


	}

}
 8000600:	bf00      	nop
 8000602:	3708      	adds	r7, #8
 8000604:	46bd      	mov	sp, r7
 8000606:	bd80      	pop	{r7, pc}
 8000608:	200001c8 	.word	0x200001c8
 800060c:	200001a0 	.word	0x200001a0
 8000610:	20000084 	.word	0x20000084
 8000614:	08004e80 	.word	0x08004e80
 8000618:	200001d0 	.word	0x200001d0

0800061c <FDCAN_RxSettings>:

void FDCAN_RxSettings(void){
 800061c:	b580      	push	{r7, lr}
 800061e:	b088      	sub	sp, #32
 8000620:	af02      	add	r7, sp, #8
	FDCAN_FilterTypeDef FDCAN_Filter_settings;
	FDCAN_Filter_settings.IdType = FDCAN_STANDARD_ID;
 8000622:	2300      	movs	r3, #0
 8000624:	603b      	str	r3, [r7, #0]
	FDCAN_Filter_settings.FilterIndex = 0;
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
	FDCAN_Filter_settings.FilterType = FDCAN_FILTER_RANGE;
 800062a:	2300      	movs	r3, #0
 800062c:	60bb      	str	r3, [r7, #8]
	FDCAN_Filter_settings.FilterConfig = FDCAN_FILTER_TO_RXFIFO0;
 800062e:	2301      	movs	r3, #1
 8000630:	60fb      	str	r3, [r7, #12]
	FDCAN_Filter_settings.FilterID1 = 0x200;
 8000632:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000636:	613b      	str	r3, [r7, #16]
	FDCAN_Filter_settings.FilterID1 = 0x310;
 8000638:	f44f 7344 	mov.w	r3, #784	@ 0x310
 800063c:	613b      	str	r3, [r7, #16]

	if (HAL_FDCAN_ConfigFilter(&hfdcan1, &FDCAN_Filter_settings) != HAL_OK){
 800063e:	463b      	mov	r3, r7
 8000640:	4619      	mov	r1, r3
 8000642:	4816      	ldr	r0, [pc, #88]	@ (800069c <FDCAN_RxSettings+0x80>)
 8000644:	f000 fe74 	bl	8001330 <HAL_FDCAN_ConfigFilter>
 8000648:	4603      	mov	r3, r0
 800064a:	2b00      	cmp	r3, #0
 800064c:	d004      	beq.n	8000658 <FDCAN_RxSettings+0x3c>
		printf("fdcan_configfilter is error\r\n");
 800064e:	4814      	ldr	r0, [pc, #80]	@ (80006a0 <FDCAN_RxSettings+0x84>)
 8000650:	f003 fce2 	bl	8004018 <puts>
		Error_Handler();
 8000654:	f000 f998 	bl	8000988 <Error_Handler>
	}

	if (HAL_FDCAN_ConfigGlobalFilter(&hfdcan1, FDCAN_REJECT, FDCAN_FILTER_REJECT, FDCAN_FILTER_REMOTE, FDCAN_FILTER_REMOTE)){
 8000658:	2300      	movs	r3, #0
 800065a:	9300      	str	r3, [sp, #0]
 800065c:	2300      	movs	r3, #0
 800065e:	2203      	movs	r2, #3
 8000660:	2102      	movs	r1, #2
 8000662:	480e      	ldr	r0, [pc, #56]	@ (800069c <FDCAN_RxSettings+0x80>)
 8000664:	f000 febe 	bl	80013e4 <HAL_FDCAN_ConfigGlobalFilter>
 8000668:	4603      	mov	r3, r0
 800066a:	2b00      	cmp	r3, #0
 800066c:	d004      	beq.n	8000678 <FDCAN_RxSettings+0x5c>
		printf("fdcan_configglobalfilter is error\r\n");
 800066e:	480d      	ldr	r0, [pc, #52]	@ (80006a4 <FDCAN_RxSettings+0x88>)
 8000670:	f003 fcd2 	bl	8004018 <puts>
		Error_Handler();
 8000674:	f000 f988 	bl	8000988 <Error_Handler>
	}

	if (HAL_FDCAN_ActivateNotification(&hfdcan1, FDCAN_IT_RX_FIFO0_NEW_MESSAGE, 0) != HAL_OK){
 8000678:	2200      	movs	r2, #0
 800067a:	2101      	movs	r1, #1
 800067c:	4807      	ldr	r0, [pc, #28]	@ (800069c <FDCAN_RxSettings+0x80>)
 800067e:	f001 f813 	bl	80016a8 <HAL_FDCAN_ActivateNotification>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d004      	beq.n	8000692 <FDCAN_RxSettings+0x76>
		printf("fdcan_activatenotification is error\r\n");
 8000688:	4807      	ldr	r0, [pc, #28]	@ (80006a8 <FDCAN_RxSettings+0x8c>)
 800068a:	f003 fcc5 	bl	8004018 <puts>
		Error_Handler();
 800068e:	f000 f97b 	bl	8000988 <Error_Handler>
	}
}
 8000692:	bf00      	nop
 8000694:	3718      	adds	r7, #24
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000084 	.word	0x20000084
 80006a0:	08004ea0 	.word	0x08004ea0
 80006a4:	08004ec0 	.word	0x08004ec0
 80006a8:	08004ee4 	.word	0x08004ee4

080006ac <FDCAN_TxSettings>:

void FDCAN_TxSettings(void) {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0
	  TxHeader.Identifier = 0x000;
 80006b0:	4b13      	ldr	r3, [pc, #76]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006b2:	2200      	movs	r2, #0
 80006b4:	601a      	str	r2, [r3, #0]
	  TxHeader.IdType = FDCAN_STANDARD_ID;
 80006b6:	4b12      	ldr	r3, [pc, #72]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006b8:	2200      	movs	r2, #0
 80006ba:	605a      	str	r2, [r3, #4]
	  TxHeader.TxFrameType = FDCAN_DATA_FRAME;
 80006bc:	4b10      	ldr	r3, [pc, #64]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006be:	2200      	movs	r2, #0
 80006c0:	609a      	str	r2, [r3, #8]
	  TxHeader.DataLength = FDCAN_DLC_BYTES_8;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006c4:	2208      	movs	r2, #8
 80006c6:	60da      	str	r2, [r3, #12]
	  TxHeader.ErrorStateIndicator = FDCAN_ESI_ACTIVE;
 80006c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	611a      	str	r2, [r3, #16]
	  TxHeader.BitRateSwitch = FDCAN_BRS_OFF;
 80006ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	615a      	str	r2, [r3, #20]
	  TxHeader.FDFormat = FDCAN_CLASSIC_CAN;
 80006d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	619a      	str	r2, [r3, #24]
	  TxHeader.TxEventFifoControl = FDCAN_NO_TX_EVENTS;
 80006da:	4b09      	ldr	r3, [pc, #36]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006dc:	2200      	movs	r2, #0
 80006de:	61da      	str	r2, [r3, #28]
	  TxHeader.MessageMarker = 0;
 80006e0:	4b07      	ldr	r3, [pc, #28]	@ (8000700 <FDCAN_TxSettings+0x54>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	621a      	str	r2, [r3, #32]
	  if (HAL_FDCAN_Start(&hfdcan1) != HAL_OK) {
 80006e6:	4807      	ldr	r0, [pc, #28]	@ (8000704 <FDCAN_TxSettings+0x58>)
 80006e8:	f000 fead 	bl	8001446 <HAL_FDCAN_Start>
 80006ec:	4603      	mov	r3, r0
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d004      	beq.n	80006fc <FDCAN_TxSettings+0x50>
		  printf("fdcan_start is error\r\n");
 80006f2:	4805      	ldr	r0, [pc, #20]	@ (8000708 <FDCAN_TxSettings+0x5c>)
 80006f4:	f003 fc90 	bl	8004018 <puts>
		  Error_Handler();
 80006f8:	f000 f946 	bl	8000988 <Error_Handler>
	  }
}
 80006fc:	bf00      	nop
 80006fe:	bd80      	pop	{r7, pc}
 8000700:	2000017c 	.word	0x2000017c
 8000704:	20000084 	.word	0x20000084
 8000708:	08004f0c 	.word	0x08004f0c

0800070c <_write>:

int _write(int file, char *ptr, int len)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
 8000712:	60f8      	str	r0, [r7, #12]
 8000714:	60b9      	str	r1, [r7, #8]
 8000716:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart2,(uint8_t *)ptr,len,10);
 8000718:	687b      	ldr	r3, [r7, #4]
 800071a:	b29a      	uxth	r2, r3
 800071c:	230a      	movs	r3, #10
 800071e:	68b9      	ldr	r1, [r7, #8]
 8000720:	4803      	ldr	r0, [pc, #12]	@ (8000730 <_write+0x24>)
 8000722:	f002 fca3 	bl	800306c <HAL_UART_Transmit>
    return len;
 8000726:	687b      	ldr	r3, [r7, #4]
}
 8000728:	4618      	mov	r0, r3
 800072a:	3710      	adds	r7, #16
 800072c:	46bd      	mov	sp, r7
 800072e:	bd80      	pop	{r7, pc}
 8000730:	200000e8 	.word	0x200000e8

08000734 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */

	setbuf(stdout, NULL);
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <main+0x4c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	689b      	ldr	r3, [r3, #8]
 800073e:	2100      	movs	r1, #0
 8000740:	4618      	mov	r0, r3
 8000742:	f003 fc71 	bl	8004028 <setbuf>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000746:	f000 fb18 	bl	8000d7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800074a:	f000 f823 	bl	8000794 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800074e:	f000 f903 	bl	8000958 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000752:	f000 f8b3 	bl	80008bc <MX_USART2_UART_Init>
  MX_FDCAN1_Init();
 8000756:	f000 f869 	bl	800082c <MX_FDCAN1_Init>
  /* USER CODE BEGIN 2 */
  printf("start\r\n");
 800075a:	480a      	ldr	r0, [pc, #40]	@ (8000784 <main+0x50>)
 800075c:	f003 fc5c 	bl	8004018 <puts>
  FDCAN_RxSettings();
 8000760:	f7ff ff5c 	bl	800061c <FDCAN_RxSettings>
  FDCAN_TxSettings();
 8000764:	f7ff ffa2 	bl	80006ac <FDCAN_TxSettings>
  printf("can start\r\n");
 8000768:	4807      	ldr	r0, [pc, #28]	@ (8000788 <main+0x54>)
 800076a:	f003 fc55 	bl	8004018 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  printf("encoder:%d\r\n", count);
 800076e:	4b07      	ldr	r3, [pc, #28]	@ (800078c <main+0x58>)
 8000770:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000774:	4619      	mov	r1, r3
 8000776:	4806      	ldr	r0, [pc, #24]	@ (8000790 <main+0x5c>)
 8000778:	f003 fbe6 	bl	8003f48 <iprintf>
 800077c:	e7f7      	b.n	800076e <main+0x3a>
 800077e:	bf00      	nop
 8000780:	20000018 	.word	0x20000018
 8000784:	08004f24 	.word	0x08004f24
 8000788:	08004f2c 	.word	0x08004f2c
 800078c:	200001d0 	.word	0x200001d0
 8000790:	08004f38 	.word	0x08004f38

08000794 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	b094      	sub	sp, #80	@ 0x50
 8000798:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800079a:	f107 0318 	add.w	r3, r7, #24
 800079e:	2238      	movs	r2, #56	@ 0x38
 80007a0:	2100      	movs	r1, #0
 80007a2:	4618      	mov	r0, r3
 80007a4:	f003 fdd4 	bl	8004350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	2200      	movs	r2, #0
 80007ac:	601a      	str	r2, [r3, #0]
 80007ae:	605a      	str	r2, [r3, #4]
 80007b0:	609a      	str	r2, [r3, #8]
 80007b2:	60da      	str	r2, [r3, #12]
 80007b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80007ba:	f001 fbd7 	bl	8001f6c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007be:	2302      	movs	r3, #2
 80007c0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007c2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007c8:	2340      	movs	r3, #64	@ 0x40
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007cc:	2302      	movs	r3, #2
 80007ce:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80007d0:	2302      	movs	r3, #2
 80007d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80007d4:	2301      	movs	r3, #1
 80007d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
 80007d8:	230a      	movs	r3, #10
 80007da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007dc:	2302      	movs	r3, #2
 80007de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80007e0:	2302      	movs	r3, #2
 80007e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007e8:	f107 0318 	add.w	r3, r7, #24
 80007ec:	4618      	mov	r0, r3
 80007ee:	f001 fc71 	bl	80020d4 <HAL_RCC_OscConfig>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <SystemClock_Config+0x68>
  {
    Error_Handler();
 80007f8:	f000 f8c6 	bl	8000988 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007fc:	230f      	movs	r3, #15
 80007fe:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000800:	2303      	movs	r3, #3
 8000802:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000804:	2300      	movs	r3, #0
 8000806:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000810:	1d3b      	adds	r3, r7, #4
 8000812:	2102      	movs	r1, #2
 8000814:	4618      	mov	r0, r3
 8000816:	f001 ff6f 	bl	80026f8 <HAL_RCC_ClockConfig>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000820:	f000 f8b2 	bl	8000988 <Error_Handler>
  }
}
 8000824:	bf00      	nop
 8000826:	3750      	adds	r7, #80	@ 0x50
 8000828:	46bd      	mov	sp, r7
 800082a:	bd80      	pop	{r7, pc}

0800082c <MX_FDCAN1_Init>:
  * @brief FDCAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_FDCAN1_Init(void)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000830:	4b20      	ldr	r3, [pc, #128]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000832:	4a21      	ldr	r2, [pc, #132]	@ (80008b8 <MX_FDCAN1_Init+0x8c>)
 8000834:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000836:	4b1f      	ldr	r3, [pc, #124]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000838:	2200      	movs	r2, #0
 800083a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_FD_BRS;
 800083c:	4b1d      	ldr	r3, [pc, #116]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800083e:	f44f 7240 	mov.w	r2, #768	@ 0x300
 8000842:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000844:	4b1b      	ldr	r3, [pc, #108]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000846:	2200      	movs	r2, #0
 8000848:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 800084a:	4b1a      	ldr	r3, [pc, #104]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800084c:	2200      	movs	r2, #0
 800084e:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000850:	4b18      	ldr	r3, [pc, #96]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000852:	2200      	movs	r2, #0
 8000854:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000856:	4b17      	ldr	r3, [pc, #92]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000858:	2200      	movs	r2, #0
 800085a:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 4;
 800085c:	4b15      	ldr	r3, [pc, #84]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800085e:	2204      	movs	r2, #4
 8000860:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000862:	4b14      	ldr	r3, [pc, #80]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000864:	2201      	movs	r2, #1
 8000866:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 15;
 8000868:	4b12      	ldr	r3, [pc, #72]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800086a:	220f      	movs	r2, #15
 800086c:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 4;
 800086e:	4b11      	ldr	r3, [pc, #68]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000870:	2204      	movs	r2, #4
 8000872:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 2;
 8000874:	4b0f      	ldr	r3, [pc, #60]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000876:	2202      	movs	r2, #2
 8000878:	625a      	str	r2, [r3, #36]	@ 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 800087a:	4b0e      	ldr	r3, [pc, #56]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800087c:	2201      	movs	r2, #1
 800087e:	629a      	str	r2, [r3, #40]	@ 0x28
  hfdcan1.Init.DataTimeSeg1 = 15;
 8000880:	4b0c      	ldr	r3, [pc, #48]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000882:	220f      	movs	r2, #15
 8000884:	62da      	str	r2, [r3, #44]	@ 0x2c
  hfdcan1.Init.DataTimeSeg2 = 4;
 8000886:	4b0b      	ldr	r3, [pc, #44]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000888:	2204      	movs	r2, #4
 800088a:	631a      	str	r2, [r3, #48]	@ 0x30
  hfdcan1.Init.StdFiltersNbr = 1;
 800088c:	4b09      	ldr	r3, [pc, #36]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800088e:	2201      	movs	r2, #1
 8000890:	635a      	str	r2, [r3, #52]	@ 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000892:	4b08      	ldr	r3, [pc, #32]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 8000894:	2200      	movs	r2, #0
 8000896:	639a      	str	r2, [r3, #56]	@ 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000898:	4b06      	ldr	r3, [pc, #24]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 800089a:	2200      	movs	r2, #0
 800089c:	63da      	str	r2, [r3, #60]	@ 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 800089e:	4805      	ldr	r0, [pc, #20]	@ (80008b4 <MX_FDCAN1_Init+0x88>)
 80008a0:	f000 fbec 	bl	800107c <HAL_FDCAN_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_FDCAN1_Init+0x82>
  {
    Error_Handler();
 80008aa:	f000 f86d 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 80008ae:	bf00      	nop
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	20000084 	.word	0x20000084
 80008b8:	40006400 	.word	0x40006400

080008bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008c0:	4b22      	ldr	r3, [pc, #136]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008c2:	4a23      	ldr	r2, [pc, #140]	@ (8000950 <MX_USART2_UART_Init+0x94>)
 80008c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1000000;
 80008c6:	4b21      	ldr	r3, [pc, #132]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008c8:	4a22      	ldr	r2, [pc, #136]	@ (8000954 <MX_USART2_UART_Init+0x98>)
 80008ca:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008cc:	4b1f      	ldr	r3, [pc, #124]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008d2:	4b1e      	ldr	r3, [pc, #120]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008da:	2200      	movs	r2, #0
 80008dc:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008de:	4b1b      	ldr	r3, [pc, #108]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008e0:	220c      	movs	r2, #12
 80008e2:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008e4:	4b19      	ldr	r3, [pc, #100]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008ea:	4b18      	ldr	r3, [pc, #96]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80008f0:	4b16      	ldr	r3, [pc, #88]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80008f6:	4b15      	ldr	r3, [pc, #84]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008fc:	4b13      	ldr	r3, [pc, #76]	@ (800094c <MX_USART2_UART_Init+0x90>)
 80008fe:	2200      	movs	r2, #0
 8000900:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000902:	4812      	ldr	r0, [pc, #72]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000904:	f002 fb62 	bl	8002fcc <HAL_UART_Init>
 8000908:	4603      	mov	r3, r0
 800090a:	2b00      	cmp	r3, #0
 800090c:	d001      	beq.n	8000912 <MX_USART2_UART_Init+0x56>
  {
    Error_Handler();
 800090e:	f000 f83b 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000912:	2100      	movs	r1, #0
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000916:	f003 f98b 	bl	8003c30 <HAL_UARTEx_SetTxFifoThreshold>
 800091a:	4603      	mov	r3, r0
 800091c:	2b00      	cmp	r3, #0
 800091e:	d001      	beq.n	8000924 <MX_USART2_UART_Init+0x68>
  {
    Error_Handler();
 8000920:	f000 f832 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000924:	2100      	movs	r1, #0
 8000926:	4809      	ldr	r0, [pc, #36]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000928:	f003 f9c0 	bl	8003cac <HAL_UARTEx_SetRxFifoThreshold>
 800092c:	4603      	mov	r3, r0
 800092e:	2b00      	cmp	r3, #0
 8000930:	d001      	beq.n	8000936 <MX_USART2_UART_Init+0x7a>
  {
    Error_Handler();
 8000932:	f000 f829 	bl	8000988 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000936:	4805      	ldr	r0, [pc, #20]	@ (800094c <MX_USART2_UART_Init+0x90>)
 8000938:	f003 f941 	bl	8003bbe <HAL_UARTEx_DisableFifoMode>
 800093c:	4603      	mov	r3, r0
 800093e:	2b00      	cmp	r3, #0
 8000940:	d001      	beq.n	8000946 <MX_USART2_UART_Init+0x8a>
  {
    Error_Handler();
 8000942:	f000 f821 	bl	8000988 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000946:	bf00      	nop
 8000948:	bd80      	pop	{r7, pc}
 800094a:	bf00      	nop
 800094c:	200000e8 	.word	0x200000e8
 8000950:	40004400 	.word	0x40004400
 8000954:	000f4240 	.word	0x000f4240

08000958 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000958:	b480      	push	{r7}
 800095a:	b083      	sub	sp, #12
 800095c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800095e:	4b09      	ldr	r3, [pc, #36]	@ (8000984 <MX_GPIO_Init+0x2c>)
 8000960:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000962:	4a08      	ldr	r2, [pc, #32]	@ (8000984 <MX_GPIO_Init+0x2c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800096a:	4b06      	ldr	r3, [pc, #24]	@ (8000984 <MX_GPIO_Init+0x2c>)
 800096c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000976:	bf00      	nop
 8000978:	370c      	adds	r7, #12
 800097a:	46bd      	mov	sp, r7
 800097c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000980:	4770      	bx	lr
 8000982:	bf00      	nop
 8000984:	40021000 	.word	0x40021000

08000988 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800098c:	b672      	cpsid	i
}
 800098e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  printf("error\r\n");
 8000990:	4802      	ldr	r0, [pc, #8]	@ (800099c <Error_Handler+0x14>)
 8000992:	f003 fb41 	bl	8004018 <puts>
  while (1)
 8000996:	bf00      	nop
 8000998:	e7fd      	b.n	8000996 <Error_Handler+0xe>
 800099a:	bf00      	nop
 800099c:	08004f48 	.word	0x08004f48

080009a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009a6:	4b0f      	ldr	r3, [pc, #60]	@ (80009e4 <HAL_MspInit+0x44>)
 80009a8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009aa:	4a0e      	ldr	r2, [pc, #56]	@ (80009e4 <HAL_MspInit+0x44>)
 80009ac:	f043 0301 	orr.w	r3, r3, #1
 80009b0:	6613      	str	r3, [r2, #96]	@ 0x60
 80009b2:	4b0c      	ldr	r3, [pc, #48]	@ (80009e4 <HAL_MspInit+0x44>)
 80009b4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80009b6:	f003 0301 	and.w	r3, r3, #1
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009be:	4b09      	ldr	r3, [pc, #36]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009c2:	4a08      	ldr	r2, [pc, #32]	@ (80009e4 <HAL_MspInit+0x44>)
 80009c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009c8:	6593      	str	r3, [r2, #88]	@ 0x58
 80009ca:	4b06      	ldr	r3, [pc, #24]	@ (80009e4 <HAL_MspInit+0x44>)
 80009cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80009ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80009d6:	f001 fb6d 	bl	80020b4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009da:	bf00      	nop
 80009dc:	3708      	adds	r7, #8
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <HAL_FDCAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hfdcan: FDCAN handle pointer
* @retval None
*/
void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* hfdcan)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b09e      	sub	sp, #120	@ 0x78
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009f0:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 80009f4:	2200      	movs	r2, #0
 80009f6:	601a      	str	r2, [r3, #0]
 80009f8:	605a      	str	r2, [r3, #4]
 80009fa:	609a      	str	r2, [r3, #8]
 80009fc:	60da      	str	r2, [r3, #12]
 80009fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a00:	f107 0310 	add.w	r3, r7, #16
 8000a04:	2254      	movs	r2, #84	@ 0x54
 8000a06:	2100      	movs	r1, #0
 8000a08:	4618      	mov	r0, r3
 8000a0a:	f003 fca1 	bl	8004350 <memset>
  if(hfdcan->Instance==FDCAN1)
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	4a28      	ldr	r2, [pc, #160]	@ (8000ab4 <HAL_FDCAN_MspInit+0xcc>)
 8000a14:	4293      	cmp	r3, r2
 8000a16:	d149      	bne.n	8000aac <HAL_FDCAN_MspInit+0xc4>

  /* USER CODE END FDCAN1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000a18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000a1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000a22:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a24:	f107 0310 	add.w	r3, r7, #16
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f002 f881 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d001      	beq.n	8000a38 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000a34:	f7ff ffa8 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000a38:	4b1f      	ldr	r3, [pc, #124]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a3c:	4a1e      	ldr	r2, [pc, #120]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a3e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000a42:	6593      	str	r3, [r2, #88]	@ 0x58
 8000a44:	4b1c      	ldr	r3, [pc, #112]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000a48:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000a4c:	60fb      	str	r3, [r7, #12]
 8000a4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a50:	4b19      	ldr	r3, [pc, #100]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a52:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a54:	4a18      	ldr	r2, [pc, #96]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a56:	f043 0301 	orr.w	r3, r3, #1
 8000a5a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000a5c:	4b16      	ldr	r3, [pc, #88]	@ (8000ab8 <HAL_FDCAN_MspInit+0xd0>)
 8000a5e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000a60:	f003 0301 	and.w	r3, r3, #1
 8000a64:	60bb      	str	r3, [r7, #8]
 8000a66:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PA11     ------> FDCAN1_RX
    PA12     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a68:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8000a6c:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a6e:	2302      	movs	r3, #2
 8000a70:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a72:	2300      	movs	r3, #0
 8000a74:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a76:	2300      	movs	r3, #0
 8000a78:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000a7a:	2309      	movs	r3, #9
 8000a7c:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a7e:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000a82:	4619      	mov	r1, r3
 8000a84:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a88:	f001 f8ee 	bl	8001c68 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 0, 0);
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	2100      	movs	r1, #0
 8000a90:	2015      	movs	r0, #21
 8000a92:	f000 fabe 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8000a96:	2015      	movs	r0, #21
 8000a98:	f000 fad5 	bl	8001046 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(FDCAN1_IT1_IRQn, 0, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2100      	movs	r1, #0
 8000aa0:	2016      	movs	r0, #22
 8000aa2:	f000 fab6 	bl	8001012 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT1_IRQn);
 8000aa6:	2016      	movs	r0, #22
 8000aa8:	f000 facd 	bl	8001046 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }

}
 8000aac:	bf00      	nop
 8000aae:	3778      	adds	r7, #120	@ 0x78
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}
 8000ab4:	40006400 	.word	0x40006400
 8000ab8:	40021000 	.word	0x40021000

08000abc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	@ 0x78
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000ac8:	2200      	movs	r2, #0
 8000aca:	601a      	str	r2, [r3, #0]
 8000acc:	605a      	str	r2, [r3, #4]
 8000ace:	609a      	str	r2, [r3, #8]
 8000ad0:	60da      	str	r2, [r3, #12]
 8000ad2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ad4:	f107 0310 	add.w	r3, r7, #16
 8000ad8:	2254      	movs	r2, #84	@ 0x54
 8000ada:	2100      	movs	r1, #0
 8000adc:	4618      	mov	r0, r3
 8000ade:	f003 fc37 	bl	8004350 <memset>
  if(huart->Instance==USART2)
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a1f      	ldr	r2, [pc, #124]	@ (8000b64 <HAL_UART_MspInit+0xa8>)
 8000ae8:	4293      	cmp	r3, r2
 8000aea:	d136      	bne.n	8000b5a <HAL_UART_MspInit+0x9e>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000aec:	2302      	movs	r3, #2
 8000aee:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000af0:	2300      	movs	r3, #0
 8000af2:	61bb      	str	r3, [r7, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	4618      	mov	r0, r3
 8000afa:	f002 f819 	bl	8002b30 <HAL_RCCEx_PeriphCLKConfig>
 8000afe:	4603      	mov	r3, r0
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	d001      	beq.n	8000b08 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b04:	f7ff ff40 	bl	8000988 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b08:	4b17      	ldr	r3, [pc, #92]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b0a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b0c:	4a16      	ldr	r2, [pc, #88]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b0e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000b12:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b14:	4b14      	ldr	r3, [pc, #80]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b18:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000b1c:	60fb      	str	r3, [r7, #12]
 8000b1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b20:	4b11      	ldr	r3, [pc, #68]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b22:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b24:	4a10      	ldr	r2, [pc, #64]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b26:	f043 0301 	orr.w	r3, r3, #1
 8000b2a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	@ (8000b68 <HAL_UART_MspInit+0xac>)
 8000b2e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000b30:	f003 0301 	and.w	r3, r3, #1
 8000b34:	60bb      	str	r3, [r7, #8]
 8000b36:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	667b      	str	r3, [r7, #100]	@ 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	66bb      	str	r3, [r7, #104]	@ 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b40:	2300      	movs	r3, #0
 8000b42:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b44:	2300      	movs	r3, #0
 8000b46:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b48:	2307      	movs	r3, #7
 8000b4a:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b4c:	f107 0364 	add.w	r3, r7, #100	@ 0x64
 8000b50:	4619      	mov	r1, r3
 8000b52:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b56:	f001 f887 	bl	8001c68 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000b5a:	bf00      	nop
 8000b5c:	3778      	adds	r7, #120	@ 0x78
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	40004400 	.word	0x40004400
 8000b68:	40021000 	.word	0x40021000

08000b6c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000b70:	bf00      	nop
 8000b72:	e7fd      	b.n	8000b70 <NMI_Handler+0x4>

08000b74 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b74:	b480      	push	{r7}
 8000b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b78:	bf00      	nop
 8000b7a:	e7fd      	b.n	8000b78 <HardFault_Handler+0x4>

08000b7c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b80:	bf00      	nop
 8000b82:	e7fd      	b.n	8000b80 <MemManage_Handler+0x4>

08000b84 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b88:	bf00      	nop
 8000b8a:	e7fd      	b.n	8000b88 <BusFault_Handler+0x4>

08000b8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b90:	bf00      	nop
 8000b92:	e7fd      	b.n	8000b90 <UsageFault_Handler+0x4>

08000b94 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ba6:	bf00      	nop
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr

08000bb0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bb4:	bf00      	nop
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr

08000bbe <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bbe:	b580      	push	{r7, lr}
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bc2:	f000 f92d 	bl	8000e20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bc6:	bf00      	nop
 8000bc8:	bd80      	pop	{r7, pc}
	...

08000bcc <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000bd0:	4802      	ldr	r0, [pc, #8]	@ (8000bdc <FDCAN1_IT0_IRQHandler+0x10>)
 8000bd2:	f000 fe4f 	bl	8001874 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */

  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	20000084 	.word	0x20000084

08000be0 <FDCAN1_IT1_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 1.
  */
void FDCAN1_IT1_IRQHandler(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 0 */

  /* USER CODE END FDCAN1_IT1_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8000be4:	4802      	ldr	r0, [pc, #8]	@ (8000bf0 <FDCAN1_IT1_IRQHandler+0x10>)
 8000be6:	f000 fe45 	bl	8001874 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT1_IRQn 1 */

  /* USER CODE END FDCAN1_IT1_IRQn 1 */
}
 8000bea:	bf00      	nop
 8000bec:	bd80      	pop	{r7, pc}
 8000bee:	bf00      	nop
 8000bf0:	20000084 	.word	0x20000084

08000bf4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b086      	sub	sp, #24
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	60f8      	str	r0, [r7, #12]
 8000bfc:	60b9      	str	r1, [r7, #8]
 8000bfe:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c00:	2300      	movs	r3, #0
 8000c02:	617b      	str	r3, [r7, #20]
 8000c04:	e00a      	b.n	8000c1c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000c06:	f3af 8000 	nop.w
 8000c0a:	4601      	mov	r1, r0
 8000c0c:	68bb      	ldr	r3, [r7, #8]
 8000c0e:	1c5a      	adds	r2, r3, #1
 8000c10:	60ba      	str	r2, [r7, #8]
 8000c12:	b2ca      	uxtb	r2, r1
 8000c14:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c16:	697b      	ldr	r3, [r7, #20]
 8000c18:	3301      	adds	r3, #1
 8000c1a:	617b      	str	r3, [r7, #20]
 8000c1c:	697a      	ldr	r2, [r7, #20]
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	dbf0      	blt.n	8000c06 <_read+0x12>
  }

  return len;
 8000c24:	687b      	ldr	r3, [r7, #4]
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	3718      	adds	r7, #24
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <_close>:
  }
  return len;
}

int _close(int file)
{
 8000c2e:	b480      	push	{r7}
 8000c30:	b083      	sub	sp, #12
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000c36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	370c      	adds	r7, #12
 8000c3e:	46bd      	mov	sp, r7
 8000c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c44:	4770      	bx	lr

08000c46 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c46:	b480      	push	{r7}
 8000c48:	b083      	sub	sp, #12
 8000c4a:	af00      	add	r7, sp, #0
 8000c4c:	6078      	str	r0, [r7, #4]
 8000c4e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000c50:	683b      	ldr	r3, [r7, #0]
 8000c52:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000c56:	605a      	str	r2, [r3, #4]
  return 0;
 8000c58:	2300      	movs	r3, #0
}
 8000c5a:	4618      	mov	r0, r3
 8000c5c:	370c      	adds	r7, #12
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <_isatty>:

int _isatty(int file)
{
 8000c66:	b480      	push	{r7}
 8000c68:	b083      	sub	sp, #12
 8000c6a:	af00      	add	r7, sp, #0
 8000c6c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000c6e:	2301      	movs	r3, #1
}
 8000c70:	4618      	mov	r0, r3
 8000c72:	370c      	adds	r7, #12
 8000c74:	46bd      	mov	sp, r7
 8000c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7a:	4770      	bx	lr

08000c7c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000c7c:	b480      	push	{r7}
 8000c7e:	b085      	sub	sp, #20
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	60f8      	str	r0, [r7, #12]
 8000c84:	60b9      	str	r1, [r7, #8]
 8000c86:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000c88:	2300      	movs	r3, #0
}
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	3714      	adds	r7, #20
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
	...

08000c98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b086      	sub	sp, #24
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ca0:	4a14      	ldr	r2, [pc, #80]	@ (8000cf4 <_sbrk+0x5c>)
 8000ca2:	4b15      	ldr	r3, [pc, #84]	@ (8000cf8 <_sbrk+0x60>)
 8000ca4:	1ad3      	subs	r3, r2, r3
 8000ca6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ca8:	697b      	ldr	r3, [r7, #20]
 8000caa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cac:	4b13      	ldr	r3, [pc, #76]	@ (8000cfc <_sbrk+0x64>)
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d102      	bne.n	8000cba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cb4:	4b11      	ldr	r3, [pc, #68]	@ (8000cfc <_sbrk+0x64>)
 8000cb6:	4a12      	ldr	r2, [pc, #72]	@ (8000d00 <_sbrk+0x68>)
 8000cb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <_sbrk+0x64>)
 8000cbc:	681a      	ldr	r2, [r3, #0]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	4413      	add	r3, r2
 8000cc2:	693a      	ldr	r2, [r7, #16]
 8000cc4:	429a      	cmp	r2, r3
 8000cc6:	d207      	bcs.n	8000cd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cc8:	f003 fb90 	bl	80043ec <__errno>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	220c      	movs	r2, #12
 8000cd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000cd2:	f04f 33ff 	mov.w	r3, #4294967295
 8000cd6:	e009      	b.n	8000cec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000cde:	4b07      	ldr	r3, [pc, #28]	@ (8000cfc <_sbrk+0x64>)
 8000ce0:	681a      	ldr	r2, [r3, #0]
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	4a05      	ldr	r2, [pc, #20]	@ (8000cfc <_sbrk+0x64>)
 8000ce8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000cea:	68fb      	ldr	r3, [r7, #12]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3718      	adds	r7, #24
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}
 8000cf4:	20020000 	.word	0x20020000
 8000cf8:	00000400 	.word	0x00000400
 8000cfc:	200001d4 	.word	0x200001d4
 8000d00:	20000328 	.word	0x20000328

08000d04 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000d08:	4b06      	ldr	r3, [pc, #24]	@ (8000d24 <SystemInit+0x20>)
 8000d0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000d0e:	4a05      	ldr	r2, [pc, #20]	@ (8000d24 <SystemInit+0x20>)
 8000d10:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000d14:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000ed00 	.word	0xe000ed00

08000d28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000d28:	480d      	ldr	r0, [pc, #52]	@ (8000d60 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000d2a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d2c:	f7ff ffea 	bl	8000d04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d30:	480c      	ldr	r0, [pc, #48]	@ (8000d64 <LoopForever+0x6>)
  ldr r1, =_edata
 8000d32:	490d      	ldr	r1, [pc, #52]	@ (8000d68 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000d34:	4a0d      	ldr	r2, [pc, #52]	@ (8000d6c <LoopForever+0xe>)
  movs r3, #0
 8000d36:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8000d38:	e002      	b.n	8000d40 <LoopCopyDataInit>

08000d3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d3e:	3304      	adds	r3, #4

08000d40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d44:	d3f9      	bcc.n	8000d3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d46:	4a0a      	ldr	r2, [pc, #40]	@ (8000d70 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000d48:	4c0a      	ldr	r4, [pc, #40]	@ (8000d74 <LoopForever+0x16>)
  movs r3, #0
 8000d4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d4c:	e001      	b.n	8000d52 <LoopFillZerobss>

08000d4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d50:	3204      	adds	r2, #4

08000d52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d54:	d3fb      	bcc.n	8000d4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d56:	f003 fb4f 	bl	80043f8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d5a:	f7ff fceb 	bl	8000734 <main>

08000d5e <LoopForever>:

LoopForever:
    b LoopForever
 8000d5e:	e7fe      	b.n	8000d5e <LoopForever>
  ldr   r0, =_estack
 8000d60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000d64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d68:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d6c:	08004fe4 	.word	0x08004fe4
  ldr r2, =_sbss
 8000d70:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d74:	20000328 	.word	0x20000328

08000d78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d78:	e7fe      	b.n	8000d78 <ADC1_2_IRQHandler>

08000d7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d7a:	b580      	push	{r7, lr}
 8000d7c:	b082      	sub	sp, #8
 8000d7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000d80:	2300      	movs	r3, #0
 8000d82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d84:	2003      	movs	r0, #3
 8000d86:	f000 f939 	bl	8000ffc <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d8a:	200f      	movs	r0, #15
 8000d8c:	f000 f80e 	bl	8000dac <HAL_InitTick>
 8000d90:	4603      	mov	r3, r0
 8000d92:	2b00      	cmp	r3, #0
 8000d94:	d002      	beq.n	8000d9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d96:	2301      	movs	r3, #1
 8000d98:	71fb      	strb	r3, [r7, #7]
 8000d9a:	e001      	b.n	8000da0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d9c:	f7ff fe00 	bl	80009a0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000da0:	79fb      	ldrb	r3, [r7, #7]

}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3708      	adds	r7, #8
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bd80      	pop	{r7, pc}
	...

08000dac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b084      	sub	sp, #16
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000db4:	2300      	movs	r3, #0
 8000db6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000db8:	4b16      	ldr	r3, [pc, #88]	@ (8000e14 <HAL_InitTick+0x68>)
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d022      	beq.n	8000e06 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8000dc0:	4b15      	ldr	r3, [pc, #84]	@ (8000e18 <HAL_InitTick+0x6c>)
 8000dc2:	681a      	ldr	r2, [r3, #0]
 8000dc4:	4b13      	ldr	r3, [pc, #76]	@ (8000e14 <HAL_InitTick+0x68>)
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 8000dcc:	fbb1 f3f3 	udiv	r3, r1, r3
 8000dd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8000dd4:	4618      	mov	r0, r3
 8000dd6:	f000 f944 	bl	8001062 <HAL_SYSTICK_Config>
 8000dda:	4603      	mov	r3, r0
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d10f      	bne.n	8000e00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2b0f      	cmp	r3, #15
 8000de4:	d809      	bhi.n	8000dfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000de6:	2200      	movs	r2, #0
 8000de8:	6879      	ldr	r1, [r7, #4]
 8000dea:	f04f 30ff 	mov.w	r0, #4294967295
 8000dee:	f000 f910 	bl	8001012 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000df2:	4a0a      	ldr	r2, [pc, #40]	@ (8000e1c <HAL_InitTick+0x70>)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	e007      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	73fb      	strb	r3, [r7, #15]
 8000dfe:	e004      	b.n	8000e0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000e00:	2301      	movs	r3, #1
 8000e02:	73fb      	strb	r3, [r7, #15]
 8000e04:	e001      	b.n	8000e0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000e06:	2301      	movs	r3, #1
 8000e08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000e0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	3710      	adds	r7, #16
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000008 	.word	0x20000008
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	20000004 	.word	0x20000004

08000e20 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e24:	4b05      	ldr	r3, [pc, #20]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4b05      	ldr	r3, [pc, #20]	@ (8000e40 <HAL_IncTick+0x20>)
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	4413      	add	r3, r2
 8000e2e:	4a03      	ldr	r2, [pc, #12]	@ (8000e3c <HAL_IncTick+0x1c>)
 8000e30:	6013      	str	r3, [r2, #0]
}
 8000e32:	bf00      	nop
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr
 8000e3c:	200001d8 	.word	0x200001d8
 8000e40:	20000008 	.word	0x20000008

08000e44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e44:	b480      	push	{r7}
 8000e46:	af00      	add	r7, sp, #0
  return uwTick;
 8000e48:	4b03      	ldr	r3, [pc, #12]	@ (8000e58 <HAL_GetTick+0x14>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	46bd      	mov	sp, r7
 8000e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop
 8000e58:	200001d8 	.word	0x200001d8

08000e5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e5c:	b480      	push	{r7}
 8000e5e:	b085      	sub	sp, #20
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e6c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e72:	68ba      	ldr	r2, [r7, #8]
 8000e74:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e80:	68bb      	ldr	r3, [r7, #8]
 8000e82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e84:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000e88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e8e:	4a04      	ldr	r2, [pc, #16]	@ (8000ea0 <__NVIC_SetPriorityGrouping+0x44>)
 8000e90:	68bb      	ldr	r3, [r7, #8]
 8000e92:	60d3      	str	r3, [r2, #12]
}
 8000e94:	bf00      	nop
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr
 8000ea0:	e000ed00 	.word	0xe000ed00

08000ea4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ea8:	4b04      	ldr	r3, [pc, #16]	@ (8000ebc <__NVIC_GetPriorityGrouping+0x18>)
 8000eaa:	68db      	ldr	r3, [r3, #12]
 8000eac:	0a1b      	lsrs	r3, r3, #8
 8000eae:	f003 0307 	and.w	r3, r3, #7
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	e000ed00 	.word	0xe000ed00

08000ec0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b083      	sub	sp, #12
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	4603      	mov	r3, r0
 8000ec8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	db0b      	blt.n	8000eea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ed2:	79fb      	ldrb	r3, [r7, #7]
 8000ed4:	f003 021f 	and.w	r2, r3, #31
 8000ed8:	4907      	ldr	r1, [pc, #28]	@ (8000ef8 <__NVIC_EnableIRQ+0x38>)
 8000eda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ede:	095b      	lsrs	r3, r3, #5
 8000ee0:	2001      	movs	r0, #1
 8000ee2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ee6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000eea:	bf00      	nop
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000e100 	.word	0xe000e100

08000efc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000efc:	b480      	push	{r7}
 8000efe:	b083      	sub	sp, #12
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	4603      	mov	r3, r0
 8000f04:	6039      	str	r1, [r7, #0]
 8000f06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	db0a      	blt.n	8000f26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f10:	683b      	ldr	r3, [r7, #0]
 8000f12:	b2da      	uxtb	r2, r3
 8000f14:	490c      	ldr	r1, [pc, #48]	@ (8000f48 <__NVIC_SetPriority+0x4c>)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	0112      	lsls	r2, r2, #4
 8000f1c:	b2d2      	uxtb	r2, r2
 8000f1e:	440b      	add	r3, r1
 8000f20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f24:	e00a      	b.n	8000f3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	b2da      	uxtb	r2, r3
 8000f2a:	4908      	ldr	r1, [pc, #32]	@ (8000f4c <__NVIC_SetPriority+0x50>)
 8000f2c:	79fb      	ldrb	r3, [r7, #7]
 8000f2e:	f003 030f 	and.w	r3, r3, #15
 8000f32:	3b04      	subs	r3, #4
 8000f34:	0112      	lsls	r2, r2, #4
 8000f36:	b2d2      	uxtb	r2, r2
 8000f38:	440b      	add	r3, r1
 8000f3a:	761a      	strb	r2, [r3, #24]
}
 8000f3c:	bf00      	nop
 8000f3e:	370c      	adds	r7, #12
 8000f40:	46bd      	mov	sp, r7
 8000f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f46:	4770      	bx	lr
 8000f48:	e000e100 	.word	0xe000e100
 8000f4c:	e000ed00 	.word	0xe000ed00

08000f50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b089      	sub	sp, #36	@ 0x24
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	60f8      	str	r0, [r7, #12]
 8000f58:	60b9      	str	r1, [r7, #8]
 8000f5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f5c:	68fb      	ldr	r3, [r7, #12]
 8000f5e:	f003 0307 	and.w	r3, r3, #7
 8000f62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f64:	69fb      	ldr	r3, [r7, #28]
 8000f66:	f1c3 0307 	rsb	r3, r3, #7
 8000f6a:	2b04      	cmp	r3, #4
 8000f6c:	bf28      	it	cs
 8000f6e:	2304      	movcs	r3, #4
 8000f70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f72:	69fb      	ldr	r3, [r7, #28]
 8000f74:	3304      	adds	r3, #4
 8000f76:	2b06      	cmp	r3, #6
 8000f78:	d902      	bls.n	8000f80 <NVIC_EncodePriority+0x30>
 8000f7a:	69fb      	ldr	r3, [r7, #28]
 8000f7c:	3b03      	subs	r3, #3
 8000f7e:	e000      	b.n	8000f82 <NVIC_EncodePriority+0x32>
 8000f80:	2300      	movs	r3, #0
 8000f82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f84:	f04f 32ff 	mov.w	r2, #4294967295
 8000f88:	69bb      	ldr	r3, [r7, #24]
 8000f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8e:	43da      	mvns	r2, r3
 8000f90:	68bb      	ldr	r3, [r7, #8]
 8000f92:	401a      	ands	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f98:	f04f 31ff 	mov.w	r1, #4294967295
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000fa2:	43d9      	mvns	r1, r3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fa8:	4313      	orrs	r3, r2
         );
}
 8000faa:	4618      	mov	r0, r3
 8000fac:	3724      	adds	r7, #36	@ 0x24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb4:	4770      	bx	lr
	...

08000fb8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b082      	sub	sp, #8
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000fc8:	d301      	bcc.n	8000fce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00f      	b.n	8000fee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000fce:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3b01      	subs	r3, #1
 8000fd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000fd6:	210f      	movs	r1, #15
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000fdc:	f7ff ff8e 	bl	8000efc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000fe0:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000fe6:	4b04      	ldr	r3, [pc, #16]	@ (8000ff8 <SysTick_Config+0x40>)
 8000fe8:	2207      	movs	r2, #7
 8000fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3708      	adds	r7, #8
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	e000e010 	.word	0xe000e010

08000ffc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001004:	6878      	ldr	r0, [r7, #4]
 8001006:	f7ff ff29 	bl	8000e5c <__NVIC_SetPriorityGrouping>
}
 800100a:	bf00      	nop
 800100c:	3708      	adds	r7, #8
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}

08001012 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001012:	b580      	push	{r7, lr}
 8001014:	b086      	sub	sp, #24
 8001016:	af00      	add	r7, sp, #0
 8001018:	4603      	mov	r3, r0
 800101a:	60b9      	str	r1, [r7, #8]
 800101c:	607a      	str	r2, [r7, #4]
 800101e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001020:	f7ff ff40 	bl	8000ea4 <__NVIC_GetPriorityGrouping>
 8001024:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001026:	687a      	ldr	r2, [r7, #4]
 8001028:	68b9      	ldr	r1, [r7, #8]
 800102a:	6978      	ldr	r0, [r7, #20]
 800102c:	f7ff ff90 	bl	8000f50 <NVIC_EncodePriority>
 8001030:	4602      	mov	r2, r0
 8001032:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001036:	4611      	mov	r1, r2
 8001038:	4618      	mov	r0, r3
 800103a:	f7ff ff5f 	bl	8000efc <__NVIC_SetPriority>
}
 800103e:	bf00      	nop
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b082      	sub	sp, #8
 800104a:	af00      	add	r7, sp, #0
 800104c:	4603      	mov	r3, r0
 800104e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001050:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff33 	bl	8000ec0 <__NVIC_EnableIRQ>
}
 800105a:	bf00      	nop
 800105c:	3708      	adds	r7, #8
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffa4 	bl	8000fb8 <SysTick_Config>
 8001070:	4603      	mov	r3, r0
}
 8001072:	4618      	mov	r0, r3
 8001074:	3708      	adds	r7, #8
 8001076:	46bd      	mov	sp, r7
 8001078:	bd80      	pop	{r7, pc}
	...

0800107c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d101      	bne.n	800108e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e147      	b.n	800131e <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001094:	b2db      	uxtb	r3, r3
 8001096:	2b00      	cmp	r3, #0
 8001098:	d106      	bne.n	80010a8 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f7ff fca0 	bl	80009e8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	699a      	ldr	r2, [r3, #24]
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	f022 0210 	bic.w	r2, r2, #16
 80010b6:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 80010b8:	f7ff fec4 	bl	8000e44 <HAL_GetTick>
 80010bc:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010be:	e012      	b.n	80010e6 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80010c0:	f7ff fec0 	bl	8000e44 <HAL_GetTick>
 80010c4:	4602      	mov	r2, r0
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	1ad3      	subs	r3, r2, r3
 80010ca:	2b0a      	cmp	r3, #10
 80010cc:	d90b      	bls.n	80010e6 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80010d2:	f043 0201 	orr.w	r2, r3, #1
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2203      	movs	r2, #3
 80010de:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80010e2:	2301      	movs	r3, #1
 80010e4:	e11b      	b.n	800131e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	699b      	ldr	r3, [r3, #24]
 80010ec:	f003 0308 	and.w	r3, r3, #8
 80010f0:	2b08      	cmp	r3, #8
 80010f2:	d0e5      	beq.n	80010c0 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	699a      	ldr	r2, [r3, #24]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	f042 0201 	orr.w	r2, r2, #1
 8001102:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001104:	f7ff fe9e 	bl	8000e44 <HAL_GetTick>
 8001108:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800110a:	e012      	b.n	8001132 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800110c:	f7ff fe9a 	bl	8000e44 <HAL_GetTick>
 8001110:	4602      	mov	r2, r0
 8001112:	68fb      	ldr	r3, [r7, #12]
 8001114:	1ad3      	subs	r3, r2, r3
 8001116:	2b0a      	cmp	r3, #10
 8001118:	d90b      	bls.n	8001132 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800111e:	f043 0201 	orr.w	r2, r3, #1
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	661a      	str	r2, [r3, #96]	@ 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	2203      	movs	r2, #3
 800112a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e0f5      	b.n	800131e <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	699b      	ldr	r3, [r3, #24]
 8001138:	f003 0301 	and.w	r3, r3, #1
 800113c:	2b00      	cmp	r3, #0
 800113e:	d0e5      	beq.n	800110c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	699a      	ldr	r2, [r3, #24]
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f042 0202 	orr.w	r2, r2, #2
 800114e:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	681b      	ldr	r3, [r3, #0]
 8001154:	4a74      	ldr	r2, [pc, #464]	@ (8001328 <HAL_FDCAN_Init+0x2ac>)
 8001156:	4293      	cmp	r3, r2
 8001158:	d103      	bne.n	8001162 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 800115a:	4a74      	ldr	r2, [pc, #464]	@ (800132c <HAL_FDCAN_Init+0x2b0>)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	7c1b      	ldrb	r3, [r3, #16]
 8001166:	2b01      	cmp	r3, #1
 8001168:	d108      	bne.n	800117c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	699a      	ldr	r2, [r3, #24]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001178:	619a      	str	r2, [r3, #24]
 800117a:	e007      	b.n	800118c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	699a      	ldr	r2, [r3, #24]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800118a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	7c5b      	ldrb	r3, [r3, #17]
 8001190:	2b01      	cmp	r3, #1
 8001192:	d108      	bne.n	80011a6 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	699a      	ldr	r2, [r3, #24]
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80011a2:	619a      	str	r2, [r3, #24]
 80011a4:	e007      	b.n	80011b6 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	699a      	ldr	r2, [r3, #24]
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80011b4:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	7c9b      	ldrb	r3, [r3, #18]
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d108      	bne.n	80011d0 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	699a      	ldr	r2, [r3, #24]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80011cc:	619a      	str	r2, [r3, #24]
 80011ce:	e007      	b.n	80011e0 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	699a      	ldr	r2, [r3, #24]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80011de:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	430a      	orrs	r2, r1
 80011f4:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	699a      	ldr	r2, [r3, #24]
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f022 02a4 	bic.w	r2, r2, #164	@ 0xa4
 8001204:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	691a      	ldr	r2, [r3, #16]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	f022 0210 	bic.w	r2, r2, #16
 8001214:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	68db      	ldr	r3, [r3, #12]
 800121a:	2b01      	cmp	r3, #1
 800121c:	d108      	bne.n	8001230 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	699a      	ldr	r2, [r3, #24]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f042 0204 	orr.w	r2, r2, #4
 800122c:	619a      	str	r2, [r3, #24]
 800122e:	e02c      	b.n	800128a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	68db      	ldr	r3, [r3, #12]
 8001234:	2b00      	cmp	r3, #0
 8001236:	d028      	beq.n	800128a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	68db      	ldr	r3, [r3, #12]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d01c      	beq.n	800127a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	699a      	ldr	r2, [r3, #24]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800124e:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	691a      	ldr	r2, [r3, #16]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f042 0210 	orr.w	r2, r2, #16
 800125e:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	68db      	ldr	r3, [r3, #12]
 8001264:	2b03      	cmp	r3, #3
 8001266:	d110      	bne.n	800128a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699a      	ldr	r2, [r3, #24]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0220 	orr.w	r2, r2, #32
 8001276:	619a      	str	r2, [r3, #24]
 8001278:	e007      	b.n	800128a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	699a      	ldr	r2, [r3, #24]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	f042 0220 	orr.w	r2, r2, #32
 8001288:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	699b      	ldr	r3, [r3, #24]
 800128e:	3b01      	subs	r3, #1
 8001290:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	69db      	ldr	r3, [r3, #28]
 8001296:	3b01      	subs	r3, #1
 8001298:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800129a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	6a1b      	ldr	r3, [r3, #32]
 80012a0:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80012a2:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	695b      	ldr	r3, [r3, #20]
 80012aa:	3b01      	subs	r3, #1
 80012ac:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80012b2:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80012b4:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80012be:	d115      	bne.n	80012ec <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c4:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80012ca:	3b01      	subs	r3, #1
 80012cc:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ce:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012d4:	3b01      	subs	r3, #1
 80012d6:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 80012d8:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012e0:	3b01      	subs	r3, #1
 80012e2:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 80012e8:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 80012ea:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	f8d3 10c0 	ldr.w	r1, [r3, #192]	@ 0xc0
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	430a      	orrs	r2, r1
 80012fe:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8001302:	6878      	ldr	r0, [r7, #4]
 8001304:	f000 fc44 	bl	8001b90 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2200      	movs	r2, #0
 8001312:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	2201      	movs	r2, #1
 8001318:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Return function status */
  return HAL_OK;
 800131c:	2300      	movs	r3, #0
}
 800131e:	4618      	mov	r0, r3
 8001320:	3710      	adds	r7, #16
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	40006400 	.word	0x40006400
 800132c:	40006500 	.word	0x40006500

08001330 <HAL_FDCAN_ConfigFilter>:
  * @param  sFilterConfig pointer to an FDCAN_FilterTypeDef structure that
  *         contains the filter configuration information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ConfigFilter(FDCAN_HandleTypeDef *hfdcan, const FDCAN_FilterTypeDef *sFilterConfig)
{
 8001330:	b480      	push	{r7}
 8001332:	b087      	sub	sp, #28
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  uint32_t FilterElementW1;
  uint32_t FilterElementW2;
  uint32_t *FilterAddress;
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001340:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 8001342:	7dfb      	ldrb	r3, [r7, #23]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d002      	beq.n	800134e <HAL_FDCAN_ConfigFilter+0x1e>
 8001348:	7dfb      	ldrb	r3, [r7, #23]
 800134a:	2b02      	cmp	r3, #2
 800134c:	d13d      	bne.n	80013ca <HAL_FDCAN_ConfigFilter+0x9a>
  {
    /* Check function parameters */
    assert_param(IS_FDCAN_ID_TYPE(sFilterConfig->IdType));
    assert_param(IS_FDCAN_FILTER_CFG(sFilterConfig->FilterConfig));

    if (sFilterConfig->IdType == FDCAN_STANDARD_ID)
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d119      	bne.n	800138a <HAL_FDCAN_ConfigFilter+0x5a>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x7FFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x7FFU));
      assert_param(IS_FDCAN_STD_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build filter element */
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	689b      	ldr	r3, [r3, #8]
 800135a:	079a      	lsls	r2, r3, #30
                         (sFilterConfig->FilterConfig << 27U) |
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	68db      	ldr	r3, [r3, #12]
 8001360:	06db      	lsls	r3, r3, #27
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001362:	431a      	orrs	r2, r3
                         (sFilterConfig->FilterID1 << 16U)    |
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	691b      	ldr	r3, [r3, #16]
 8001368:	041b      	lsls	r3, r3, #16
                         (sFilterConfig->FilterConfig << 27U) |
 800136a:	431a      	orrs	r2, r3
                         sFilterConfig->FilterID2);
 800136c:	683b      	ldr	r3, [r7, #0]
 800136e:	695b      	ldr	r3, [r3, #20]
      FilterElementW1 = ((sFilterConfig->FilterType << 30U)   |
 8001370:	4313      	orrs	r3, r2
 8001372:	613b      	str	r3, [r7, #16]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.StandardFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLS_SIZE));
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	685b      	ldr	r3, [r3, #4]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 8001382:	68bb      	ldr	r3, [r7, #8]
 8001384:	693a      	ldr	r2, [r7, #16]
 8001386:	601a      	str	r2, [r3, #0]
 8001388:	e01d      	b.n	80013c6 <HAL_FDCAN_ConfigFilter+0x96>
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID1, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_MAX_VALUE(sFilterConfig->FilterID2, 0x1FFFFFFFU));
      assert_param(IS_FDCAN_EXT_FILTER_TYPE(sFilterConfig->FilterType));

      /* Build first word of filter element */
      FilterElementW1 = ((sFilterConfig->FilterConfig << 29U) | sFilterConfig->FilterID1);
 800138a:	683b      	ldr	r3, [r7, #0]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	075a      	lsls	r2, r3, #29
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	691b      	ldr	r3, [r3, #16]
 8001394:	4313      	orrs	r3, r2
 8001396:	613b      	str	r3, [r7, #16]

      /* Build second word of filter element */
      FilterElementW2 = ((sFilterConfig->FilterType << 30U) | sFilterConfig->FilterID2);
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	689b      	ldr	r3, [r3, #8]
 800139c:	079a      	lsls	r2, r3, #30
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	695b      	ldr	r3, [r3, #20]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]

      /* Calculate filter address */
      FilterAddress = (uint32_t *)(hfdcan->msgRam.ExtendedFilterSA + (sFilterConfig->FilterIndex * SRAMCAN_FLE_SIZE));
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80013aa:	683b      	ldr	r3, [r7, #0]
 80013ac:	685b      	ldr	r3, [r3, #4]
 80013ae:	00db      	lsls	r3, r3, #3
 80013b0:	4413      	add	r3, r2
 80013b2:	60bb      	str	r3, [r7, #8]

      /* Write filter element to the message RAM */
      *FilterAddress = FilterElementW1;
 80013b4:	68bb      	ldr	r3, [r7, #8]
 80013b6:	693a      	ldr	r2, [r7, #16]
 80013b8:	601a      	str	r2, [r3, #0]
      FilterAddress++;
 80013ba:	68bb      	ldr	r3, [r7, #8]
 80013bc:	3304      	adds	r3, #4
 80013be:	60bb      	str	r3, [r7, #8]
      *FilterAddress = FilterElementW2;
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	601a      	str	r2, [r3, #0]
    }

    /* Return function status */
    return HAL_OK;
 80013c6:	2300      	movs	r3, #0
 80013c8:	e006      	b.n	80013d8 <HAL_FDCAN_ConfigFilter+0xa8>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ce:	f043 0202 	orr.w	r2, r3, #2
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 80013d6:	2301      	movs	r3, #1
  }
}
 80013d8:	4618      	mov	r0, r3
 80013da:	371c      	adds	r7, #28
 80013dc:	46bd      	mov	sp, r7
 80013de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e2:	4770      	bx	lr

080013e4 <HAL_FDCAN_ConfigGlobalFilter>:
HAL_StatusTypeDef HAL_FDCAN_ConfigGlobalFilter(FDCAN_HandleTypeDef *hfdcan,
                                               uint32_t NonMatchingStd,
                                               uint32_t NonMatchingExt,
                                               uint32_t RejectRemoteStd,
                                               uint32_t RejectRemoteExt)
{
 80013e4:	b480      	push	{r7}
 80013e6:	b085      	sub	sp, #20
 80013e8:	af00      	add	r7, sp, #0
 80013ea:	60f8      	str	r0, [r7, #12]
 80013ec:	60b9      	str	r1, [r7, #8]
 80013ee:	607a      	str	r2, [r7, #4]
 80013f0:	603b      	str	r3, [r7, #0]
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingStd));
  assert_param(IS_FDCAN_NON_MATCHING(NonMatchingExt));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteStd));
  assert_param(IS_FDCAN_REJECT_REMOTE(RejectRemoteExt));

  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d116      	bne.n	800142c <HAL_FDCAN_ConfigGlobalFilter+0x48>
  {
    /* Configure global filter */
    MODIFY_REG(hfdcan->Instance->RXGFC, (FDCAN_RXGFC_ANFS |
 80013fe:	68fb      	ldr	r3, [r7, #12]
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001406:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800140a:	68bb      	ldr	r3, [r7, #8]
 800140c:	011a      	lsls	r2, r3, #4
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	009b      	lsls	r3, r3, #2
 8001412:	431a      	orrs	r2, r3
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	005b      	lsls	r3, r3, #1
 8001418:	431a      	orrs	r2, r3
 800141a:	69bb      	ldr	r3, [r7, #24]
 800141c:	431a      	orrs	r2, r3
 800141e:	68fb      	ldr	r3, [r7, #12]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	430a      	orrs	r2, r1
 8001424:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
                (NonMatchingExt << FDCAN_RXGFC_ANFE_Pos)  |
                (RejectRemoteStd << FDCAN_RXGFC_RRFS_Pos) |
                (RejectRemoteExt << FDCAN_RXGFC_RRFE_Pos)));

    /* Return function status */
    return HAL_OK;
 8001428:	2300      	movs	r3, #0
 800142a:	e006      	b.n	800143a <HAL_FDCAN_ConfigGlobalFilter+0x56>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001430:	f043 0204 	orr.w	r2, r3, #4
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001438:	2301      	movs	r3, #1
  }
}
 800143a:	4618      	mov	r0, r3
 800143c:	3714      	adds	r7, #20
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <HAL_FDCAN_Start>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Start(FDCAN_HandleTypeDef *hfdcan)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
  if (hfdcan->State == HAL_FDCAN_STATE_READY)
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8001454:	b2db      	uxtb	r3, r3
 8001456:	2b01      	cmp	r3, #1
 8001458:	d110      	bne.n	800147c <HAL_FDCAN_Start+0x36>
  {
    /* Change FDCAN peripheral state */
    hfdcan->State = HAL_FDCAN_STATE_BUSY;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2202      	movs	r2, #2
 800145e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Request leave initialisation */
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	699a      	ldr	r2, [r3, #24]
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f022 0201 	bic.w	r2, r2, #1
 8001470:	619a      	str	r2, [r3, #24]

    /* Reset the FDCAN ErrorCode */
    hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	2200      	movs	r2, #0
 8001476:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Return function status */
    return HAL_OK;
 8001478:	2300      	movs	r3, #0
 800147a:	e006      	b.n	800148a <HAL_FDCAN_Start+0x44>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_READY;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001480:	f043 0204 	orr.w	r2, r3, #4
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001488:	2301      	movs	r3, #1
  }
}
 800148a:	4618      	mov	r0, r3
 800148c:	370c      	adds	r7, #12
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr
	...

08001498 <HAL_FDCAN_GetRxMessage>:
  * @param  pRxData pointer to a buffer where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_GetRxMessage(FDCAN_HandleTypeDef *hfdcan, uint32_t RxLocation,
                                         FDCAN_RxHeaderTypeDef *pRxHeader, uint8_t *pRxData)
{
 8001498:	b480      	push	{r7}
 800149a:	b08b      	sub	sp, #44	@ 0x2c
 800149c:	af00      	add	r7, sp, #0
 800149e:	60f8      	str	r0, [r7, #12]
 80014a0:	60b9      	str	r1, [r7, #8]
 80014a2:	607a      	str	r2, [r7, #4]
 80014a4:	603b      	str	r3, [r7, #0]
  uint32_t *RxAddress;
  uint8_t  *pData;
  uint32_t ByteCounter;
  uint32_t GetIndex = 0;
 80014a6:	2300      	movs	r3, #0
 80014a8:	61fb      	str	r3, [r7, #28]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80014b0:	76fb      	strb	r3, [r7, #27]

  /* Check function parameters */
  assert_param(IS_FDCAN_RX_FIFO(RxLocation));

  if (state == HAL_FDCAN_STATE_BUSY)
 80014b2:	7efb      	ldrb	r3, [r7, #27]
 80014b4:	2b02      	cmp	r3, #2
 80014b6:	f040 80e8 	bne.w	800168a <HAL_FDCAN_GetRxMessage+0x1f2>
  {
    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	2b40      	cmp	r3, #64	@ 0x40
 80014be:	d137      	bne.n	8001530 <HAL_FDCAN_GetRxMessage+0x98>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0FL) == 0U)
 80014c0:	68fb      	ldr	r3, [r7, #12]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014c8:	f003 030f 	and.w	r3, r3, #15
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d107      	bne.n	80014e0 <HAL_FDCAN_GetRxMessage+0x48>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80014d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 80014dc:	2301      	movs	r3, #1
 80014de:	e0db      	b.n	8001698 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 0 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0F) >> FDCAN_RXF0S_F0F_Pos) == 1U)
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80014e8:	0e1b      	lsrs	r3, r3, #24
 80014ea:	f003 0301 	and.w	r3, r3, #1
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d10a      	bne.n	8001508 <HAL_FDCAN_GetRxMessage+0x70>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F0OM) >> FDCAN_RXGFC_F0OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014fa:	0a5b      	lsrs	r3, r3, #9
 80014fc:	f003 0301 	and.w	r3, r3, #1
 8001500:	2b01      	cmp	r3, #1
 8001502:	d101      	bne.n	8001508 <HAL_FDCAN_GetRxMessage+0x70>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001504:	2301      	movs	r3, #1
 8001506:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 0 element index */
        GetIndex += ((hfdcan->Instance->RXF0S & FDCAN_RXF0S_F0GI) >> FDCAN_RXF0S_F0GI_Pos);
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001510:	0a1b      	lsrs	r3, r3, #8
 8001512:	f003 0303 	and.w	r3, r3, #3
 8001516:	69fa      	ldr	r2, [r7, #28]
 8001518:	4413      	add	r3, r2
 800151a:	61fb      	str	r3, [r7, #28]

        /* Calculate Rx FIFO 0 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO0SA + (GetIndex * SRAMCAN_RF0_SIZE));
 800151c:	68fb      	ldr	r3, [r7, #12]
 800151e:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 8001520:	69fa      	ldr	r2, [r7, #28]
 8001522:	4613      	mov	r3, r2
 8001524:	00db      	lsls	r3, r3, #3
 8001526:	4413      	add	r3, r2
 8001528:	00db      	lsls	r3, r3, #3
 800152a:	440b      	add	r3, r1
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
 800152e:	e036      	b.n	800159e <HAL_FDCAN_GetRxMessage+0x106>
      }
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1FL) == 0U)
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001538:	f003 030f 	and.w	r3, r3, #15
 800153c:	2b00      	cmp	r3, #0
 800153e:	d107      	bne.n	8001550 <HAL_FDCAN_GetRxMessage+0xb8>
      {
        /* Update error code */
        hfdcan->ErrorCode |= HAL_FDCAN_ERROR_FIFO_EMPTY;
 8001540:	68fb      	ldr	r3, [r7, #12]
 8001542:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001544:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001548:	68fb      	ldr	r3, [r7, #12]
 800154a:	661a      	str	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800154c:	2301      	movs	r3, #1
 800154e:	e0a3      	b.n	8001698 <HAL_FDCAN_GetRxMessage+0x200>
      }
      else
      {
        /* Check that the Rx FIFO 1 is full & overwrite mode is on */
        if (((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1F) >> FDCAN_RXF1S_F1F_Pos) == 1U)
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001558:	0e1b      	lsrs	r3, r3, #24
 800155a:	f003 0301 	and.w	r3, r3, #1
 800155e:	2b01      	cmp	r3, #1
 8001560:	d10a      	bne.n	8001578 <HAL_FDCAN_GetRxMessage+0xe0>
        {
          if (((hfdcan->Instance->RXGFC & FDCAN_RXGFC_F1OM) >> FDCAN_RXGFC_F1OM_Pos) == FDCAN_RX_FIFO_OVERWRITE)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800156a:	0a1b      	lsrs	r3, r3, #8
 800156c:	f003 0301 	and.w	r3, r3, #1
 8001570:	2b01      	cmp	r3, #1
 8001572:	d101      	bne.n	8001578 <HAL_FDCAN_GetRxMessage+0xe0>
          {
            /* When overwrite status is on discard first message in FIFO */
            GetIndex = 1U;
 8001574:	2301      	movs	r3, #1
 8001576:	61fb      	str	r3, [r7, #28]
          }
        }

        /* Calculate Rx FIFO 1 element index */
        GetIndex += ((hfdcan->Instance->RXF1S & FDCAN_RXF1S_F1GI) >> FDCAN_RXF1S_F1GI_Pos);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001580:	0a1b      	lsrs	r3, r3, #8
 8001582:	f003 0303 	and.w	r3, r3, #3
 8001586:	69fa      	ldr	r2, [r7, #28]
 8001588:	4413      	add	r3, r2
 800158a:	61fb      	str	r3, [r7, #28]
        /* Calculate Rx FIFO 1 element address */
        RxAddress = (uint32_t *)(hfdcan->msgRam.RxFIFO1SA + (GetIndex * SRAMCAN_RF1_SIZE));
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 8001590:	69fa      	ldr	r2, [r7, #28]
 8001592:	4613      	mov	r3, r2
 8001594:	00db      	lsls	r3, r3, #3
 8001596:	4413      	add	r3, r2
 8001598:	00db      	lsls	r3, r3, #3
 800159a:	440b      	add	r3, r1
 800159c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }

    /* Retrieve IdType */
    pRxHeader->IdType = *RxAddress & FDCAN_ELEMENT_MASK_XTD;
 800159e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f003 4280 	and.w	r2, r3, #1073741824	@ 0x40000000
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	605a      	str	r2, [r3, #4]

    /* Retrieve Identifier */
    if (pRxHeader->IdType == FDCAN_STANDARD_ID) /* Standard ID element */
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d107      	bne.n	80015c2 <HAL_FDCAN_GetRxMessage+0x12a>
    {
      pRxHeader->Identifier = ((*RxAddress & FDCAN_ELEMENT_MASK_STDID) >> 18U);
 80015b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	0c9b      	lsrs	r3, r3, #18
 80015b8:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	e005      	b.n	80015ce <HAL_FDCAN_GetRxMessage+0x136>
    }
    else /* Extended ID element */
    {
      pRxHeader->Identifier = (*RxAddress & FDCAN_ELEMENT_MASK_EXTID);
 80015c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	601a      	str	r2, [r3, #0]
    }

    /* Retrieve RxFrameType */
    pRxHeader->RxFrameType = (*RxAddress & FDCAN_ELEMENT_MASK_RTR);
 80015ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f003 5200 	and.w	r2, r3, #536870912	@ 0x20000000
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	609a      	str	r2, [r3, #8]

    /* Retrieve ErrorStateIndicator */
    pRxHeader->ErrorStateIndicator = (*RxAddress & FDCAN_ELEMENT_MASK_ESI);
 80015da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	611a      	str	r2, [r3, #16]

    /* Increment RxAddress pointer to second word of Rx FIFO element */
    RxAddress++;
 80015e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015e8:	3304      	adds	r3, #4
 80015ea:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve RxTimestamp */
    pRxHeader->RxTimestamp = (*RxAddress & FDCAN_ELEMENT_MASK_TS);
 80015ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	b29a      	uxth	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	61da      	str	r2, [r3, #28]

    /* Retrieve DataLength */
    pRxHeader->DataLength = ((*RxAddress & FDCAN_ELEMENT_MASK_DLC) >> 16U);
 80015f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	0c1b      	lsrs	r3, r3, #16
 80015fc:	f003 020f 	and.w	r2, r3, #15
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	60da      	str	r2, [r3, #12]

    /* Retrieve BitRateSwitch */
    pRxHeader->BitRateSwitch = (*RxAddress & FDCAN_ELEMENT_MASK_BRS);
 8001604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f403 1280 	and.w	r2, r3, #1048576	@ 0x100000
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	615a      	str	r2, [r3, #20]

    /* Retrieve FDFormat */
    pRxHeader->FDFormat = (*RxAddress & FDCAN_ELEMENT_MASK_FDF);
 8001610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f403 1200 	and.w	r2, r3, #2097152	@ 0x200000
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	619a      	str	r2, [r3, #24]

    /* Retrieve FilterIndex */
    pRxHeader->FilterIndex = ((*RxAddress & FDCAN_ELEMENT_MASK_FIDX) >> 24U);
 800161c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	0e1b      	lsrs	r3, r3, #24
 8001622:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	621a      	str	r2, [r3, #32]

    /* Retrieve NonMatchingFrame */
    pRxHeader->IsFilterMatchingFrame = ((*RxAddress & FDCAN_ELEMENT_MASK_ANMF) >> 31U);
 800162a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	0fda      	lsrs	r2, r3, #31
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Increment RxAddress pointer to payload of Rx FIFO element */
    RxAddress++;
 8001634:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001636:	3304      	adds	r3, #4
 8001638:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Retrieve Rx payload */
    pData = (uint8_t *)RxAddress;
 800163a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800163c:	617b      	str	r3, [r7, #20]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 800163e:	2300      	movs	r3, #0
 8001640:	623b      	str	r3, [r7, #32]
 8001642:	e00a      	b.n	800165a <HAL_FDCAN_GetRxMessage+0x1c2>
    {
      pRxData[ByteCounter] = pData[ByteCounter];
 8001644:	697a      	ldr	r2, [r7, #20]
 8001646:	6a3b      	ldr	r3, [r7, #32]
 8001648:	441a      	add	r2, r3
 800164a:	6839      	ldr	r1, [r7, #0]
 800164c:	6a3b      	ldr	r3, [r7, #32]
 800164e:	440b      	add	r3, r1
 8001650:	7812      	ldrb	r2, [r2, #0]
 8001652:	701a      	strb	r2, [r3, #0]
    for (ByteCounter = 0; ByteCounter < DLCtoBytes[pRxHeader->DataLength]; ByteCounter++)
 8001654:	6a3b      	ldr	r3, [r7, #32]
 8001656:	3301      	adds	r3, #1
 8001658:	623b      	str	r3, [r7, #32]
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	68db      	ldr	r3, [r3, #12]
 800165e:	4a11      	ldr	r2, [pc, #68]	@ (80016a4 <HAL_FDCAN_GetRxMessage+0x20c>)
 8001660:	5cd3      	ldrb	r3, [r2, r3]
 8001662:	461a      	mov	r2, r3
 8001664:	6a3b      	ldr	r3, [r7, #32]
 8001666:	4293      	cmp	r3, r2
 8001668:	d3ec      	bcc.n	8001644 <HAL_FDCAN_GetRxMessage+0x1ac>
    }

    if (RxLocation == FDCAN_RX_FIFO0) /* Rx element is assigned to the Rx FIFO 0 */
 800166a:	68bb      	ldr	r3, [r7, #8]
 800166c:	2b40      	cmp	r3, #64	@ 0x40
 800166e:	d105      	bne.n	800167c <HAL_FDCAN_GetRxMessage+0x1e4>
    {
      /* Acknowledge the Rx FIFO 0 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF0A = GetIndex;
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	69fa      	ldr	r2, [r7, #28]
 8001676:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
 800167a:	e004      	b.n	8001686 <HAL_FDCAN_GetRxMessage+0x1ee>
    }
    else /* Rx element is assigned to the Rx FIFO 1 */
    {
      /* Acknowledge the Rx FIFO 1 that the oldest element is read so that it increments the GetIndex */
      hfdcan->Instance->RXF1A = GetIndex;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	69fa      	ldr	r2, [r7, #28]
 8001682:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
    }

    /* Return function status */
    return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e006      	b.n	8001698 <HAL_FDCAN_GetRxMessage+0x200>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_STARTED;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800168e:	f043 0208 	orr.w	r2, r3, #8
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001696:	2301      	movs	r3, #1
  }
}
 8001698:	4618      	mov	r0, r3
 800169a:	372c      	adds	r7, #44	@ 0x2c
 800169c:	46bd      	mov	sp, r7
 800169e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a2:	4770      	bx	lr
 80016a4:	08004f68 	.word	0x08004f68

080016a8 <HAL_FDCAN_ActivateNotification>:
  *           - FDCAN_IT_TX_ABORT_COMPLETE
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_ActivateNotification(FDCAN_HandleTypeDef *hfdcan, uint32_t ActiveITs,
                                                 uint32_t BufferIndexes)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b087      	sub	sp, #28
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	60f8      	str	r0, [r7, #12]
 80016b0:	60b9      	str	r1, [r7, #8]
 80016b2:	607a      	str	r2, [r7, #4]
  HAL_FDCAN_StateTypeDef state = hfdcan->State;
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 80016ba:	75fb      	strb	r3, [r7, #23]
  if ((ActiveITs & (FDCAN_IT_TX_COMPLETE | FDCAN_IT_TX_ABORT_COMPLETE)) != 0U)
  {
    assert_param(IS_FDCAN_TX_LOCATION_LIST(BufferIndexes));
  }

  if ((state == HAL_FDCAN_STATE_READY) || (state == HAL_FDCAN_STATE_BUSY))
 80016bc:	7dfb      	ldrb	r3, [r7, #23]
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d003      	beq.n	80016ca <HAL_FDCAN_ActivateNotification+0x22>
 80016c2:	7dfb      	ldrb	r3, [r7, #23]
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	f040 80c8 	bne.w	800185a <HAL_FDCAN_ActivateNotification+0x1b2>
  {
    /* Get interrupts line selection */
    ITs_lines_selection = hfdcan->Instance->ILS;
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80016d0:	613b      	str	r3, [r7, #16]

    /* Enable Interrupt lines */
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0) != 0U)
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	f003 0307 	and.w	r3, r3, #7
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d004      	beq.n	80016e6 <HAL_FDCAN_ActivateNotification+0x3e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	f003 0301 	and.w	r3, r3, #1
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d03b      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 80016e6:	68bb      	ldr	r3, [r7, #8]
 80016e8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0) == 0U)) || \
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d004      	beq.n	80016fa <HAL_FDCAN_ActivateNotification+0x52>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	f003 0302 	and.w	r3, r3, #2
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d031      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1) == 0U)) || \
 8001700:	2b00      	cmp	r3, #0
 8001702:	d004      	beq.n	800170e <HAL_FDCAN_ActivateNotification+0x66>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	f003 0304 	and.w	r3, r3, #4
 800170a:	2b00      	cmp	r3, #0
 800170c:	d027      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)     == 0U)) || \
 8001714:	2b00      	cmp	r3, #0
 8001716:	d004      	beq.n	8001722 <HAL_FDCAN_ActivateNotification+0x7a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	f003 0308 	and.w	r3, r3, #8
 800171e:	2b00      	cmp	r3, #0
 8001720:	d01d      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 8001722:	68bb      	ldr	r3, [r7, #8]
 8001724:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  == 0U)) || \
 8001728:	2b00      	cmp	r3, #0
 800172a:	d004      	beq.n	8001736 <HAL_FDCAN_ActivateNotification+0x8e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800172c:	693b      	ldr	r3, [r7, #16]
 800172e:	f003 0310 	and.w	r3, r3, #16
 8001732:	2b00      	cmp	r3, #0
 8001734:	d013      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 8001736:	68bb      	ldr	r3, [r7, #8]
 8001738:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           == 0U)) || \
 800173c:	2b00      	cmp	r3, #0
 800173e:	d004      	beq.n	800174a <HAL_FDCAN_ActivateNotification+0xa2>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	f003 0320 	and.w	r3, r3, #32
 8001746:	2b00      	cmp	r3, #0
 8001748:	d009      	beq.n	800175e <HAL_FDCAN_ActivateNotification+0xb6>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 800174a:	68bb      	ldr	r3, [r7, #8]
 800174c:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) == 0U)) || \
 8001750:	2b00      	cmp	r3, #0
 8001752:	d00c      	beq.n	800176e <HAL_FDCAN_ActivateNotification+0xc6>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) == 0U)))
 8001754:	693b      	ldr	r3, [r7, #16]
 8001756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800175a:	2b00      	cmp	r3, #0
 800175c:	d107      	bne.n	800176e <HAL_FDCAN_ActivateNotification+0xc6>
    {
      /* Enable Interrupt line 0 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE0);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f042 0201 	orr.w	r2, r2, #1
 800176c:	65da      	str	r2, [r3, #92]	@ 0x5c
    }
    if ((((ActiveITs & FDCAN_IT_LIST_RX_FIFO0)       != 0U)
 800176e:	68bb      	ldr	r3, [r7, #8]
 8001770:	f003 0307 	and.w	r3, r3, #7
 8001774:	2b00      	cmp	r3, #0
 8001776:	d004      	beq.n	8001782 <HAL_FDCAN_ActivateNotification+0xda>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001778:	693b      	ldr	r3, [r7, #16]
 800177a:	f003 0301 	and.w	r3, r3, #1
 800177e:	2b00      	cmp	r3, #0
 8001780:	d13b      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_RX_FIFO1)       != 0U)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f003 0338 	and.w	r3, r3, #56	@ 0x38
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO0)      != 0U)) || \
 8001788:	2b00      	cmp	r3, #0
 800178a:	d004      	beq.n	8001796 <HAL_FDCAN_ActivateNotification+0xee>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d131      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_SMSG)           != 0U)
 8001796:	68bb      	ldr	r3, [r7, #8]
 8001798:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_RX_FIFO1)       != 0U)) || \
 800179c:	2b00      	cmp	r3, #0
 800179e:	d004      	beq.n	80017aa <HAL_FDCAN_ActivateNotification+0x102>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017a0:	693b      	ldr	r3, [r7, #16]
 80017a2:	f003 0304 	and.w	r3, r3, #4
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d127      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_TX_FIFO_ERROR)  != 0U)
 80017aa:	68bb      	ldr	r3, [r7, #8]
 80017ac:	f403 53f0 	and.w	r3, r3, #7680	@ 0x1e00
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_SMSG)           != 0U)) || \
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d004      	beq.n	80017be <HAL_FDCAN_ActivateNotification+0x116>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017b4:	693b      	ldr	r3, [r7, #16]
 80017b6:	f003 0308 	and.w	r3, r3, #8
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d11d      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_MISC)           != 0U)
 80017be:	68bb      	ldr	r3, [r7, #8]
 80017c0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_TX_FIFO_ERROR)  != 0U)) || \
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d004      	beq.n	80017d2 <HAL_FDCAN_ActivateNotification+0x12a>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017c8:	693b      	ldr	r3, [r7, #16]
 80017ca:	f003 0310 	and.w	r3, r3, #16
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d113      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_BIT_LINE_ERROR) != 0U)
 80017d2:	68bb      	ldr	r3, [r7, #8]
 80017d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_MISC)           != 0U)) || \
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_FDCAN_ActivateNotification+0x13e>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017dc:	693b      	ldr	r3, [r7, #16]
 80017de:	f003 0320 	and.w	r3, r3, #32
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d109      	bne.n	80017fa <HAL_FDCAN_ActivateNotification+0x152>
        (((ActiveITs & FDCAN_IT_LIST_PROTOCOL_ERROR) != 0U)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f403 037c 	and.w	r3, r3, #16515072	@ 0xfc0000
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_BIT_LINE_ERROR) != 0U)) || \
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d00c      	beq.n	800180a <HAL_FDCAN_ActivateNotification+0x162>
         && (((ITs_lines_selection) & FDCAN_IT_GROUP_PROTOCOL_ERROR) != 0U)))
 80017f0:	693b      	ldr	r3, [r7, #16]
 80017f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d007      	beq.n	800180a <HAL_FDCAN_ActivateNotification+0x162>
    {
      /* Enable Interrupt line 1 */
      SET_BIT(hfdcan->Instance->ILE, FDCAN_INTERRUPT_LINE1);
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001800:	68fb      	ldr	r3, [r7, #12]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f042 0202 	orr.w	r2, r2, #2
 8001808:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    if ((ActiveITs & FDCAN_IT_TX_COMPLETE) != 0U)
 800180a:	68bb      	ldr	r3, [r7, #8]
 800180c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001810:	2b00      	cmp	r3, #0
 8001812:	d009      	beq.n	8001828 <HAL_FDCAN_ActivateNotification+0x180>
    {
      /* Enable Tx Buffer Transmission Interrupt to set TC flag in IR register,
         but interrupt will only occur if TC is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBTIE, BufferIndexes);
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f8d3 10dc 	ldr.w	r1, [r3, #220]	@ 0xdc
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	430a      	orrs	r2, r1
 8001824:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc
    }

    if ((ActiveITs & FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_FDCAN_ActivateNotification+0x19e>
    {
      /* Enable Tx Buffer Cancellation Finished Interrupt to set TCF flag in IR register,
         but interrupt will only occur if TCF is enabled in IE register */
      SET_BIT(hfdcan->Instance->TXBCIE, BufferIndexes);
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f8d3 10e0 	ldr.w	r1, [r3, #224]	@ 0xe0
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	687a      	ldr	r2, [r7, #4]
 8001840:	430a      	orrs	r2, r1
 8001842:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    }

    /* Enable the selected interrupts */
    __HAL_FDCAN_ENABLE_IT(hfdcan, ActiveITs);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	681b      	ldr	r3, [r3, #0]
 800184a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	68ba      	ldr	r2, [r7, #8]
 8001852:	430a      	orrs	r2, r1
 8001854:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return function status */
    return HAL_OK;
 8001856:	2300      	movs	r3, #0
 8001858:	e006      	b.n	8001868 <HAL_FDCAN_ActivateNotification+0x1c0>
  }
  else
  {
    /* Update error code */
    hfdcan->ErrorCode |= HAL_FDCAN_ERROR_NOT_INITIALIZED;
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800185e:	f043 0202 	orr.w	r2, r3, #2
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	661a      	str	r2, [r3, #96]	@ 0x60

    return HAL_ERROR;
 8001866:	2301      	movs	r3, #1
  }
}
 8001868:	4618      	mov	r0, r3
 800186a:	371c      	adds	r7, #28
 800186c:	46bd      	mov	sp, r7
 800186e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001872:	4770      	bx	lr

08001874 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b08c      	sub	sp, #48	@ 0x30
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;
  uint32_t itsource;
  uint32_t itflag;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001882:	f403 53e0 	and.w	r3, r3, #7168	@ 0x1c00
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  TxEventFifoITs &= hfdcan->Instance->IE;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800188e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001890:	4013      	ands	r3, r2
 8001892:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800189a:	f003 0307 	and.w	r3, r3, #7
 800189e:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo0ITs &= hfdcan->Instance->IE;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80018a8:	4013      	ands	r3, r2
 80018aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018b2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018b6:	627b      	str	r3, [r7, #36]	@ 0x24
  RxFifo1ITs &= hfdcan->Instance->IE;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80018c0:	4013      	ands	r3, r2
 80018c2:	627b      	str	r3, [r7, #36]	@ 0x24
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018ca:	f403 0371 	and.w	r3, r3, #15794176	@ 0xf10000
 80018ce:	623b      	str	r3, [r7, #32]
  Errors &= hfdcan->Instance->IE;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018d6:	6a3a      	ldr	r2, [r7, #32]
 80018d8:	4013      	ands	r3, r2
 80018da:	623b      	str	r3, [r7, #32]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80018e2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80018e6:	61fb      	str	r3, [r7, #28]
  ErrorStatusITs &= hfdcan->Instance->IE;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018ee:	69fa      	ldr	r2, [r7, #28]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61fb      	str	r3, [r7, #28]
  itsource = hfdcan->Instance->IE;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80018fa:	61bb      	str	r3, [r7, #24]
  itflag = hfdcan->Instance->IR;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001902:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != RESET)
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190a:	2b00      	cmp	r3, #0
 800190c:	d00b      	beq.n	8001926 <HAL_FDCAN_IRQHandler+0xb2>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != RESET)
 800190e:	69bb      	ldr	r3, [r7, #24]
 8001910:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001914:	2b00      	cmp	r3, #0
 8001916:	d006      	beq.n	8001926 <HAL_FDCAN_IRQHandler+0xb2>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	2240      	movs	r2, #64	@ 0x40
 800191e:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8001920:	6878      	ldr	r0, [r7, #4]
 8001922:	f000 f916 	bl	8001b52 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_ABORT_COMPLETE) != RESET)
 8001926:	697b      	ldr	r3, [r7, #20]
 8001928:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800192c:	2b00      	cmp	r3, #0
 800192e:	d019      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_ABORT_COMPLETE) != RESET)
 8001930:	69bb      	ldr	r3, [r7, #24]
 8001932:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001936:	2b00      	cmp	r3, #0
 8001938:	d014      	beq.n	8001964 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001942:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195a:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800195c:	6939      	ldr	r1, [r7, #16]
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f000 f8d8 	bl	8001b14 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8001964:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001966:	2b00      	cmp	r3, #0
 8001968:	d007      	beq.n	800197a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001970:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8001972:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f000 f8a2 	bl	8001abe <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800197a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800197c:	2b00      	cmp	r3, #0
 800197e:	d007      	beq.n	8001990 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8001986:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8001988:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7fe fe10 	bl	80005b0 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8001990:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001992:	2b00      	cmp	r3, #0
 8001994:	d007      	beq.n	80019a6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800199c:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 800199e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80019a0:	6878      	ldr	r0, [r7, #4]
 80019a2:	f000 f897 	bl	8001ad4 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_FIFO_EMPTY) != RESET)
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d00c      	beq.n	80019ca <HAL_FDCAN_IRQHandler+0x156>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_FIFO_EMPTY) != RESET)
 80019b0:	69bb      	ldr	r3, [r7, #24]
 80019b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d007      	beq.n	80019ca <HAL_FDCAN_IRQHandler+0x156>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80019c2:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f000 f890 	bl	8001aea <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TX_COMPLETE) != RESET)
 80019ca:	697b      	ldr	r3, [r7, #20]
 80019cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d018      	beq.n	8001a06 <HAL_FDCAN_IRQHandler+0x192>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TX_COMPLETE) != RESET)
 80019d4:	69bb      	ldr	r3, [r7, #24]
 80019d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d013      	beq.n	8001a06 <HAL_FDCAN_IRQHandler+0x192>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80019e6:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4013      	ands	r3, r2
 80019f4:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	2280      	movs	r2, #128	@ 0x80
 80019fc:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	6878      	ldr	r0, [r7, #4]
 8001a02:	f000 f87c 	bl	8001afe <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != RESET)
 8001a06:	697b      	ldr	r3, [r7, #20]
 8001a08:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d00c      	beq.n	8001a2a <HAL_FDCAN_IRQHandler+0x1b6>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMESTAMP_WRAPAROUND) != RESET)
 8001a10:	69bb      	ldr	r3, [r7, #24]
 8001a12:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d007      	beq.n	8001a2a <HAL_FDCAN_IRQHandler+0x1b6>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a22:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8001a24:	6878      	ldr	r0, [r7, #4]
 8001a26:	f000 f880 	bl	8001b2a <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_TIMEOUT_OCCURRED) != RESET)
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d00c      	beq.n	8001a4e <HAL_FDCAN_IRQHandler+0x1da>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_TIMEOUT_OCCURRED) != RESET)
 8001a34:	69bb      	ldr	r3, [r7, #24]
 8001a36:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d007      	beq.n	8001a4e <HAL_FDCAN_IRQHandler+0x1da>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a46:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8001a48:	6878      	ldr	r0, [r7, #4]
 8001a4a:	f000 f878 	bl	8001b3e <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (FDCAN_CHECK_FLAG(itflag, FDCAN_FLAG_RAM_ACCESS_FAILURE) != RESET)
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d00f      	beq.n	8001a78 <HAL_FDCAN_IRQHandler+0x204>
  {
    if (FDCAN_CHECK_IT_SOURCE(itsource, FDCAN_IT_RAM_ACCESS_FAILURE) != RESET)
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d00a      	beq.n	8001a78 <HAL_FDCAN_IRQHandler+0x204>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a6a:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a70:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	661a      	str	r2, [r3, #96]	@ 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8001a78:	69fb      	ldr	r3, [r7, #28]
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d007      	beq.n	8001a8e <HAL_FDCAN_IRQHandler+0x21a>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	69fa      	ldr	r2, [r7, #28]
 8001a84:	651a      	str	r2, [r3, #80]	@ 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8001a86:	69f9      	ldr	r1, [r7, #28]
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f876 	bl	8001b7a <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8001a8e:	6a3b      	ldr	r3, [r7, #32]
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	d009      	beq.n	8001aa8 <HAL_FDCAN_IRQHandler+0x234>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	6a3a      	ldr	r2, [r7, #32]
 8001a9a:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001aa0:	6a3b      	ldr	r3, [r7, #32]
 8001aa2:	431a      	orrs	r2, r3
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d002      	beq.n	8001ab6 <HAL_FDCAN_IRQHandler+0x242>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8001ab0:	6878      	ldr	r0, [r7, #4]
 8001ab2:	f000 f858 	bl	8001b66 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8001ab6:	bf00      	nop
 8001ab8:	3730      	adds	r7, #48	@ 0x30
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8001abe:	b480      	push	{r7}
 8001ac0:	b083      	sub	sp, #12
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
 8001ac6:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
 8001adc:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8001ade:	bf00      	nop
 8001ae0:	370c      	adds	r7, #12
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001aea:	b480      	push	{r7}
 8001aec:	b083      	sub	sp, #12
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8001af2:	bf00      	nop
 8001af4:	370c      	adds	r7, #12
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr

08001afe <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
 8001b06:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8001b08:	bf00      	nop
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr

08001b2a <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b2a:	b480      	push	{r7}
 8001b2c:	b083      	sub	sp, #12
 8001b2e:	af00      	add	r7, sp, #0
 8001b30:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr

08001b3e <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b3e:	b480      	push	{r7}
 8001b40:	b083      	sub	sp, #12
 8001b42:	af00      	add	r7, sp, #0
 8001b44:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8001b46:	bf00      	nop
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8001b5a:	bf00      	nop
 8001b5c:	370c      	adds	r7, #12
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b64:	4770      	bx	lr

08001b66 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr

08001b7a <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8001b7a:	b480      	push	{r7}
 8001b7c:	b083      	sub	sp, #12
 8001b7e:	af00      	add	r7, sp, #0
 8001b80:	6078      	str	r0, [r7, #4]
 8001b82:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8001b84:	bf00      	nop
 8001b86:	370c      	adds	r7, #12
 8001b88:	46bd      	mov	sp, r7
 8001b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b8e:	4770      	bx	lr

08001b90 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8001b98:	4b30      	ldr	r3, [pc, #192]	@ (8001c5c <FDCAN_CalcultateRamBlockAddresses+0xcc>)
 8001b9a:	60bb      	str	r3, [r7, #8]
#if defined(FDCAN2)

  if (hfdcan->Instance == FDCAN2)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a2f      	ldr	r2, [pc, #188]	@ (8001c60 <FDCAN_CalcultateRamBlockAddresses+0xd0>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d103      	bne.n	8001bae <FDCAN_CalcultateRamBlockAddresses+0x1e>
  {
    SramCanInstanceBase += SRAMCAN_SIZE;
 8001ba6:	68bb      	ldr	r3, [r7, #8]
 8001ba8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001bac:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN2 */
#if defined(FDCAN3)
  if (hfdcan->Instance == FDCAN3)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	4a2c      	ldr	r2, [pc, #176]	@ (8001c64 <FDCAN_CalcultateRamBlockAddresses+0xd4>)
 8001bb4:	4293      	cmp	r3, r2
 8001bb6:	d103      	bne.n	8001bc0 <FDCAN_CalcultateRamBlockAddresses+0x30>
  {
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
 8001bb8:	68bb      	ldr	r3, [r7, #8]
 8001bba:	f503 63d4 	add.w	r3, r3, #1696	@ 0x6a0
 8001bbe:	60bb      	str	r3, [r7, #8]
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	68ba      	ldr	r2, [r7, #8]
 8001bc4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bce:	f423 11f8 	bic.w	r1, r3, #2031616	@ 0x1f0000
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bd6:	041a      	lsls	r2, r3, #16
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	f103 0270 	add.w	r2, r3, #112	@ 0x70
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001bf4:	f023 6170 	bic.w	r1, r3, #251658240	@ 0xf000000
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001bfc:	061a      	lsls	r2, r3, #24
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	430a      	orrs	r2, r1
 8001c04:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	f103 02b0 	add.w	r2, r3, #176	@ 0xb0
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8001c12:	68bb      	ldr	r3, [r7, #8]
 8001c14:	f503 72c4 	add.w	r2, r3, #392	@ 0x188
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	f503 7218 	add.w	r2, r3, #608	@ 0x260
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8001c26:	68bb      	ldr	r3, [r7, #8]
 8001c28:	f503 721e 	add.w	r2, r3, #632	@ 0x278
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	60fb      	str	r3, [r7, #12]
 8001c34:	e005      	b.n	8001c42 <FDCAN_CalcultateRamBlockAddresses+0xb2>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8001c36:	68fb      	ldr	r3, [r7, #12]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	3304      	adds	r3, #4
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68bb      	ldr	r3, [r7, #8]
 8001c44:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8001c48:	68fa      	ldr	r2, [r7, #12]
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d3f3      	bcc.n	8001c36 <FDCAN_CalcultateRamBlockAddresses+0xa6>
  }
}
 8001c4e:	bf00      	nop
 8001c50:	bf00      	nop
 8001c52:	3714      	adds	r7, #20
 8001c54:	46bd      	mov	sp, r7
 8001c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5a:	4770      	bx	lr
 8001c5c:	4000a400 	.word	0x4000a400
 8001c60:	40006800 	.word	0x40006800
 8001c64:	40006c00 	.word	0x40006c00

08001c68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b087      	sub	sp, #28
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001c76:	e15a      	b.n	8001f2e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2101      	movs	r1, #1
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	fa01 f303 	lsl.w	r3, r1, r3
 8001c84:	4013      	ands	r3, r2
 8001c86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	f000 814c 	beq.w	8001f28 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	f003 0303 	and.w	r3, r3, #3
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d005      	beq.n	8001ca8 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001ca4:	2b02      	cmp	r3, #2
 8001ca6:	d130      	bne.n	8001d0a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001cae:	697b      	ldr	r3, [r7, #20]
 8001cb0:	005b      	lsls	r3, r3, #1
 8001cb2:	2203      	movs	r2, #3
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	43db      	mvns	r3, r3
 8001cba:	693a      	ldr	r2, [r7, #16]
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	68da      	ldr	r2, [r3, #12]
 8001cc4:	697b      	ldr	r3, [r7, #20]
 8001cc6:	005b      	lsls	r3, r3, #1
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	693a      	ldr	r2, [r7, #16]
 8001cce:	4313      	orrs	r3, r2
 8001cd0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	693a      	ldr	r2, [r7, #16]
 8001cd6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	685b      	ldr	r3, [r3, #4]
 8001cdc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001cde:	2201      	movs	r2, #1
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce6:	43db      	mvns	r3, r3
 8001ce8:	693a      	ldr	r2, [r7, #16]
 8001cea:	4013      	ands	r3, r2
 8001cec:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	091b      	lsrs	r3, r3, #4
 8001cf4:	f003 0201 	and.w	r2, r3, #1
 8001cf8:	697b      	ldr	r3, [r7, #20]
 8001cfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfe:	693a      	ldr	r2, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	f003 0303 	and.w	r3, r3, #3
 8001d12:	2b03      	cmp	r3, #3
 8001d14:	d017      	beq.n	8001d46 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	68db      	ldr	r3, [r3, #12]
 8001d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	005b      	lsls	r3, r3, #1
 8001d20:	2203      	movs	r2, #3
 8001d22:	fa02 f303 	lsl.w	r3, r2, r3
 8001d26:	43db      	mvns	r3, r3
 8001d28:	693a      	ldr	r2, [r7, #16]
 8001d2a:	4013      	ands	r3, r2
 8001d2c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d2e:	683b      	ldr	r3, [r7, #0]
 8001d30:	689a      	ldr	r2, [r3, #8]
 8001d32:	697b      	ldr	r3, [r7, #20]
 8001d34:	005b      	lsls	r3, r3, #1
 8001d36:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3a:	693a      	ldr	r2, [r7, #16]
 8001d3c:	4313      	orrs	r3, r2
 8001d3e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f003 0303 	and.w	r3, r3, #3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d123      	bne.n	8001d9a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	08da      	lsrs	r2, r3, #3
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	3208      	adds	r2, #8
 8001d5a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d5e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001d60:	697b      	ldr	r3, [r7, #20]
 8001d62:	f003 0307 	and.w	r3, r3, #7
 8001d66:	009b      	lsls	r3, r3, #2
 8001d68:	220f      	movs	r2, #15
 8001d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d6e:	43db      	mvns	r3, r3
 8001d70:	693a      	ldr	r2, [r7, #16]
 8001d72:	4013      	ands	r3, r2
 8001d74:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	691a      	ldr	r2, [r3, #16]
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	f003 0307 	and.w	r3, r3, #7
 8001d80:	009b      	lsls	r3, r3, #2
 8001d82:	fa02 f303 	lsl.w	r3, r2, r3
 8001d86:	693a      	ldr	r2, [r7, #16]
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8001d8c:	697b      	ldr	r3, [r7, #20]
 8001d8e:	08da      	lsrs	r2, r3, #3
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	3208      	adds	r2, #8
 8001d94:	6939      	ldr	r1, [r7, #16]
 8001d96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001da0:	697b      	ldr	r3, [r7, #20]
 8001da2:	005b      	lsls	r3, r3, #1
 8001da4:	2203      	movs	r2, #3
 8001da6:	fa02 f303 	lsl.w	r3, r2, r3
 8001daa:	43db      	mvns	r3, r3
 8001dac:	693a      	ldr	r2, [r7, #16]
 8001dae:	4013      	ands	r3, r2
 8001db0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f003 0203 	and.w	r2, r3, #3
 8001dba:	697b      	ldr	r3, [r7, #20]
 8001dbc:	005b      	lsls	r3, r3, #1
 8001dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc2:	693a      	ldr	r2, [r7, #16]
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	693a      	ldr	r2, [r7, #16]
 8001dcc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 80a6 	beq.w	8001f28 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ddc:	4b5b      	ldr	r3, [pc, #364]	@ (8001f4c <HAL_GPIO_Init+0x2e4>)
 8001dde:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001de0:	4a5a      	ldr	r2, [pc, #360]	@ (8001f4c <HAL_GPIO_Init+0x2e4>)
 8001de2:	f043 0301 	orr.w	r3, r3, #1
 8001de6:	6613      	str	r3, [r2, #96]	@ 0x60
 8001de8:	4b58      	ldr	r3, [pc, #352]	@ (8001f4c <HAL_GPIO_Init+0x2e4>)
 8001dea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001dec:	f003 0301 	and.w	r3, r3, #1
 8001df0:	60bb      	str	r3, [r7, #8]
 8001df2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001df4:	4a56      	ldr	r2, [pc, #344]	@ (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001df6:	697b      	ldr	r3, [r7, #20]
 8001df8:	089b      	lsrs	r3, r3, #2
 8001dfa:	3302      	adds	r3, #2
 8001dfc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e00:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001e02:	697b      	ldr	r3, [r7, #20]
 8001e04:	f003 0303 	and.w	r3, r3, #3
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	220f      	movs	r2, #15
 8001e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e10:	43db      	mvns	r3, r3
 8001e12:	693a      	ldr	r2, [r7, #16]
 8001e14:	4013      	ands	r3, r2
 8001e16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001e1e:	d01f      	beq.n	8001e60 <HAL_GPIO_Init+0x1f8>
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	4a4c      	ldr	r2, [pc, #304]	@ (8001f54 <HAL_GPIO_Init+0x2ec>)
 8001e24:	4293      	cmp	r3, r2
 8001e26:	d019      	beq.n	8001e5c <HAL_GPIO_Init+0x1f4>
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	4a4b      	ldr	r2, [pc, #300]	@ (8001f58 <HAL_GPIO_Init+0x2f0>)
 8001e2c:	4293      	cmp	r3, r2
 8001e2e:	d013      	beq.n	8001e58 <HAL_GPIO_Init+0x1f0>
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	4a4a      	ldr	r2, [pc, #296]	@ (8001f5c <HAL_GPIO_Init+0x2f4>)
 8001e34:	4293      	cmp	r3, r2
 8001e36:	d00d      	beq.n	8001e54 <HAL_GPIO_Init+0x1ec>
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a49      	ldr	r2, [pc, #292]	@ (8001f60 <HAL_GPIO_Init+0x2f8>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <HAL_GPIO_Init+0x1e8>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a48      	ldr	r2, [pc, #288]	@ (8001f64 <HAL_GPIO_Init+0x2fc>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d101      	bne.n	8001e4c <HAL_GPIO_Init+0x1e4>
 8001e48:	2305      	movs	r3, #5
 8001e4a:	e00a      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e4c:	2306      	movs	r3, #6
 8001e4e:	e008      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e50:	2304      	movs	r3, #4
 8001e52:	e006      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e54:	2303      	movs	r3, #3
 8001e56:	e004      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e58:	2302      	movs	r3, #2
 8001e5a:	e002      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e000      	b.n	8001e62 <HAL_GPIO_Init+0x1fa>
 8001e60:	2300      	movs	r3, #0
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	f002 0203 	and.w	r2, r2, #3
 8001e68:	0092      	lsls	r2, r2, #2
 8001e6a:	4093      	lsls	r3, r2
 8001e6c:	693a      	ldr	r2, [r7, #16]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e72:	4937      	ldr	r1, [pc, #220]	@ (8001f50 <HAL_GPIO_Init+0x2e8>)
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	089b      	lsrs	r3, r3, #2
 8001e78:	3302      	adds	r3, #2
 8001e7a:	693a      	ldr	r2, [r7, #16]
 8001e7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e80:	4b39      	ldr	r3, [pc, #228]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	693a      	ldr	r2, [r7, #16]
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d003      	beq.n	8001ea4 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8001e9c:	693a      	ldr	r2, [r7, #16]
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001ea4:	4a30      	ldr	r2, [pc, #192]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001eaa:	4b2f      	ldr	r3, [pc, #188]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001eac:	68db      	ldr	r3, [r3, #12]
 8001eae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	43db      	mvns	r3, r3
 8001eb4:	693a      	ldr	r2, [r7, #16]
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	685b      	ldr	r3, [r3, #4]
 8001ebe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8001ec6:	693a      	ldr	r2, [r7, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001ece:	4a26      	ldr	r2, [pc, #152]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8001ed4:	4b24      	ldr	r3, [pc, #144]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	43db      	mvns	r3, r3
 8001ede:	693a      	ldr	r2, [r7, #16]
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ee4:	683b      	ldr	r3, [r7, #0]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d003      	beq.n	8001ef8 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8001ef0:	693a      	ldr	r2, [r7, #16]
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	4313      	orrs	r3, r2
 8001ef6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001ef8:	4a1b      	ldr	r2, [pc, #108]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	43db      	mvns	r3, r3
 8001f08:	693a      	ldr	r2, [r7, #16]
 8001f0a:	4013      	ands	r3, r2
 8001f0c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f0e:	683b      	ldr	r3, [r7, #0]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8001f1a:	693a      	ldr	r2, [r7, #16]
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001f22:	4a11      	ldr	r2, [pc, #68]	@ (8001f68 <HAL_GPIO_Init+0x300>)
 8001f24:	693b      	ldr	r3, [r7, #16]
 8001f26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	3301      	adds	r3, #1
 8001f2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681a      	ldr	r2, [r3, #0]
 8001f32:	697b      	ldr	r3, [r7, #20]
 8001f34:	fa22 f303 	lsr.w	r3, r2, r3
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	f47f ae9d 	bne.w	8001c78 <HAL_GPIO_Init+0x10>
  }
}
 8001f3e:	bf00      	nop
 8001f40:	bf00      	nop
 8001f42:	371c      	adds	r7, #28
 8001f44:	46bd      	mov	sp, r7
 8001f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4a:	4770      	bx	lr
 8001f4c:	40021000 	.word	0x40021000
 8001f50:	40010000 	.word	0x40010000
 8001f54:	48000400 	.word	0x48000400
 8001f58:	48000800 	.word	0x48000800
 8001f5c:	48000c00 	.word	0x48000c00
 8001f60:	48001000 	.word	0x48001000
 8001f64:	48001400 	.word	0x48001400
 8001f68:	40010400 	.word	0x40010400

08001f6c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b085      	sub	sp, #20
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d141      	bne.n	8001ffe <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001f7a:	4b4b      	ldr	r3, [pc, #300]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001f82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f86:	d131      	bne.n	8001fec <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001f88:	4b47      	ldr	r3, [pc, #284]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f8e:	4a46      	ldr	r2, [pc, #280]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f90:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001f94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f98:	4b43      	ldr	r3, [pc, #268]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001fa0:	4a41      	ldr	r2, [pc, #260]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fa2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001fa6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001fa8:	4b40      	ldr	r3, [pc, #256]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	2232      	movs	r2, #50	@ 0x32
 8001fae:	fb02 f303 	mul.w	r3, r2, r3
 8001fb2:	4a3f      	ldr	r2, [pc, #252]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001fb4:	fba2 2303 	umull	r2, r3, r2, r3
 8001fb8:	0c9b      	lsrs	r3, r3, #18
 8001fba:	3301      	adds	r3, #1
 8001fbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbe:	e002      	b.n	8001fc6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	3b01      	subs	r3, #1
 8001fc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fc6:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fd2:	d102      	bne.n	8001fda <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f2      	bne.n	8001fc0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fda:	4b33      	ldr	r3, [pc, #204]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001fe2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001fe6:	d158      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001fe8:	2303      	movs	r3, #3
 8001fea:	e057      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001fee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001ff2:	4a2d      	ldr	r2, [pc, #180]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001ff4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001ff8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001ffc:	e04d      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002004:	d141      	bne.n	800208a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002006:	4b28      	ldr	r3, [pc, #160]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800200e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002012:	d131      	bne.n	8002078 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002014:	4b24      	ldr	r3, [pc, #144]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002016:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800201a:	4a23      	ldr	r2, [pc, #140]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800201c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002020:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002024:	4b20      	ldr	r3, [pc, #128]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800202c:	4a1e      	ldr	r2, [pc, #120]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800202e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002032:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002034:	4b1d      	ldr	r3, [pc, #116]	@ (80020ac <HAL_PWREx_ControlVoltageScaling+0x140>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2232      	movs	r2, #50	@ 0x32
 800203a:	fb02 f303 	mul.w	r3, r2, r3
 800203e:	4a1c      	ldr	r2, [pc, #112]	@ (80020b0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002040:	fba2 2303 	umull	r2, r3, r2, r3
 8002044:	0c9b      	lsrs	r3, r3, #18
 8002046:	3301      	adds	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800204a:	e002      	b.n	8002052 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	3b01      	subs	r3, #1
 8002050:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002052:	4b15      	ldr	r3, [pc, #84]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002054:	695b      	ldr	r3, [r3, #20]
 8002056:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800205a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800205e:	d102      	bne.n	8002066 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d1f2      	bne.n	800204c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002066:	4b10      	ldr	r3, [pc, #64]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002068:	695b      	ldr	r3, [r3, #20]
 800206a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800206e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002072:	d112      	bne.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e011      	b.n	800209c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002078:	4b0b      	ldr	r3, [pc, #44]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800207a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002080:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002084:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8002088:	e007      	b.n	800209a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800208a:	4b07      	ldr	r3, [pc, #28]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8002092:	4a05      	ldr	r2, [pc, #20]	@ (80020a8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002094:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002098:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3714      	adds	r7, #20
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	40007000 	.word	0x40007000
 80020ac:	20000000 	.word	0x20000000
 80020b0:	431bde83 	.word	0x431bde83

080020b4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80020b8:	4b05      	ldr	r3, [pc, #20]	@ (80020d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	4a04      	ldr	r2, [pc, #16]	@ (80020d0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80020be:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020c2:	6093      	str	r3, [r2, #8]
}
 80020c4:	bf00      	nop
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40007000 	.word	0x40007000

080020d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b088      	sub	sp, #32
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d101      	bne.n	80020e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e2fe      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 0301 	and.w	r3, r3, #1
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d075      	beq.n	80021de <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020f2:	4b97      	ldr	r3, [pc, #604]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80020f4:	689b      	ldr	r3, [r3, #8]
 80020f6:	f003 030c 	and.w	r3, r3, #12
 80020fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020fc:	4b94      	ldr	r3, [pc, #592]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80020fe:	68db      	ldr	r3, [r3, #12]
 8002100:	f003 0303 	and.w	r3, r3, #3
 8002104:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8002106:	69bb      	ldr	r3, [r7, #24]
 8002108:	2b0c      	cmp	r3, #12
 800210a:	d102      	bne.n	8002112 <HAL_RCC_OscConfig+0x3e>
 800210c:	697b      	ldr	r3, [r7, #20]
 800210e:	2b03      	cmp	r3, #3
 8002110:	d002      	beq.n	8002118 <HAL_RCC_OscConfig+0x44>
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	2b08      	cmp	r3, #8
 8002116:	d10b      	bne.n	8002130 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002118:	4b8d      	ldr	r3, [pc, #564]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002120:	2b00      	cmp	r3, #0
 8002122:	d05b      	beq.n	80021dc <HAL_RCC_OscConfig+0x108>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d157      	bne.n	80021dc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e2d9      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	685b      	ldr	r3, [r3, #4]
 8002134:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002138:	d106      	bne.n	8002148 <HAL_RCC_OscConfig+0x74>
 800213a:	4b85      	ldr	r3, [pc, #532]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	4a84      	ldr	r2, [pc, #528]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002140:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002144:	6013      	str	r3, [r2, #0]
 8002146:	e01d      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002150:	d10c      	bne.n	800216c <HAL_RCC_OscConfig+0x98>
 8002152:	4b7f      	ldr	r3, [pc, #508]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4a7e      	ldr	r2, [pc, #504]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002158:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	4b7c      	ldr	r3, [pc, #496]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4a7b      	ldr	r2, [pc, #492]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002164:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002168:	6013      	str	r3, [r2, #0]
 800216a:	e00b      	b.n	8002184 <HAL_RCC_OscConfig+0xb0>
 800216c:	4b78      	ldr	r3, [pc, #480]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	4a77      	ldr	r2, [pc, #476]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002172:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002176:	6013      	str	r3, [r2, #0]
 8002178:	4b75      	ldr	r3, [pc, #468]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a74      	ldr	r2, [pc, #464]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800217e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002182:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d013      	beq.n	80021b4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800218c:	f7fe fe5a 	bl	8000e44 <HAL_GetTick>
 8002190:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002192:	e008      	b.n	80021a6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002194:	f7fe fe56 	bl	8000e44 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	2b64      	cmp	r3, #100	@ 0x64
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e29e      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80021a6:	4b6a      	ldr	r3, [pc, #424]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ae:	2b00      	cmp	r3, #0
 80021b0:	d0f0      	beq.n	8002194 <HAL_RCC_OscConfig+0xc0>
 80021b2:	e014      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b4:	f7fe fe46 	bl	8000e44 <HAL_GetTick>
 80021b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ba:	e008      	b.n	80021ce <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021bc:	f7fe fe42 	bl	8000e44 <HAL_GetTick>
 80021c0:	4602      	mov	r2, r0
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	2b64      	cmp	r3, #100	@ 0x64
 80021c8:	d901      	bls.n	80021ce <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e28a      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021ce:	4b60      	ldr	r3, [pc, #384]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1f0      	bne.n	80021bc <HAL_RCC_OscConfig+0xe8>
 80021da:	e000      	b.n	80021de <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	f003 0302 	and.w	r3, r3, #2
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d075      	beq.n	80022d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80021ea:	4b59      	ldr	r3, [pc, #356]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021ec:	689b      	ldr	r3, [r3, #8]
 80021ee:	f003 030c 	and.w	r3, r3, #12
 80021f2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80021f4:	4b56      	ldr	r3, [pc, #344]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	f003 0303 	and.w	r3, r3, #3
 80021fc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80021fe:	69bb      	ldr	r3, [r7, #24]
 8002200:	2b0c      	cmp	r3, #12
 8002202:	d102      	bne.n	800220a <HAL_RCC_OscConfig+0x136>
 8002204:	697b      	ldr	r3, [r7, #20]
 8002206:	2b02      	cmp	r3, #2
 8002208:	d002      	beq.n	8002210 <HAL_RCC_OscConfig+0x13c>
 800220a:	69bb      	ldr	r3, [r7, #24]
 800220c:	2b04      	cmp	r3, #4
 800220e:	d11f      	bne.n	8002250 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002210:	4b4f      	ldr	r3, [pc, #316]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002218:	2b00      	cmp	r3, #0
 800221a:	d005      	beq.n	8002228 <HAL_RCC_OscConfig+0x154>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d101      	bne.n	8002228 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8002224:	2301      	movs	r3, #1
 8002226:	e25d      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002228:	4b49      	ldr	r3, [pc, #292]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800222a:	685b      	ldr	r3, [r3, #4]
 800222c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	061b      	lsls	r3, r3, #24
 8002236:	4946      	ldr	r1, [pc, #280]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002238:	4313      	orrs	r3, r2
 800223a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800223c:	4b45      	ldr	r3, [pc, #276]	@ (8002354 <HAL_RCC_OscConfig+0x280>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe fdb3 	bl	8000dac <HAL_InitTick>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d043      	beq.n	80022d4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e249      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	2b00      	cmp	r3, #0
 8002256:	d023      	beq.n	80022a0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002258:	4b3d      	ldr	r3, [pc, #244]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a3c      	ldr	r2, [pc, #240]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800225e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002262:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002264:	f7fe fdee 	bl	8000e44 <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800226a:	e008      	b.n	800227e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800226c:	f7fe fdea 	bl	8000e44 <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	2b02      	cmp	r3, #2
 8002278:	d901      	bls.n	800227e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800227a:	2303      	movs	r3, #3
 800227c:	e232      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800227e:	4b34      	ldr	r3, [pc, #208]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002286:	2b00      	cmp	r3, #0
 8002288:	d0f0      	beq.n	800226c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800228a:	4b31      	ldr	r3, [pc, #196]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800228c:	685b      	ldr	r3, [r3, #4]
 800228e:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	691b      	ldr	r3, [r3, #16]
 8002296:	061b      	lsls	r3, r3, #24
 8002298:	492d      	ldr	r1, [pc, #180]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800229a:	4313      	orrs	r3, r2
 800229c:	604b      	str	r3, [r1, #4]
 800229e:	e01a      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80022a0:	4b2b      	ldr	r3, [pc, #172]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a2a      	ldr	r2, [pc, #168]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022a6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80022aa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022ac:	f7fe fdca 	bl	8000e44 <HAL_GetTick>
 80022b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022b2:	e008      	b.n	80022c6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80022b4:	f7fe fdc6 	bl	8000e44 <HAL_GetTick>
 80022b8:	4602      	mov	r2, r0
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	2b02      	cmp	r3, #2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e20e      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80022c6:	4b22      	ldr	r3, [pc, #136]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f0      	bne.n	80022b4 <HAL_RCC_OscConfig+0x1e0>
 80022d2:	e000      	b.n	80022d6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80022d4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f003 0308 	and.w	r3, r3, #8
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d041      	beq.n	8002366 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	695b      	ldr	r3, [r3, #20]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d01c      	beq.n	8002324 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022ea:	4b19      	ldr	r3, [pc, #100]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022ec:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022f0:	4a17      	ldr	r2, [pc, #92]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 80022f2:	f043 0301 	orr.w	r3, r3, #1
 80022f6:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022fa:	f7fe fda3 	bl	8000e44 <HAL_GetTick>
 80022fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002300:	e008      	b.n	8002314 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002302:	f7fe fd9f 	bl	8000e44 <HAL_GetTick>
 8002306:	4602      	mov	r2, r0
 8002308:	693b      	ldr	r3, [r7, #16]
 800230a:	1ad3      	subs	r3, r2, r3
 800230c:	2b02      	cmp	r3, #2
 800230e:	d901      	bls.n	8002314 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8002310:	2303      	movs	r3, #3
 8002312:	e1e7      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002314:	4b0e      	ldr	r3, [pc, #56]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002316:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0ef      	beq.n	8002302 <HAL_RCC_OscConfig+0x22e>
 8002322:	e020      	b.n	8002366 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002324:	4b0a      	ldr	r3, [pc, #40]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 8002326:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800232a:	4a09      	ldr	r2, [pc, #36]	@ (8002350 <HAL_RCC_OscConfig+0x27c>)
 800232c:	f023 0301 	bic.w	r3, r3, #1
 8002330:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002334:	f7fe fd86 	bl	8000e44 <HAL_GetTick>
 8002338:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800233a:	e00d      	b.n	8002358 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800233c:	f7fe fd82 	bl	8000e44 <HAL_GetTick>
 8002340:	4602      	mov	r2, r0
 8002342:	693b      	ldr	r3, [r7, #16]
 8002344:	1ad3      	subs	r3, r2, r3
 8002346:	2b02      	cmp	r3, #2
 8002348:	d906      	bls.n	8002358 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800234a:	2303      	movs	r3, #3
 800234c:	e1ca      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000
 8002354:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002358:	4b8c      	ldr	r3, [pc, #560]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800235a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1ea      	bne.n	800233c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0304 	and.w	r3, r3, #4
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80a6 	beq.w	80024c0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002374:	2300      	movs	r3, #0
 8002376:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002378:	4b84      	ldr	r3, [pc, #528]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800237a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800237c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d101      	bne.n	8002388 <HAL_RCC_OscConfig+0x2b4>
 8002384:	2301      	movs	r3, #1
 8002386:	e000      	b.n	800238a <HAL_RCC_OscConfig+0x2b6>
 8002388:	2300      	movs	r3, #0
 800238a:	2b00      	cmp	r3, #0
 800238c:	d00d      	beq.n	80023aa <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800238e:	4b7f      	ldr	r3, [pc, #508]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002390:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002392:	4a7e      	ldr	r2, [pc, #504]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002398:	6593      	str	r3, [r2, #88]	@ 0x58
 800239a:	4b7c      	ldr	r3, [pc, #496]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800239c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800239e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023a2:	60fb      	str	r3, [r7, #12]
 80023a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80023a6:	2301      	movs	r3, #1
 80023a8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023aa:	4b79      	ldr	r3, [pc, #484]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d118      	bne.n	80023e8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80023b6:	4b76      	ldr	r3, [pc, #472]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a75      	ldr	r2, [pc, #468]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023bc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80023c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80023c2:	f7fe fd3f 	bl	8000e44 <HAL_GetTick>
 80023c6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023c8:	e008      	b.n	80023dc <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ca:	f7fe fd3b 	bl	8000e44 <HAL_GetTick>
 80023ce:	4602      	mov	r2, r0
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1ad3      	subs	r3, r2, r3
 80023d4:	2b02      	cmp	r3, #2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e183      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80023dc:	4b6c      	ldr	r3, [pc, #432]	@ (8002590 <HAL_RCC_OscConfig+0x4bc>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d0f0      	beq.n	80023ca <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	689b      	ldr	r3, [r3, #8]
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d108      	bne.n	8002402 <HAL_RCC_OscConfig+0x32e>
 80023f0:	4b66      	ldr	r3, [pc, #408]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80023f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f6:	4a65      	ldr	r2, [pc, #404]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002400:	e024      	b.n	800244c <HAL_RCC_OscConfig+0x378>
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	2b05      	cmp	r3, #5
 8002408:	d110      	bne.n	800242c <HAL_RCC_OscConfig+0x358>
 800240a:	4b60      	ldr	r3, [pc, #384]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002410:	4a5e      	ldr	r2, [pc, #376]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800241a:	4b5c      	ldr	r3, [pc, #368]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800241c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002420:	4a5a      	ldr	r2, [pc, #360]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002422:	f043 0301 	orr.w	r3, r3, #1
 8002426:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800242a:	e00f      	b.n	800244c <HAL_RCC_OscConfig+0x378>
 800242c:	4b57      	ldr	r3, [pc, #348]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800242e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002432:	4a56      	ldr	r2, [pc, #344]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002434:	f023 0301 	bic.w	r3, r3, #1
 8002438:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800243c:	4b53      	ldr	r3, [pc, #332]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800243e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002442:	4a52      	ldr	r2, [pc, #328]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002444:	f023 0304 	bic.w	r3, r3, #4
 8002448:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d016      	beq.n	8002482 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002454:	f7fe fcf6 	bl	8000e44 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800245a:	e00a      	b.n	8002472 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800245c:	f7fe fcf2 	bl	8000e44 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	f241 3288 	movw	r2, #5000	@ 0x1388
 800246a:	4293      	cmp	r3, r2
 800246c:	d901      	bls.n	8002472 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800246e:	2303      	movs	r3, #3
 8002470:	e138      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002472:	4b46      	ldr	r3, [pc, #280]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002474:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002478:	f003 0302 	and.w	r3, r3, #2
 800247c:	2b00      	cmp	r3, #0
 800247e:	d0ed      	beq.n	800245c <HAL_RCC_OscConfig+0x388>
 8002480:	e015      	b.n	80024ae <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002482:	f7fe fcdf 	bl	8000e44 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002488:	e00a      	b.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800248a:	f7fe fcdb 	bl	8000e44 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002498:	4293      	cmp	r3, r2
 800249a:	d901      	bls.n	80024a0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800249c:	2303      	movs	r3, #3
 800249e:	e121      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80024a0:	4b3a      	ldr	r3, [pc, #232]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80024a6:	f003 0302 	and.w	r3, r3, #2
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d1ed      	bne.n	800248a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80024ae:	7ffb      	ldrb	r3, [r7, #31]
 80024b0:	2b01      	cmp	r3, #1
 80024b2:	d105      	bne.n	80024c0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024b4:	4b35      	ldr	r3, [pc, #212]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80024b8:	4a34      	ldr	r2, [pc, #208]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024ba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80024be:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0320 	and.w	r3, r3, #32
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d03c      	beq.n	8002546 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d01c      	beq.n	800250e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80024d4:	4b2d      	ldr	r3, [pc, #180]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024da:	4a2c      	ldr	r2, [pc, #176]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 80024dc:	f043 0301 	orr.w	r3, r3, #1
 80024e0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7fe fcae 	bl	8000e44 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024ec:	f7fe fcaa 	bl	8000e44 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e0f2      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024fe:	4b23      	ldr	r3, [pc, #140]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002500:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002504:	f003 0302 	and.w	r3, r3, #2
 8002508:	2b00      	cmp	r3, #0
 800250a:	d0ef      	beq.n	80024ec <HAL_RCC_OscConfig+0x418>
 800250c:	e01b      	b.n	8002546 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800250e:	4b1f      	ldr	r3, [pc, #124]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002510:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8002514:	4a1d      	ldr	r2, [pc, #116]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002516:	f023 0301 	bic.w	r3, r3, #1
 800251a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800251e:	f7fe fc91 	bl	8000e44 <HAL_GetTick>
 8002522:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002524:	e008      	b.n	8002538 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002526:	f7fe fc8d 	bl	8000e44 <HAL_GetTick>
 800252a:	4602      	mov	r2, r0
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	1ad3      	subs	r3, r2, r3
 8002530:	2b02      	cmp	r3, #2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e0d5      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002538:	4b14      	ldr	r3, [pc, #80]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800253a:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800253e:	f003 0302 	and.w	r3, r3, #2
 8002542:	2b00      	cmp	r3, #0
 8002544:	d1ef      	bne.n	8002526 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	69db      	ldr	r3, [r3, #28]
 800254a:	2b00      	cmp	r3, #0
 800254c:	f000 80c9 	beq.w	80026e2 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002550:	4b0e      	ldr	r3, [pc, #56]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	f003 030c 	and.w	r3, r3, #12
 8002558:	2b0c      	cmp	r3, #12
 800255a:	f000 8083 	beq.w	8002664 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	69db      	ldr	r3, [r3, #28]
 8002562:	2b02      	cmp	r3, #2
 8002564:	d15e      	bne.n	8002624 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002566:	4b09      	ldr	r3, [pc, #36]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a08      	ldr	r2, [pc, #32]	@ (800258c <HAL_RCC_OscConfig+0x4b8>)
 800256c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002570:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fc67 	bl	8000e44 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002578:	e00c      	b.n	8002594 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800257a:	f7fe fc63 	bl	8000e44 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d905      	bls.n	8002594 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e0ab      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
 800258c:	40021000 	.word	0x40021000
 8002590:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002594:	4b55      	ldr	r3, [pc, #340]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800259c:	2b00      	cmp	r3, #0
 800259e:	d1ec      	bne.n	800257a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025a0:	4b52      	ldr	r3, [pc, #328]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025a2:	68da      	ldr	r2, [r3, #12]
 80025a4:	4b52      	ldr	r3, [pc, #328]	@ (80026f0 <HAL_RCC_OscConfig+0x61c>)
 80025a6:	4013      	ands	r3, r2
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	6a11      	ldr	r1, [r2, #32]
 80025ac:	687a      	ldr	r2, [r7, #4]
 80025ae:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80025b0:	3a01      	subs	r2, #1
 80025b2:	0112      	lsls	r2, r2, #4
 80025b4:	4311      	orrs	r1, r2
 80025b6:	687a      	ldr	r2, [r7, #4]
 80025b8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80025ba:	0212      	lsls	r2, r2, #8
 80025bc:	4311      	orrs	r1, r2
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025c2:	0852      	lsrs	r2, r2, #1
 80025c4:	3a01      	subs	r2, #1
 80025c6:	0552      	lsls	r2, r2, #21
 80025c8:	4311      	orrs	r1, r2
 80025ca:	687a      	ldr	r2, [r7, #4]
 80025cc:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025ce:	0852      	lsrs	r2, r2, #1
 80025d0:	3a01      	subs	r2, #1
 80025d2:	0652      	lsls	r2, r2, #25
 80025d4:	4311      	orrs	r1, r2
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80025da:	06d2      	lsls	r2, r2, #27
 80025dc:	430a      	orrs	r2, r1
 80025de:	4943      	ldr	r1, [pc, #268]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025e0:	4313      	orrs	r3, r2
 80025e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80025e4:	4b41      	ldr	r3, [pc, #260]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a40      	ldr	r2, [pc, #256]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80025f0:	4b3e      	ldr	r3, [pc, #248]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025f2:	68db      	ldr	r3, [r3, #12]
 80025f4:	4a3d      	ldr	r2, [pc, #244]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 80025f6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025fc:	f7fe fc22 	bl	8000e44 <HAL_GetTick>
 8002600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002602:	e008      	b.n	8002616 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002604:	f7fe fc1e 	bl	8000e44 <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	693b      	ldr	r3, [r7, #16]
 800260c:	1ad3      	subs	r3, r2, r3
 800260e:	2b02      	cmp	r3, #2
 8002610:	d901      	bls.n	8002616 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8002612:	2303      	movs	r3, #3
 8002614:	e066      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002616:	4b35      	ldr	r3, [pc, #212]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d0f0      	beq.n	8002604 <HAL_RCC_OscConfig+0x530>
 8002622:	e05e      	b.n	80026e2 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002624:	4b31      	ldr	r3, [pc, #196]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a30      	ldr	r2, [pc, #192]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800262a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800262e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002630:	f7fe fc08 	bl	8000e44 <HAL_GetTick>
 8002634:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002636:	e008      	b.n	800264a <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002638:	f7fe fc04 	bl	8000e44 <HAL_GetTick>
 800263c:	4602      	mov	r2, r0
 800263e:	693b      	ldr	r3, [r7, #16]
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	2b02      	cmp	r3, #2
 8002644:	d901      	bls.n	800264a <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 8002646:	2303      	movs	r3, #3
 8002648:	e04c      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800264a:	4b28      	ldr	r3, [pc, #160]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002652:	2b00      	cmp	r3, #0
 8002654:	d1f0      	bne.n	8002638 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8002656:	4b25      	ldr	r3, [pc, #148]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	4924      	ldr	r1, [pc, #144]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 800265c:	4b25      	ldr	r3, [pc, #148]	@ (80026f4 <HAL_RCC_OscConfig+0x620>)
 800265e:	4013      	ands	r3, r2
 8002660:	60cb      	str	r3, [r1, #12]
 8002662:	e03e      	b.n	80026e2 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	69db      	ldr	r3, [r3, #28]
 8002668:	2b01      	cmp	r3, #1
 800266a:	d101      	bne.n	8002670 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e039      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8002670:	4b1e      	ldr	r3, [pc, #120]	@ (80026ec <HAL_RCC_OscConfig+0x618>)
 8002672:	68db      	ldr	r3, [r3, #12]
 8002674:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	6a1b      	ldr	r3, [r3, #32]
 8002680:	429a      	cmp	r2, r3
 8002682:	d12c      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800268e:	3b01      	subs	r3, #1
 8002690:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002692:	429a      	cmp	r2, r3
 8002694:	d123      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8002696:	697b      	ldr	r3, [r7, #20]
 8002698:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026a0:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80026a2:	429a      	cmp	r2, r3
 80026a4:	d11b      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026a6:	697b      	ldr	r3, [r7, #20]
 80026a8:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026b0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80026b2:	429a      	cmp	r2, r3
 80026b4:	d113      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026b6:	697b      	ldr	r3, [r7, #20]
 80026b8:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80026c0:	085b      	lsrs	r3, r3, #1
 80026c2:	3b01      	subs	r3, #1
 80026c4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d109      	bne.n	80026de <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026ca:	697b      	ldr	r3, [r7, #20]
 80026cc:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80026d4:	085b      	lsrs	r3, r3, #1
 80026d6:	3b01      	subs	r3, #1
 80026d8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026da:	429a      	cmp	r2, r3
 80026dc:	d001      	beq.n	80026e2 <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80026de:	2301      	movs	r3, #1
 80026e0:	e000      	b.n	80026e4 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80026e2:	2300      	movs	r3, #0
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	3720      	adds	r7, #32
 80026e8:	46bd      	mov	sp, r7
 80026ea:	bd80      	pop	{r7, pc}
 80026ec:	40021000 	.word	0x40021000
 80026f0:	019f800c 	.word	0x019f800c
 80026f4:	feeefffc 	.word	0xfeeefffc

080026f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
 8002700:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d101      	bne.n	8002710 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800270c:	2301      	movs	r3, #1
 800270e:	e11e      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002710:	4b91      	ldr	r3, [pc, #580]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f003 030f 	and.w	r3, r3, #15
 8002718:	683a      	ldr	r2, [r7, #0]
 800271a:	429a      	cmp	r2, r3
 800271c:	d910      	bls.n	8002740 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800271e:	4b8e      	ldr	r3, [pc, #568]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f023 020f 	bic.w	r2, r3, #15
 8002726:	498c      	ldr	r1, [pc, #560]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	4313      	orrs	r3, r2
 800272c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800272e:	4b8a      	ldr	r3, [pc, #552]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 030f 	and.w	r3, r3, #15
 8002736:	683a      	ldr	r2, [r7, #0]
 8002738:	429a      	cmp	r2, r3
 800273a:	d001      	beq.n	8002740 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800273c:	2301      	movs	r3, #1
 800273e:	e106      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0301 	and.w	r3, r3, #1
 8002748:	2b00      	cmp	r3, #0
 800274a:	d073      	beq.n	8002834 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b03      	cmp	r3, #3
 8002752:	d129      	bne.n	80027a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002754:	4b81      	ldr	r3, [pc, #516]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e0f4      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8002764:	f000 f99e 	bl	8002aa4 <RCC_GetSysClockFreqFromPLLSource>
 8002768:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	4a7c      	ldr	r2, [pc, #496]	@ (8002960 <HAL_RCC_ClockConfig+0x268>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d93f      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002772:	4b7a      	ldr	r3, [pc, #488]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8002786:	2b00      	cmp	r3, #0
 8002788:	d033      	beq.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800278e:	2b00      	cmp	r3, #0
 8002790:	d12f      	bne.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002792:	4b72      	ldr	r3, [pc, #456]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002794:	689b      	ldr	r3, [r3, #8]
 8002796:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800279a:	4a70      	ldr	r2, [pc, #448]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800279c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027a2:	2380      	movs	r3, #128	@ 0x80
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	e024      	b.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b02      	cmp	r3, #2
 80027ae:	d107      	bne.n	80027c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027b0:	4b6a      	ldr	r3, [pc, #424]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d109      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027bc:	2301      	movs	r3, #1
 80027be:	e0c6      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	4b66      	ldr	r3, [pc, #408]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d101      	bne.n	80027d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80027cc:	2301      	movs	r3, #1
 80027ce:	e0be      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80027d0:	f000 f8ce 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80027d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4a61      	ldr	r2, [pc, #388]	@ (8002960 <HAL_RCC_ClockConfig+0x268>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d909      	bls.n	80027f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027de:	4b5f      	ldr	r3, [pc, #380]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027e6:	4a5d      	ldr	r2, [pc, #372]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80027ee:	2380      	movs	r3, #128	@ 0x80
 80027f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80027f2:	4b5a      	ldr	r3, [pc, #360]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80027f4:	689b      	ldr	r3, [r3, #8]
 80027f6:	f023 0203 	bic.w	r2, r3, #3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	4957      	ldr	r1, [pc, #348]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002800:	4313      	orrs	r3, r2
 8002802:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002804:	f7fe fb1e 	bl	8000e44 <HAL_GetTick>
 8002808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800280a:	e00a      	b.n	8002822 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800280c:	f7fe fb1a 	bl	8000e44 <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	@ 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e095      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002822:	4b4e      	ldr	r3, [pc, #312]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	f003 020c 	and.w	r2, r3, #12
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	009b      	lsls	r3, r3, #2
 8002830:	429a      	cmp	r2, r3
 8002832:	d1eb      	bne.n	800280c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f003 0302 	and.w	r3, r3, #2
 800283c:	2b00      	cmp	r3, #0
 800283e:	d023      	beq.n	8002888 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f003 0304 	and.w	r3, r3, #4
 8002848:	2b00      	cmp	r3, #0
 800284a:	d005      	beq.n	8002858 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800284c:	4b43      	ldr	r3, [pc, #268]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	4a42      	ldr	r2, [pc, #264]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002852:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002856:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0308 	and.w	r3, r3, #8
 8002860:	2b00      	cmp	r3, #0
 8002862:	d007      	beq.n	8002874 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8002864:	4b3d      	ldr	r3, [pc, #244]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800286c:	4a3b      	ldr	r2, [pc, #236]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800286e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002872:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002874:	4b39      	ldr	r3, [pc, #228]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002876:	689b      	ldr	r3, [r3, #8]
 8002878:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	689b      	ldr	r3, [r3, #8]
 8002880:	4936      	ldr	r1, [pc, #216]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002882:	4313      	orrs	r3, r2
 8002884:	608b      	str	r3, [r1, #8]
 8002886:	e008      	b.n	800289a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002888:	697b      	ldr	r3, [r7, #20]
 800288a:	2b80      	cmp	r3, #128	@ 0x80
 800288c:	d105      	bne.n	800289a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800288e:	4b33      	ldr	r3, [pc, #204]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	4a32      	ldr	r2, [pc, #200]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002894:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002898:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800289a:	4b2f      	ldr	r3, [pc, #188]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 030f 	and.w	r3, r3, #15
 80028a2:	683a      	ldr	r2, [r7, #0]
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d21d      	bcs.n	80028e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a8:	4b2b      	ldr	r3, [pc, #172]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	f023 020f 	bic.w	r2, r3, #15
 80028b0:	4929      	ldr	r1, [pc, #164]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80028b8:	f7fe fac4 	bl	8000e44 <HAL_GetTick>
 80028bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028be:	e00a      	b.n	80028d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028c0:	f7fe fac0 	bl	8000e44 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d901      	bls.n	80028d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e03b      	b.n	800294e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d6:	4b20      	ldr	r3, [pc, #128]	@ (8002958 <HAL_RCC_ClockConfig+0x260>)
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 030f 	and.w	r3, r3, #15
 80028de:	683a      	ldr	r2, [r7, #0]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d1ed      	bne.n	80028c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f003 0304 	and.w	r3, r3, #4
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d008      	beq.n	8002902 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f0:	4b1a      	ldr	r3, [pc, #104]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80028f2:	689b      	ldr	r3, [r3, #8]
 80028f4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	4917      	ldr	r1, [pc, #92]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 80028fe:	4313      	orrs	r3, r2
 8002900:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	f003 0308 	and.w	r3, r3, #8
 800290a:	2b00      	cmp	r3, #0
 800290c:	d009      	beq.n	8002922 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800290e:	4b13      	ldr	r3, [pc, #76]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 8002910:	689b      	ldr	r3, [r3, #8]
 8002912:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00db      	lsls	r3, r3, #3
 800291c:	490f      	ldr	r1, [pc, #60]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800291e:	4313      	orrs	r3, r2
 8002920:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002922:	f000 f825 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8002926:	4602      	mov	r2, r0
 8002928:	4b0c      	ldr	r3, [pc, #48]	@ (800295c <HAL_RCC_ClockConfig+0x264>)
 800292a:	689b      	ldr	r3, [r3, #8]
 800292c:	091b      	lsrs	r3, r3, #4
 800292e:	f003 030f 	and.w	r3, r3, #15
 8002932:	490c      	ldr	r1, [pc, #48]	@ (8002964 <HAL_RCC_ClockConfig+0x26c>)
 8002934:	5ccb      	ldrb	r3, [r1, r3]
 8002936:	f003 031f 	and.w	r3, r3, #31
 800293a:	fa22 f303 	lsr.w	r3, r2, r3
 800293e:	4a0a      	ldr	r2, [pc, #40]	@ (8002968 <HAL_RCC_ClockConfig+0x270>)
 8002940:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002942:	4b0a      	ldr	r3, [pc, #40]	@ (800296c <HAL_RCC_ClockConfig+0x274>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4618      	mov	r0, r3
 8002948:	f7fe fa30 	bl	8000dac <HAL_InitTick>
 800294c:	4603      	mov	r3, r0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40022000 	.word	0x40022000
 800295c:	40021000 	.word	0x40021000
 8002960:	04c4b400 	.word	0x04c4b400
 8002964:	08004f50 	.word	0x08004f50
 8002968:	20000000 	.word	0x20000000
 800296c:	20000004 	.word	0x20000004

08002970 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002970:	b480      	push	{r7}
 8002972:	b087      	sub	sp, #28
 8002974:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002976:	4b2c      	ldr	r3, [pc, #176]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002978:	689b      	ldr	r3, [r3, #8]
 800297a:	f003 030c 	and.w	r3, r3, #12
 800297e:	2b04      	cmp	r3, #4
 8002980:	d102      	bne.n	8002988 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002982:	4b2a      	ldr	r3, [pc, #168]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	e047      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002988:	4b27      	ldr	r3, [pc, #156]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	f003 030c 	and.w	r3, r3, #12
 8002990:	2b08      	cmp	r3, #8
 8002992:	d102      	bne.n	800299a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002994:	4b26      	ldr	r3, [pc, #152]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002996:	613b      	str	r3, [r7, #16]
 8002998:	e03e      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800299a:	4b23      	ldr	r3, [pc, #140]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 800299c:	689b      	ldr	r3, [r3, #8]
 800299e:	f003 030c 	and.w	r3, r3, #12
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d136      	bne.n	8002a14 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80029a6:	4b20      	ldr	r3, [pc, #128]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029a8:	68db      	ldr	r3, [r3, #12]
 80029aa:	f003 0303 	and.w	r3, r3, #3
 80029ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80029b0:	4b1d      	ldr	r3, [pc, #116]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029b2:	68db      	ldr	r3, [r3, #12]
 80029b4:	091b      	lsrs	r3, r3, #4
 80029b6:	f003 030f 	and.w	r3, r3, #15
 80029ba:	3301      	adds	r3, #1
 80029bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b03      	cmp	r3, #3
 80029c2:	d10c      	bne.n	80029de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029c4:	4a1a      	ldr	r2, [pc, #104]	@ (8002a30 <HAL_RCC_GetSysClockFreq+0xc0>)
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80029cc:	4a16      	ldr	r2, [pc, #88]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029ce:	68d2      	ldr	r2, [r2, #12]
 80029d0:	0a12      	lsrs	r2, r2, #8
 80029d2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029d6:	fb02 f303 	mul.w	r3, r2, r3
 80029da:	617b      	str	r3, [r7, #20]
      break;
 80029dc:	e00c      	b.n	80029f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80029de:	4a13      	ldr	r2, [pc, #76]	@ (8002a2c <HAL_RCC_GetSysClockFreq+0xbc>)
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e6:	4a10      	ldr	r2, [pc, #64]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029e8:	68d2      	ldr	r2, [r2, #12]
 80029ea:	0a12      	lsrs	r2, r2, #8
 80029ec:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]
      break;
 80029f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80029f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002a28 <HAL_RCC_GetSysClockFreq+0xb8>)
 80029fa:	68db      	ldr	r3, [r3, #12]
 80029fc:	0e5b      	lsrs	r3, r3, #25
 80029fe:	f003 0303 	and.w	r3, r3, #3
 8002a02:	3301      	adds	r3, #1
 8002a04:	005b      	lsls	r3, r3, #1
 8002a06:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a10:	613b      	str	r3, [r7, #16]
 8002a12:	e001      	b.n	8002a18 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8002a14:	2300      	movs	r3, #0
 8002a16:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002a18:	693b      	ldr	r3, [r7, #16]
}
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	40021000 	.word	0x40021000
 8002a2c:	00f42400 	.word	0x00f42400
 8002a30:	007a1200 	.word	0x007a1200

08002a34 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002a38:	4b03      	ldr	r3, [pc, #12]	@ (8002a48 <HAL_RCC_GetHCLKFreq+0x14>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
}
 8002a3c:	4618      	mov	r0, r3
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	20000000 	.word	0x20000000

08002a4c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002a50:	f7ff fff0 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a54:	4602      	mov	r2, r0
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002a58:	689b      	ldr	r3, [r3, #8]
 8002a5a:	0a1b      	lsrs	r3, r3, #8
 8002a5c:	f003 0307 	and.w	r3, r3, #7
 8002a60:	4904      	ldr	r1, [pc, #16]	@ (8002a74 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002a62:	5ccb      	ldrb	r3, [r1, r3]
 8002a64:	f003 031f 	and.w	r3, r3, #31
 8002a68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a6c:	4618      	mov	r0, r3
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	40021000 	.word	0x40021000
 8002a74:	08004f60 	.word	0x08004f60

08002a78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002a7c:	f7ff ffda 	bl	8002a34 <HAL_RCC_GetHCLKFreq>
 8002a80:	4602      	mov	r2, r0
 8002a82:	4b06      	ldr	r3, [pc, #24]	@ (8002a9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002a84:	689b      	ldr	r3, [r3, #8]
 8002a86:	0adb      	lsrs	r3, r3, #11
 8002a88:	f003 0307 	and.w	r3, r3, #7
 8002a8c:	4904      	ldr	r1, [pc, #16]	@ (8002aa0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002a8e:	5ccb      	ldrb	r3, [r1, r3]
 8002a90:	f003 031f 	and.w	r3, r3, #31
 8002a94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	bd80      	pop	{r7, pc}
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	08004f60 	.word	0x08004f60

08002aa4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002aa4:	b480      	push	{r7}
 8002aa6:	b087      	sub	sp, #28
 8002aa8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aac:	68db      	ldr	r3, [r3, #12]
 8002aae:	f003 0303 	and.w	r3, r3, #3
 8002ab2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002ab4:	4b1b      	ldr	r3, [pc, #108]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ab6:	68db      	ldr	r3, [r3, #12]
 8002ab8:	091b      	lsrs	r3, r3, #4
 8002aba:	f003 030f 	and.w	r3, r3, #15
 8002abe:	3301      	adds	r3, #1
 8002ac0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b03      	cmp	r3, #3
 8002ac6:	d10c      	bne.n	8002ae2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ac8:	4a17      	ldr	r2, [pc, #92]	@ (8002b28 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad0:	4a14      	ldr	r2, [pc, #80]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002ad2:	68d2      	ldr	r2, [r2, #12]
 8002ad4:	0a12      	lsrs	r2, r2, #8
 8002ad6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002ada:	fb02 f303 	mul.w	r3, r2, r3
 8002ade:	617b      	str	r3, [r7, #20]
    break;
 8002ae0:	e00c      	b.n	8002afc <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002ae2:	4a12      	ldr	r2, [pc, #72]	@ (8002b2c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	4a0e      	ldr	r2, [pc, #56]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	0a12      	lsrs	r2, r2, #8
 8002af0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8002af4:	fb02 f303 	mul.w	r3, r2, r3
 8002af8:	617b      	str	r3, [r7, #20]
    break;
 8002afa:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002afc:	4b09      	ldr	r3, [pc, #36]	@ (8002b24 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	0e5b      	lsrs	r3, r3, #25
 8002b02:	f003 0303 	and.w	r3, r3, #3
 8002b06:	3301      	adds	r3, #1
 8002b08:	005b      	lsls	r3, r3, #1
 8002b0a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8002b0c:	697a      	ldr	r2, [r7, #20]
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b14:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8002b16:	687b      	ldr	r3, [r7, #4]
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	371c      	adds	r7, #28
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr
 8002b24:	40021000 	.word	0x40021000
 8002b28:	007a1200 	.word	0x007a1200
 8002b2c:	00f42400 	.word	0x00f42400

08002b30 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	b086      	sub	sp, #24
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002b38:	2300      	movs	r3, #0
 8002b3a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002b3c:	2300      	movs	r3, #0
 8002b3e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	f000 8098 	beq.w	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002b4e:	2300      	movs	r3, #0
 8002b50:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b52:	4b43      	ldr	r3, [pc, #268]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10d      	bne.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b5e:	4b40      	ldr	r3, [pc, #256]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b60:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b62:	4a3f      	ldr	r2, [pc, #252]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b68:	6593      	str	r3, [r2, #88]	@ 0x58
 8002b6a:	4b3d      	ldr	r3, [pc, #244]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002b6c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b6e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b72:	60bb      	str	r3, [r7, #8]
 8002b74:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b76:	2301      	movs	r3, #1
 8002b78:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002b7a:	4b3a      	ldr	r3, [pc, #232]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a39      	ldr	r2, [pc, #228]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002b80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b84:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002b86:	f7fe f95d 	bl	8000e44 <HAL_GetTick>
 8002b8a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002b8c:	e009      	b.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8e:	f7fe f959 	bl	8000e44 <HAL_GetTick>
 8002b92:	4602      	mov	r2, r0
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	1ad3      	subs	r3, r2, r3
 8002b98:	2b02      	cmp	r3, #2
 8002b9a:	d902      	bls.n	8002ba2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	74fb      	strb	r3, [r7, #19]
        break;
 8002ba0:	e005      	b.n	8002bae <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002ba2:	4b30      	ldr	r3, [pc, #192]	@ (8002c64 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d0ef      	beq.n	8002b8e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8002bae:	7cfb      	ldrb	r3, [r7, #19]
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d159      	bne.n	8002c68 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002bb4:	4b2a      	ldr	r3, [pc, #168]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bb6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002bbe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002bc0:	697b      	ldr	r3, [r7, #20]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d01e      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002bca:	697a      	ldr	r2, [r7, #20]
 8002bcc:	429a      	cmp	r2, r3
 8002bce:	d019      	beq.n	8002c04 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002bd0:	4b23      	ldr	r3, [pc, #140]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bd6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002bda:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002bdc:	4b20      	ldr	r3, [pc, #128]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002be2:	4a1f      	ldr	r2, [pc, #124]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002be4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002be8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002bec:	4b1c      	ldr	r3, [pc, #112]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002bf2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bf4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bf8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002bfc:	4a18      	ldr	r2, [pc, #96]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002bfe:	697b      	ldr	r3, [r7, #20]
 8002c00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	f003 0301 	and.w	r3, r3, #1
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d016      	beq.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0e:	f7fe f919 	bl	8000e44 <HAL_GetTick>
 8002c12:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c14:	e00b      	b.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c16:	f7fe f915 	bl	8000e44 <HAL_GetTick>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	1ad3      	subs	r3, r2, r3
 8002c20:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d902      	bls.n	8002c2e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8002c28:	2303      	movs	r3, #3
 8002c2a:	74fb      	strb	r3, [r7, #19]
            break;
 8002c2c:	e006      	b.n	8002c3c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c30:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d0ec      	beq.n	8002c16 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8002c3c:	7cfb      	ldrb	r3, [r7, #19]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d10b      	bne.n	8002c5a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002c42:	4b07      	ldr	r3, [pc, #28]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c44:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002c48:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c50:	4903      	ldr	r1, [pc, #12]	@ (8002c60 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8002c52:	4313      	orrs	r3, r2
 8002c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002c58:	e008      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002c5a:	7cfb      	ldrb	r3, [r7, #19]
 8002c5c:	74bb      	strb	r3, [r7, #18]
 8002c5e:	e005      	b.n	8002c6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c68:	7cfb      	ldrb	r3, [r7, #19]
 8002c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002c6c:	7c7b      	ldrb	r3, [r7, #17]
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d105      	bne.n	8002c7e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c72:	4ba7      	ldr	r3, [pc, #668]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c76:	4aa6      	ldr	r2, [pc, #664]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0301 	and.w	r3, r3, #1
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d00a      	beq.n	8002ca0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002c8a:	4ba1      	ldr	r3, [pc, #644]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c90:	f023 0203 	bic.w	r2, r3, #3
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	499d      	ldr	r1, [pc, #628]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002c9a:	4313      	orrs	r3, r2
 8002c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 0302 	and.w	r3, r3, #2
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002cac:	4b98      	ldr	r3, [pc, #608]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cb2:	f023 020c 	bic.w	r2, r3, #12
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	689b      	ldr	r3, [r3, #8]
 8002cba:	4995      	ldr	r1, [pc, #596]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00a      	beq.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002cce:	4b90      	ldr	r3, [pc, #576]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	498c      	ldr	r1, [pc, #560]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cde:	4313      	orrs	r3, r2
 8002ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0308 	and.w	r3, r3, #8
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d00a      	beq.n	8002d06 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002cf0:	4b87      	ldr	r3, [pc, #540]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	691b      	ldr	r3, [r3, #16]
 8002cfe:	4984      	ldr	r1, [pc, #528]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 0310 	and.w	r3, r3, #16
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00a      	beq.n	8002d28 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002d12:	4b7f      	ldr	r3, [pc, #508]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	497b      	ldr	r1, [pc, #492]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d22:	4313      	orrs	r3, r2
 8002d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0320 	and.w	r3, r3, #32
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d00a      	beq.n	8002d4a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002d34:	4b76      	ldr	r3, [pc, #472]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	699b      	ldr	r3, [r3, #24]
 8002d42:	4973      	ldr	r1, [pc, #460]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d44:	4313      	orrs	r3, r2
 8002d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d00a      	beq.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d56:	4b6e      	ldr	r3, [pc, #440]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d5c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	69db      	ldr	r3, [r3, #28]
 8002d64:	496a      	ldr	r1, [pc, #424]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d66:	4313      	orrs	r3, r2
 8002d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d00a      	beq.n	8002d8e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d78:	4b65      	ldr	r3, [pc, #404]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d7e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6a1b      	ldr	r3, [r3, #32]
 8002d86:	4962      	ldr	r1, [pc, #392]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d00a      	beq.n	8002db0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d9a:	4b5d      	ldr	r3, [pc, #372]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002da0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da8:	4959      	ldr	r1, [pc, #356]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002daa:	4313      	orrs	r3, r2
 8002dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00a      	beq.n	8002dd2 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002dbc:	4b54      	ldr	r3, [pc, #336]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dbe:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002dc2:	f023 0203 	bic.w	r2, r3, #3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002dca:	4951      	ldr	r1, [pc, #324]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d00a      	beq.n	8002df4 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002dde:	4b4c      	ldr	r3, [pc, #304]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002de4:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dec:	4948      	ldr	r1, [pc, #288]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002dee:	4313      	orrs	r3, r2
 8002df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d015      	beq.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002e00:	4b43      	ldr	r3, [pc, #268]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e06:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e0e:	4940      	ldr	r1, [pc, #256]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e10:	4313      	orrs	r3, r2
 8002e12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e1a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002e1e:	d105      	bne.n	8002e2c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e20:	4b3b      	ldr	r3, [pc, #236]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	4a3a      	ldr	r2, [pc, #232]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e2a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d015      	beq.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002e38:	4b35      	ldr	r3, [pc, #212]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e3e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e46:	4932      	ldr	r1, [pc, #200]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002e52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e56:	d105      	bne.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e58:	4b2d      	ldr	r3, [pc, #180]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	4a2c      	ldr	r2, [pc, #176]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e62:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002e70:	4b27      	ldr	r3, [pc, #156]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e72:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e76:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7e:	4924      	ldr	r1, [pc, #144]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e8e:	d105      	bne.n	8002e9c <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e92:	68db      	ldr	r3, [r3, #12]
 8002e94:	4a1e      	ldr	r2, [pc, #120]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002e96:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002e9a:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d015      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002ea8:	4b19      	ldr	r3, [pc, #100]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eb6:	4916      	ldr	r1, [pc, #88]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002ec6:	d105      	bne.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ec8:	4b11      	ldr	r3, [pc, #68]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	4a10      	ldr	r2, [pc, #64]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002ed2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d019      	beq.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002ee6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eee:	4908      	ldr	r1, [pc, #32]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002efa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002efe:	d109      	bne.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002f00:	4b03      	ldr	r3, [pc, #12]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	4a02      	ldr	r2, [pc, #8]	@ (8002f10 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8002f06:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002f0a:	60d3      	str	r3, [r2, #12]
 8002f0c:	e002      	b.n	8002f14 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8002f0e:	bf00      	nop
 8002f10:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d015      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002f20:	4b29      	ldr	r3, [pc, #164]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f26:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f2e:	4926      	ldr	r1, [pc, #152]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f30:	4313      	orrs	r3, r2
 8002f32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f3a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002f3e:	d105      	bne.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f40:	4b21      	ldr	r3, [pc, #132]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	4a20      	ldr	r2, [pc, #128]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f46:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f4a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d015      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8002f58:	4b1b      	ldr	r3, [pc, #108]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f5a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002f5e:	f023 4240 	bic.w	r2, r3, #3221225472	@ 0xc0000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f66:	4918      	ldr	r1, [pc, #96]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002f72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002f76:	d105      	bne.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8002f78:	4b13      	ldr	r3, [pc, #76]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a12      	ldr	r2, [pc, #72]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f7e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f82:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d015      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8002f90:	4b0d      	ldr	r3, [pc, #52]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002f92:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8002f96:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002f9e:	490a      	ldr	r1, [pc, #40]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002faa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002fae:	d105      	bne.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fb0:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb2:	68db      	ldr	r3, [r3, #12]
 8002fb4:	4a04      	ldr	r2, [pc, #16]	@ (8002fc8 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8002fb6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002fba:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8002fbc:	7cbb      	ldrb	r3, [r7, #18]
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3718      	adds	r7, #24
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	bf00      	nop
 8002fc8:	40021000 	.word	0x40021000

08002fcc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	b082      	sub	sp, #8
 8002fd0:	af00      	add	r7, sp, #0
 8002fd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d101      	bne.n	8002fde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e042      	b.n	8003064 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d106      	bne.n	8002ff6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	2200      	movs	r2, #0
 8002fec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002ff0:	6878      	ldr	r0, [r7, #4]
 8002ff2:	f7fd fd63 	bl	8000abc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2224      	movs	r2, #36	@ 0x24
 8002ffa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	681a      	ldr	r2, [r3, #0]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	f022 0201 	bic.w	r2, r2, #1
 800300c:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003012:	2b00      	cmp	r3, #0
 8003014:	d002      	beq.n	800301c <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8003016:	6878      	ldr	r0, [r7, #4]
 8003018:	f000 fbb2 	bl	8003780 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800301c:	6878      	ldr	r0, [r7, #4]
 800301e:	f000 f8b3 	bl	8003188 <UART_SetConfig>
 8003022:	4603      	mov	r3, r0
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8003028:	2301      	movs	r3, #1
 800302a:	e01b      	b.n	8003064 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	685a      	ldr	r2, [r3, #4]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800303a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800304a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	681a      	ldr	r2, [r3, #0]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f042 0201 	orr.w	r2, r2, #1
 800305a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fc31 	bl	80038c4 <UART_CheckIdleState>
 8003062:	4603      	mov	r3, r0
}
 8003064:	4618      	mov	r0, r3
 8003066:	3708      	adds	r7, #8
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b08a      	sub	sp, #40	@ 0x28
 8003070:	af02      	add	r7, sp, #8
 8003072:	60f8      	str	r0, [r7, #12]
 8003074:	60b9      	str	r1, [r7, #8]
 8003076:	603b      	str	r3, [r7, #0]
 8003078:	4613      	mov	r3, r2
 800307a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003082:	2b20      	cmp	r3, #32
 8003084:	d17b      	bne.n	800317e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8003086:	68bb      	ldr	r3, [r7, #8]
 8003088:	2b00      	cmp	r3, #0
 800308a:	d002      	beq.n	8003092 <HAL_UART_Transmit+0x26>
 800308c:	88fb      	ldrh	r3, [r7, #6]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d101      	bne.n	8003096 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003092:	2301      	movs	r3, #1
 8003094:	e074      	b.n	8003180 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	2200      	movs	r2, #0
 800309a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2221      	movs	r2, #33	@ 0x21
 80030a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030a6:	f7fd fecd 	bl	8000e44 <HAL_GetTick>
 80030aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	88fa      	ldrh	r2, [r7, #6]
 80030b0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	88fa      	ldrh	r2, [r7, #6]
 80030b8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	689b      	ldr	r3, [r3, #8]
 80030c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80030c4:	d108      	bne.n	80030d8 <HAL_UART_Transmit+0x6c>
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	691b      	ldr	r3, [r3, #16]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d104      	bne.n	80030d8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80030ce:	2300      	movs	r3, #0
 80030d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	61bb      	str	r3, [r7, #24]
 80030d6:	e003      	b.n	80030e0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80030dc:	2300      	movs	r3, #0
 80030de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80030e0:	e030      	b.n	8003144 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80030e2:	683b      	ldr	r3, [r7, #0]
 80030e4:	9300      	str	r3, [sp, #0]
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2200      	movs	r2, #0
 80030ea:	2180      	movs	r1, #128	@ 0x80
 80030ec:	68f8      	ldr	r0, [r7, #12]
 80030ee:	f000 fc93 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d005      	beq.n	8003104 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2220      	movs	r2, #32
 80030fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8003100:	2303      	movs	r3, #3
 8003102:	e03d      	b.n	8003180 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d10b      	bne.n	8003122 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	881b      	ldrh	r3, [r3, #0]
 800310e:	461a      	mov	r2, r3
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003118:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	3302      	adds	r3, #2
 800311e:	61bb      	str	r3, [r7, #24]
 8003120:	e007      	b.n	8003132 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	781a      	ldrb	r2, [r3, #0]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	3301      	adds	r3, #1
 8003130:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8003138:	b29b      	uxth	r3, r3
 800313a:	3b01      	subs	r3, #1
 800313c:	b29a      	uxth	r2, r3
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800314a:	b29b      	uxth	r3, r3
 800314c:	2b00      	cmp	r3, #0
 800314e:	d1c8      	bne.n	80030e2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	9300      	str	r3, [sp, #0]
 8003154:	697b      	ldr	r3, [r7, #20]
 8003156:	2200      	movs	r2, #0
 8003158:	2140      	movs	r1, #64	@ 0x40
 800315a:	68f8      	ldr	r0, [r7, #12]
 800315c:	f000 fc5c 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	d005      	beq.n	8003172 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	2220      	movs	r2, #32
 800316a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800316e:	2303      	movs	r3, #3
 8003170:	e006      	b.n	8003180 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	2220      	movs	r2, #32
 8003176:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800317a:	2300      	movs	r3, #0
 800317c:	e000      	b.n	8003180 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800317e:	2302      	movs	r3, #2
  }
}
 8003180:	4618      	mov	r0, r3
 8003182:	3720      	adds	r7, #32
 8003184:	46bd      	mov	sp, r7
 8003186:	bd80      	pop	{r7, pc}

08003188 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003188:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800318c:	b08c      	sub	sp, #48	@ 0x30
 800318e:	af00      	add	r7, sp, #0
 8003190:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003192:	2300      	movs	r3, #0
 8003194:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	689a      	ldr	r2, [r3, #8]
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	691b      	ldr	r3, [r3, #16]
 80031a0:	431a      	orrs	r2, r3
 80031a2:	697b      	ldr	r3, [r7, #20]
 80031a4:	695b      	ldr	r3, [r3, #20]
 80031a6:	431a      	orrs	r2, r3
 80031a8:	697b      	ldr	r3, [r7, #20]
 80031aa:	69db      	ldr	r3, [r3, #28]
 80031ac:	4313      	orrs	r3, r2
 80031ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80031b0:	697b      	ldr	r3, [r7, #20]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	681a      	ldr	r2, [r3, #0]
 80031b6:	4baa      	ldr	r3, [pc, #680]	@ (8003460 <UART_SetConfig+0x2d8>)
 80031b8:	4013      	ands	r3, r2
 80031ba:	697a      	ldr	r2, [r7, #20]
 80031bc:	6812      	ldr	r2, [r2, #0]
 80031be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80031c0:	430b      	orrs	r3, r1
 80031c2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	685b      	ldr	r3, [r3, #4]
 80031ca:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	68da      	ldr	r2, [r3, #12]
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	430a      	orrs	r2, r1
 80031d8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80031da:	697b      	ldr	r3, [r7, #20]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80031e0:	697b      	ldr	r3, [r7, #20]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a9f      	ldr	r2, [pc, #636]	@ (8003464 <UART_SetConfig+0x2dc>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d004      	beq.n	80031f4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80031ea:	697b      	ldr	r3, [r7, #20]
 80031ec:	6a1b      	ldr	r3, [r3, #32]
 80031ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80031f0:	4313      	orrs	r3, r2
 80031f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80031f4:	697b      	ldr	r3, [r7, #20]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80031fe:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8003202:	697a      	ldr	r2, [r7, #20]
 8003204:	6812      	ldr	r2, [r2, #0]
 8003206:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003208:	430b      	orrs	r3, r1
 800320a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003212:	f023 010f 	bic.w	r1, r3, #15
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	430a      	orrs	r2, r1
 8003220:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a90      	ldr	r2, [pc, #576]	@ (8003468 <UART_SetConfig+0x2e0>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d125      	bne.n	8003278 <UART_SetConfig+0xf0>
 800322c:	4b8f      	ldr	r3, [pc, #572]	@ (800346c <UART_SetConfig+0x2e4>)
 800322e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003232:	f003 0303 	and.w	r3, r3, #3
 8003236:	2b03      	cmp	r3, #3
 8003238:	d81a      	bhi.n	8003270 <UART_SetConfig+0xe8>
 800323a:	a201      	add	r2, pc, #4	@ (adr r2, 8003240 <UART_SetConfig+0xb8>)
 800323c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003240:	08003251 	.word	0x08003251
 8003244:	08003261 	.word	0x08003261
 8003248:	08003259 	.word	0x08003259
 800324c:	08003269 	.word	0x08003269
 8003250:	2301      	movs	r3, #1
 8003252:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003256:	e116      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003258:	2302      	movs	r3, #2
 800325a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800325e:	e112      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003260:	2304      	movs	r3, #4
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003266:	e10e      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003268:	2308      	movs	r3, #8
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326e:	e10a      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003270:	2310      	movs	r3, #16
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003276:	e106      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003278:	697b      	ldr	r3, [r7, #20]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7c      	ldr	r2, [pc, #496]	@ (8003470 <UART_SetConfig+0x2e8>)
 800327e:	4293      	cmp	r3, r2
 8003280:	d138      	bne.n	80032f4 <UART_SetConfig+0x16c>
 8003282:	4b7a      	ldr	r3, [pc, #488]	@ (800346c <UART_SetConfig+0x2e4>)
 8003284:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003288:	f003 030c 	and.w	r3, r3, #12
 800328c:	2b0c      	cmp	r3, #12
 800328e:	d82d      	bhi.n	80032ec <UART_SetConfig+0x164>
 8003290:	a201      	add	r2, pc, #4	@ (adr r2, 8003298 <UART_SetConfig+0x110>)
 8003292:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003296:	bf00      	nop
 8003298:	080032cd 	.word	0x080032cd
 800329c:	080032ed 	.word	0x080032ed
 80032a0:	080032ed 	.word	0x080032ed
 80032a4:	080032ed 	.word	0x080032ed
 80032a8:	080032dd 	.word	0x080032dd
 80032ac:	080032ed 	.word	0x080032ed
 80032b0:	080032ed 	.word	0x080032ed
 80032b4:	080032ed 	.word	0x080032ed
 80032b8:	080032d5 	.word	0x080032d5
 80032bc:	080032ed 	.word	0x080032ed
 80032c0:	080032ed 	.word	0x080032ed
 80032c4:	080032ed 	.word	0x080032ed
 80032c8:	080032e5 	.word	0x080032e5
 80032cc:	2300      	movs	r3, #0
 80032ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032d2:	e0d8      	b.n	8003486 <UART_SetConfig+0x2fe>
 80032d4:	2302      	movs	r3, #2
 80032d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032da:	e0d4      	b.n	8003486 <UART_SetConfig+0x2fe>
 80032dc:	2304      	movs	r3, #4
 80032de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032e2:	e0d0      	b.n	8003486 <UART_SetConfig+0x2fe>
 80032e4:	2308      	movs	r3, #8
 80032e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032ea:	e0cc      	b.n	8003486 <UART_SetConfig+0x2fe>
 80032ec:	2310      	movs	r3, #16
 80032ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80032f2:	e0c8      	b.n	8003486 <UART_SetConfig+0x2fe>
 80032f4:	697b      	ldr	r3, [r7, #20]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a5e      	ldr	r2, [pc, #376]	@ (8003474 <UART_SetConfig+0x2ec>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d125      	bne.n	800334a <UART_SetConfig+0x1c2>
 80032fe:	4b5b      	ldr	r3, [pc, #364]	@ (800346c <UART_SetConfig+0x2e4>)
 8003300:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003304:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003308:	2b30      	cmp	r3, #48	@ 0x30
 800330a:	d016      	beq.n	800333a <UART_SetConfig+0x1b2>
 800330c:	2b30      	cmp	r3, #48	@ 0x30
 800330e:	d818      	bhi.n	8003342 <UART_SetConfig+0x1ba>
 8003310:	2b20      	cmp	r3, #32
 8003312:	d00a      	beq.n	800332a <UART_SetConfig+0x1a2>
 8003314:	2b20      	cmp	r3, #32
 8003316:	d814      	bhi.n	8003342 <UART_SetConfig+0x1ba>
 8003318:	2b00      	cmp	r3, #0
 800331a:	d002      	beq.n	8003322 <UART_SetConfig+0x19a>
 800331c:	2b10      	cmp	r3, #16
 800331e:	d008      	beq.n	8003332 <UART_SetConfig+0x1aa>
 8003320:	e00f      	b.n	8003342 <UART_SetConfig+0x1ba>
 8003322:	2300      	movs	r3, #0
 8003324:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003328:	e0ad      	b.n	8003486 <UART_SetConfig+0x2fe>
 800332a:	2302      	movs	r3, #2
 800332c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003330:	e0a9      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003332:	2304      	movs	r3, #4
 8003334:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003338:	e0a5      	b.n	8003486 <UART_SetConfig+0x2fe>
 800333a:	2308      	movs	r3, #8
 800333c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003340:	e0a1      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003342:	2310      	movs	r3, #16
 8003344:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003348:	e09d      	b.n	8003486 <UART_SetConfig+0x2fe>
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a4a      	ldr	r2, [pc, #296]	@ (8003478 <UART_SetConfig+0x2f0>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d125      	bne.n	80033a0 <UART_SetConfig+0x218>
 8003354:	4b45      	ldr	r3, [pc, #276]	@ (800346c <UART_SetConfig+0x2e4>)
 8003356:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800335a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800335e:	2bc0      	cmp	r3, #192	@ 0xc0
 8003360:	d016      	beq.n	8003390 <UART_SetConfig+0x208>
 8003362:	2bc0      	cmp	r3, #192	@ 0xc0
 8003364:	d818      	bhi.n	8003398 <UART_SetConfig+0x210>
 8003366:	2b80      	cmp	r3, #128	@ 0x80
 8003368:	d00a      	beq.n	8003380 <UART_SetConfig+0x1f8>
 800336a:	2b80      	cmp	r3, #128	@ 0x80
 800336c:	d814      	bhi.n	8003398 <UART_SetConfig+0x210>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <UART_SetConfig+0x1f0>
 8003372:	2b40      	cmp	r3, #64	@ 0x40
 8003374:	d008      	beq.n	8003388 <UART_SetConfig+0x200>
 8003376:	e00f      	b.n	8003398 <UART_SetConfig+0x210>
 8003378:	2300      	movs	r3, #0
 800337a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800337e:	e082      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003380:	2302      	movs	r3, #2
 8003382:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003386:	e07e      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003388:	2304      	movs	r3, #4
 800338a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800338e:	e07a      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003390:	2308      	movs	r3, #8
 8003392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003396:	e076      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003398:	2310      	movs	r3, #16
 800339a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800339e:	e072      	b.n	8003486 <UART_SetConfig+0x2fe>
 80033a0:	697b      	ldr	r3, [r7, #20]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a35      	ldr	r2, [pc, #212]	@ (800347c <UART_SetConfig+0x2f4>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	d12a      	bne.n	8003400 <UART_SetConfig+0x278>
 80033aa:	4b30      	ldr	r3, [pc, #192]	@ (800346c <UART_SetConfig+0x2e4>)
 80033ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033b8:	d01a      	beq.n	80033f0 <UART_SetConfig+0x268>
 80033ba:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033be:	d81b      	bhi.n	80033f8 <UART_SetConfig+0x270>
 80033c0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033c4:	d00c      	beq.n	80033e0 <UART_SetConfig+0x258>
 80033c6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80033ca:	d815      	bhi.n	80033f8 <UART_SetConfig+0x270>
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d003      	beq.n	80033d8 <UART_SetConfig+0x250>
 80033d0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80033d4:	d008      	beq.n	80033e8 <UART_SetConfig+0x260>
 80033d6:	e00f      	b.n	80033f8 <UART_SetConfig+0x270>
 80033d8:	2300      	movs	r3, #0
 80033da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033de:	e052      	b.n	8003486 <UART_SetConfig+0x2fe>
 80033e0:	2302      	movs	r3, #2
 80033e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033e6:	e04e      	b.n	8003486 <UART_SetConfig+0x2fe>
 80033e8:	2304      	movs	r3, #4
 80033ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033ee:	e04a      	b.n	8003486 <UART_SetConfig+0x2fe>
 80033f0:	2308      	movs	r3, #8
 80033f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033f6:	e046      	b.n	8003486 <UART_SetConfig+0x2fe>
 80033f8:	2310      	movs	r3, #16
 80033fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80033fe:	e042      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003400:	697b      	ldr	r3, [r7, #20]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a17      	ldr	r2, [pc, #92]	@ (8003464 <UART_SetConfig+0x2dc>)
 8003406:	4293      	cmp	r3, r2
 8003408:	d13a      	bne.n	8003480 <UART_SetConfig+0x2f8>
 800340a:	4b18      	ldr	r3, [pc, #96]	@ (800346c <UART_SetConfig+0x2e4>)
 800340c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003410:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8003414:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003418:	d01a      	beq.n	8003450 <UART_SetConfig+0x2c8>
 800341a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800341e:	d81b      	bhi.n	8003458 <UART_SetConfig+0x2d0>
 8003420:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003424:	d00c      	beq.n	8003440 <UART_SetConfig+0x2b8>
 8003426:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800342a:	d815      	bhi.n	8003458 <UART_SetConfig+0x2d0>
 800342c:	2b00      	cmp	r3, #0
 800342e:	d003      	beq.n	8003438 <UART_SetConfig+0x2b0>
 8003430:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003434:	d008      	beq.n	8003448 <UART_SetConfig+0x2c0>
 8003436:	e00f      	b.n	8003458 <UART_SetConfig+0x2d0>
 8003438:	2300      	movs	r3, #0
 800343a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800343e:	e022      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003440:	2302      	movs	r3, #2
 8003442:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003446:	e01e      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003448:	2304      	movs	r3, #4
 800344a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800344e:	e01a      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003450:	2308      	movs	r3, #8
 8003452:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003456:	e016      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003458:	2310      	movs	r3, #16
 800345a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800345e:	e012      	b.n	8003486 <UART_SetConfig+0x2fe>
 8003460:	cfff69f3 	.word	0xcfff69f3
 8003464:	40008000 	.word	0x40008000
 8003468:	40013800 	.word	0x40013800
 800346c:	40021000 	.word	0x40021000
 8003470:	40004400 	.word	0x40004400
 8003474:	40004800 	.word	0x40004800
 8003478:	40004c00 	.word	0x40004c00
 800347c:	40005000 	.word	0x40005000
 8003480:	2310      	movs	r3, #16
 8003482:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4aae      	ldr	r2, [pc, #696]	@ (8003744 <UART_SetConfig+0x5bc>)
 800348c:	4293      	cmp	r3, r2
 800348e:	f040 8097 	bne.w	80035c0 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003492:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8003496:	2b08      	cmp	r3, #8
 8003498:	d823      	bhi.n	80034e2 <UART_SetConfig+0x35a>
 800349a:	a201      	add	r2, pc, #4	@ (adr r2, 80034a0 <UART_SetConfig+0x318>)
 800349c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034a0:	080034c5 	.word	0x080034c5
 80034a4:	080034e3 	.word	0x080034e3
 80034a8:	080034cd 	.word	0x080034cd
 80034ac:	080034e3 	.word	0x080034e3
 80034b0:	080034d3 	.word	0x080034d3
 80034b4:	080034e3 	.word	0x080034e3
 80034b8:	080034e3 	.word	0x080034e3
 80034bc:	080034e3 	.word	0x080034e3
 80034c0:	080034db 	.word	0x080034db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034c4:	f7ff fac2 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 80034c8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034ca:	e010      	b.n	80034ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80034cc:	4b9e      	ldr	r3, [pc, #632]	@ (8003748 <UART_SetConfig+0x5c0>)
 80034ce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034d0:	e00d      	b.n	80034ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80034d2:	f7ff fa4d 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80034d6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034d8:	e009      	b.n	80034ee <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034da:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80034de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80034e0:	e005      	b.n	80034ee <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80034ec:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 8130 	beq.w	8003756 <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034f6:	697b      	ldr	r3, [r7, #20]
 80034f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034fa:	4a94      	ldr	r2, [pc, #592]	@ (800374c <UART_SetConfig+0x5c4>)
 80034fc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003500:	461a      	mov	r2, r3
 8003502:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003504:	fbb3 f3f2 	udiv	r3, r3, r2
 8003508:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	685a      	ldr	r2, [r3, #4]
 800350e:	4613      	mov	r3, r2
 8003510:	005b      	lsls	r3, r3, #1
 8003512:	4413      	add	r3, r2
 8003514:	69ba      	ldr	r2, [r7, #24]
 8003516:	429a      	cmp	r2, r3
 8003518:	d305      	bcc.n	8003526 <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	685b      	ldr	r3, [r3, #4]
 800351e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003520:	69ba      	ldr	r2, [r7, #24]
 8003522:	429a      	cmp	r2, r3
 8003524:	d903      	bls.n	800352e <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 8003526:	2301      	movs	r3, #1
 8003528:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800352c:	e113      	b.n	8003756 <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800352e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003530:	2200      	movs	r2, #0
 8003532:	60bb      	str	r3, [r7, #8]
 8003534:	60fa      	str	r2, [r7, #12]
 8003536:	697b      	ldr	r3, [r7, #20]
 8003538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800353a:	4a84      	ldr	r2, [pc, #528]	@ (800374c <UART_SetConfig+0x5c4>)
 800353c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003540:	b29b      	uxth	r3, r3
 8003542:	2200      	movs	r2, #0
 8003544:	603b      	str	r3, [r7, #0]
 8003546:	607a      	str	r2, [r7, #4]
 8003548:	e9d7 2300 	ldrd	r2, r3, [r7]
 800354c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003550:	f7fc feb6 	bl	80002c0 <__aeabi_uldivmod>
 8003554:	4602      	mov	r2, r0
 8003556:	460b      	mov	r3, r1
 8003558:	4610      	mov	r0, r2
 800355a:	4619      	mov	r1, r3
 800355c:	f04f 0200 	mov.w	r2, #0
 8003560:	f04f 0300 	mov.w	r3, #0
 8003564:	020b      	lsls	r3, r1, #8
 8003566:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800356a:	0202      	lsls	r2, r0, #8
 800356c:	6979      	ldr	r1, [r7, #20]
 800356e:	6849      	ldr	r1, [r1, #4]
 8003570:	0849      	lsrs	r1, r1, #1
 8003572:	2000      	movs	r0, #0
 8003574:	460c      	mov	r4, r1
 8003576:	4605      	mov	r5, r0
 8003578:	eb12 0804 	adds.w	r8, r2, r4
 800357c:	eb43 0905 	adc.w	r9, r3, r5
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	685b      	ldr	r3, [r3, #4]
 8003584:	2200      	movs	r2, #0
 8003586:	469a      	mov	sl, r3
 8003588:	4693      	mov	fp, r2
 800358a:	4652      	mov	r2, sl
 800358c:	465b      	mov	r3, fp
 800358e:	4640      	mov	r0, r8
 8003590:	4649      	mov	r1, r9
 8003592:	f7fc fe95 	bl	80002c0 <__aeabi_uldivmod>
 8003596:	4602      	mov	r2, r0
 8003598:	460b      	mov	r3, r1
 800359a:	4613      	mov	r3, r2
 800359c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800359e:	6a3b      	ldr	r3, [r7, #32]
 80035a0:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80035a4:	d308      	bcc.n	80035b8 <UART_SetConfig+0x430>
 80035a6:	6a3b      	ldr	r3, [r7, #32]
 80035a8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035ac:	d204      	bcs.n	80035b8 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6a3a      	ldr	r2, [r7, #32]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	e0ce      	b.n	8003756 <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80035b8:	2301      	movs	r3, #1
 80035ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80035be:	e0ca      	b.n	8003756 <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	69db      	ldr	r3, [r3, #28]
 80035c4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80035c8:	d166      	bne.n	8003698 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80035ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80035ce:	2b08      	cmp	r3, #8
 80035d0:	d827      	bhi.n	8003622 <UART_SetConfig+0x49a>
 80035d2:	a201      	add	r2, pc, #4	@ (adr r2, 80035d8 <UART_SetConfig+0x450>)
 80035d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035d8:	080035fd 	.word	0x080035fd
 80035dc:	08003605 	.word	0x08003605
 80035e0:	0800360d 	.word	0x0800360d
 80035e4:	08003623 	.word	0x08003623
 80035e8:	08003613 	.word	0x08003613
 80035ec:	08003623 	.word	0x08003623
 80035f0:	08003623 	.word	0x08003623
 80035f4:	08003623 	.word	0x08003623
 80035f8:	0800361b 	.word	0x0800361b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035fc:	f7ff fa26 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 8003600:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003602:	e014      	b.n	800362e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003604:	f7ff fa38 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 8003608:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800360a:	e010      	b.n	800362e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800360c:	4b4e      	ldr	r3, [pc, #312]	@ (8003748 <UART_SetConfig+0x5c0>)
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003610:	e00d      	b.n	800362e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003612:	f7ff f9ad 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 8003616:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003618:	e009      	b.n	800362e <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800361a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800361e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003620:	e005      	b.n	800362e <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8003622:	2300      	movs	r3, #0
 8003624:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800362c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800362e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003630:	2b00      	cmp	r3, #0
 8003632:	f000 8090 	beq.w	8003756 <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003636:	697b      	ldr	r3, [r7, #20]
 8003638:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363a:	4a44      	ldr	r2, [pc, #272]	@ (800374c <UART_SetConfig+0x5c4>)
 800363c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003640:	461a      	mov	r2, r3
 8003642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003644:	fbb3 f3f2 	udiv	r3, r3, r2
 8003648:	005a      	lsls	r2, r3, #1
 800364a:	697b      	ldr	r3, [r7, #20]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	085b      	lsrs	r3, r3, #1
 8003650:	441a      	add	r2, r3
 8003652:	697b      	ldr	r3, [r7, #20]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	fbb2 f3f3 	udiv	r3, r2, r3
 800365a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365c:	6a3b      	ldr	r3, [r7, #32]
 800365e:	2b0f      	cmp	r3, #15
 8003660:	d916      	bls.n	8003690 <UART_SetConfig+0x508>
 8003662:	6a3b      	ldr	r3, [r7, #32]
 8003664:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003668:	d212      	bcs.n	8003690 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366a:	6a3b      	ldr	r3, [r7, #32]
 800366c:	b29b      	uxth	r3, r3
 800366e:	f023 030f 	bic.w	r3, r3, #15
 8003672:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003674:	6a3b      	ldr	r3, [r7, #32]
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	b29b      	uxth	r3, r3
 800367a:	f003 0307 	and.w	r3, r3, #7
 800367e:	b29a      	uxth	r2, r3
 8003680:	8bfb      	ldrh	r3, [r7, #30]
 8003682:	4313      	orrs	r3, r2
 8003684:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8003686:	697b      	ldr	r3, [r7, #20]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	8bfa      	ldrh	r2, [r7, #30]
 800368c:	60da      	str	r2, [r3, #12]
 800368e:	e062      	b.n	8003756 <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003696:	e05e      	b.n	8003756 <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003698:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800369c:	2b08      	cmp	r3, #8
 800369e:	d828      	bhi.n	80036f2 <UART_SetConfig+0x56a>
 80036a0:	a201      	add	r2, pc, #4	@ (adr r2, 80036a8 <UART_SetConfig+0x520>)
 80036a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036a6:	bf00      	nop
 80036a8:	080036cd 	.word	0x080036cd
 80036ac:	080036d5 	.word	0x080036d5
 80036b0:	080036dd 	.word	0x080036dd
 80036b4:	080036f3 	.word	0x080036f3
 80036b8:	080036e3 	.word	0x080036e3
 80036bc:	080036f3 	.word	0x080036f3
 80036c0:	080036f3 	.word	0x080036f3
 80036c4:	080036f3 	.word	0x080036f3
 80036c8:	080036eb 	.word	0x080036eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036cc:	f7ff f9be 	bl	8002a4c <HAL_RCC_GetPCLK1Freq>
 80036d0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036d2:	e014      	b.n	80036fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80036d4:	f7ff f9d0 	bl	8002a78 <HAL_RCC_GetPCLK2Freq>
 80036d8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036da:	e010      	b.n	80036fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036dc:	4b1a      	ldr	r3, [pc, #104]	@ (8003748 <UART_SetConfig+0x5c0>)
 80036de:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036e0:	e00d      	b.n	80036fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e2:	f7ff f945 	bl	8002970 <HAL_RCC_GetSysClockFreq>
 80036e6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80036e8:	e009      	b.n	80036fe <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80036f0:	e005      	b.n	80036fe <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80036f2:	2300      	movs	r3, #0
 80036f4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80036fc:	bf00      	nop
    }

    if (pclk != 0U)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	2b00      	cmp	r3, #0
 8003702:	d028      	beq.n	8003756 <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003708:	4a10      	ldr	r2, [pc, #64]	@ (800374c <UART_SetConfig+0x5c4>)
 800370a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800370e:	461a      	mov	r2, r3
 8003710:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003712:	fbb3 f2f2 	udiv	r2, r3, r2
 8003716:	697b      	ldr	r3, [r7, #20]
 8003718:	685b      	ldr	r3, [r3, #4]
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	441a      	add	r2, r3
 800371e:	697b      	ldr	r3, [r7, #20]
 8003720:	685b      	ldr	r3, [r3, #4]
 8003722:	fbb2 f3f3 	udiv	r3, r2, r3
 8003726:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003728:	6a3b      	ldr	r3, [r7, #32]
 800372a:	2b0f      	cmp	r3, #15
 800372c:	d910      	bls.n	8003750 <UART_SetConfig+0x5c8>
 800372e:	6a3b      	ldr	r3, [r7, #32]
 8003730:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003734:	d20c      	bcs.n	8003750 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	b29a      	uxth	r2, r3
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	60da      	str	r2, [r3, #12]
 8003740:	e009      	b.n	8003756 <UART_SetConfig+0x5ce>
 8003742:	bf00      	nop
 8003744:	40008000 	.word	0x40008000
 8003748:	00f42400 	.word	0x00f42400
 800374c:	08004f78 	.word	0x08004f78
      }
      else
      {
        ret = HAL_ERROR;
 8003750:	2301      	movs	r3, #1
 8003752:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	2201      	movs	r2, #1
 800375a:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 800375e:	697b      	ldr	r3, [r7, #20]
 8003760:	2201      	movs	r2, #1
 8003762:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003766:	697b      	ldr	r3, [r7, #20]
 8003768:	2200      	movs	r2, #0
 800376a:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	2200      	movs	r2, #0
 8003770:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003772:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8003776:	4618      	mov	r0, r3
 8003778:	3730      	adds	r7, #48	@ 0x30
 800377a:	46bd      	mov	sp, r7
 800377c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08003780 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	f003 0308 	and.w	r3, r3, #8
 8003790:	2b00      	cmp	r3, #0
 8003792:	d00a      	beq.n	80037aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	430a      	orrs	r2, r1
 80037a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d00a      	beq.n	80037cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	685b      	ldr	r3, [r3, #4]
 80037bc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	430a      	orrs	r2, r1
 80037ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037d0:	f003 0302 	and.w	r3, r3, #2
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00a      	beq.n	80037ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	685b      	ldr	r3, [r3, #4]
 80037de:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	430a      	orrs	r2, r1
 80037ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f2:	f003 0304 	and.w	r3, r3, #4
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d00a      	beq.n	8003810 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	430a      	orrs	r2, r1
 800380e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003814:	f003 0310 	and.w	r3, r3, #16
 8003818:	2b00      	cmp	r3, #0
 800381a:	d00a      	beq.n	8003832 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	430a      	orrs	r2, r1
 8003830:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003836:	f003 0320 	and.w	r3, r3, #32
 800383a:	2b00      	cmp	r3, #0
 800383c:	d00a      	beq.n	8003854 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	430a      	orrs	r2, r1
 8003852:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003858:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800385c:	2b00      	cmp	r3, #0
 800385e:	d01a      	beq.n	8003896 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	430a      	orrs	r2, r1
 8003874:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800387a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800387e:	d10a      	bne.n	8003896 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685b      	ldr	r3, [r3, #4]
 8003886:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	430a      	orrs	r2, r1
 8003894:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800389a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00a      	beq.n	80038b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	430a      	orrs	r2, r1
 80038b6:	605a      	str	r2, [r3, #4]
  }
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b098      	sub	sp, #96	@ 0x60
 80038c8:	af02      	add	r7, sp, #8
 80038ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2200      	movs	r2, #0
 80038d0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80038d4:	f7fd fab6 	bl	8000e44 <HAL_GetTick>
 80038d8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0308 	and.w	r3, r3, #8
 80038e4:	2b08      	cmp	r3, #8
 80038e6:	d12f      	bne.n	8003948 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80038e8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80038ec:	9300      	str	r3, [sp, #0]
 80038ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80038f0:	2200      	movs	r2, #0
 80038f2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80038f6:	6878      	ldr	r0, [r7, #4]
 80038f8:	f000 f88e 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d022      	beq.n	8003948 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003908:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800390a:	e853 3f00 	ldrex	r3, [r3]
 800390e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003910:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003912:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003916:	653b      	str	r3, [r7, #80]	@ 0x50
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	461a      	mov	r2, r3
 800391e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003920:	647b      	str	r3, [r7, #68]	@ 0x44
 8003922:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003924:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003926:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003928:	e841 2300 	strex	r3, r2, [r1]
 800392c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800392e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003930:	2b00      	cmp	r3, #0
 8003932:	d1e6      	bne.n	8003902 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2220      	movs	r2, #32
 8003938:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003944:	2303      	movs	r3, #3
 8003946:	e063      	b.n	8003a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	2b04      	cmp	r3, #4
 8003954:	d149      	bne.n	80039ea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003956:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800395a:	9300      	str	r3, [sp, #0]
 800395c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800395e:	2200      	movs	r2, #0
 8003960:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8003964:	6878      	ldr	r0, [r7, #4]
 8003966:	f000 f857 	bl	8003a18 <UART_WaitOnFlagUntilTimeout>
 800396a:	4603      	mov	r3, r0
 800396c:	2b00      	cmp	r3, #0
 800396e:	d03c      	beq.n	80039ea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	e853 3f00 	ldrex	r3, [r3]
 800397c:	623b      	str	r3, [r7, #32]
   return(result);
 800397e:	6a3b      	ldr	r3, [r7, #32]
 8003980:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003984:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	461a      	mov	r2, r3
 800398c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800398e:	633b      	str	r3, [r7, #48]	@ 0x30
 8003990:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003992:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003994:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003996:	e841 2300 	strex	r3, r2, [r1]
 800399a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800399c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d1e6      	bne.n	8003970 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	3308      	adds	r3, #8
 80039a8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	e853 3f00 	ldrex	r3, [r3]
 80039b0:	60fb      	str	r3, [r7, #12]
   return(result);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f023 0301 	bic.w	r3, r3, #1
 80039b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	3308      	adds	r3, #8
 80039c0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80039c2:	61fa      	str	r2, [r7, #28]
 80039c4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c6:	69b9      	ldr	r1, [r7, #24]
 80039c8:	69fa      	ldr	r2, [r7, #28]
 80039ca:	e841 2300 	strex	r3, r2, [r1]
 80039ce:	617b      	str	r3, [r7, #20]
   return(result);
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d1e5      	bne.n	80039a2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2220      	movs	r2, #32
 80039da:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80039e6:	2303      	movs	r3, #3
 80039e8:	e012      	b.n	8003a10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2220      	movs	r2, #32
 80039ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	2220      	movs	r2, #32
 80039f6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	2200      	movs	r2, #0
 80039fe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	2200      	movs	r2, #0
 8003a04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a0e:	2300      	movs	r3, #0
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3758      	adds	r7, #88	@ 0x58
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	60f8      	str	r0, [r7, #12]
 8003a20:	60b9      	str	r1, [r7, #8]
 8003a22:	603b      	str	r3, [r7, #0]
 8003a24:	4613      	mov	r3, r2
 8003a26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a28:	e04f      	b.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a2a:	69bb      	ldr	r3, [r7, #24]
 8003a2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a30:	d04b      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a32:	f7fd fa07 	bl	8000e44 <HAL_GetTick>
 8003a36:	4602      	mov	r2, r0
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	1ad3      	subs	r3, r2, r3
 8003a3c:	69ba      	ldr	r2, [r7, #24]
 8003a3e:	429a      	cmp	r2, r3
 8003a40:	d302      	bcc.n	8003a48 <UART_WaitOnFlagUntilTimeout+0x30>
 8003a42:	69bb      	ldr	r3, [r7, #24]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003a48:	2303      	movs	r3, #3
 8003a4a:	e04e      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f003 0304 	and.w	r3, r3, #4
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d037      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a5a:	68bb      	ldr	r3, [r7, #8]
 8003a5c:	2b80      	cmp	r3, #128	@ 0x80
 8003a5e:	d034      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
 8003a60:	68bb      	ldr	r3, [r7, #8]
 8003a62:	2b40      	cmp	r3, #64	@ 0x40
 8003a64:	d031      	beq.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f003 0308 	and.w	r3, r3, #8
 8003a70:	2b08      	cmp	r3, #8
 8003a72:	d110      	bne.n	8003a96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	2208      	movs	r2, #8
 8003a7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003a7c:	68f8      	ldr	r0, [r7, #12]
 8003a7e:	f000 f838 	bl	8003af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2208      	movs	r2, #8
 8003a86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8003a92:	2301      	movs	r3, #1
 8003a94:	e029      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	69db      	ldr	r3, [r3, #28]
 8003a9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003aa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003aa4:	d111      	bne.n	8003aca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003aae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f000 f81e 	bl	8003af2 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	2220      	movs	r2, #32
 8003aba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	e00f      	b.n	8003aea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	68bb      	ldr	r3, [r7, #8]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	68ba      	ldr	r2, [r7, #8]
 8003ad6:	429a      	cmp	r2, r3
 8003ad8:	bf0c      	ite	eq
 8003ada:	2301      	moveq	r3, #1
 8003adc:	2300      	movne	r3, #0
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	461a      	mov	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	429a      	cmp	r2, r3
 8003ae6:	d0a0      	beq.n	8003a2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3710      	adds	r7, #16
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}

08003af2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b095      	sub	sp, #84	@ 0x54
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b00:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003b02:	e853 3f00 	ldrex	r3, [r3]
 8003b06:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003b08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b0a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003b0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	461a      	mov	r2, r3
 8003b16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003b18:	643b      	str	r3, [r7, #64]	@ 0x40
 8003b1a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b1c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003b1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003b20:	e841 2300 	strex	r3, r2, [r1]
 8003b24:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003b26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d1e6      	bne.n	8003afa <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	3308      	adds	r3, #8
 8003b32:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b34:	6a3b      	ldr	r3, [r7, #32]
 8003b36:	e853 3f00 	ldrex	r3, [r3]
 8003b3a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b42:	f023 0301 	bic.w	r3, r3, #1
 8003b46:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	3308      	adds	r3, #8
 8003b4e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003b50:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003b52:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b54:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b56:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003b58:	e841 2300 	strex	r3, r2, [r1]
 8003b5c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d1e3      	bne.n	8003b2c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d118      	bne.n	8003b9e <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	e853 3f00 	ldrex	r3, [r3]
 8003b78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f023 0310 	bic.w	r3, r3, #16
 8003b80:	647b      	str	r3, [r7, #68]	@ 0x44
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	461a      	mov	r2, r3
 8003b88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003b8a:	61bb      	str	r3, [r7, #24]
 8003b8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b8e:	6979      	ldr	r1, [r7, #20]
 8003b90:	69ba      	ldr	r2, [r7, #24]
 8003b92:	e841 2300 	strex	r3, r2, [r1]
 8003b96:	613b      	str	r3, [r7, #16]
   return(result);
 8003b98:	693b      	ldr	r3, [r7, #16]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d1e6      	bne.n	8003b6c <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2220      	movs	r2, #32
 8003ba2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	2200      	movs	r2, #0
 8003baa:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8003bb2:	bf00      	nop
 8003bb4:	3754      	adds	r7, #84	@ 0x54
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbc:	4770      	bx	lr

08003bbe <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8003bbe:	b480      	push	{r7}
 8003bc0:	b085      	sub	sp, #20
 8003bc2:	af00      	add	r7, sp, #0
 8003bc4:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <HAL_UARTEx_DisableFifoMode+0x16>
 8003bd0:	2302      	movs	r3, #2
 8003bd2:	e027      	b.n	8003c24 <HAL_UARTEx_DisableFifoMode+0x66>
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2201      	movs	r2, #1
 8003bd8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2224      	movs	r2, #36	@ 0x24
 8003be0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	681a      	ldr	r2, [r3, #0]
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f022 0201 	bic.w	r2, r2, #1
 8003bfa:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003c02:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2200      	movs	r2, #0
 8003c08:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	68fa      	ldr	r2, [r7, #12]
 8003c10:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2220      	movs	r2, #32
 8003c16:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003c22:	2300      	movs	r3, #0
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	3714      	adds	r7, #20
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003c40:	2b01      	cmp	r3, #1
 8003c42:	d101      	bne.n	8003c48 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003c44:	2302      	movs	r3, #2
 8003c46:	e02d      	b.n	8003ca4 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	@ 0x24
 8003c54:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f022 0201 	bic.w	r2, r2, #1
 8003c6e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	689b      	ldr	r3, [r3, #8]
 8003c76:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003c84:	6878      	ldr	r0, [r7, #4]
 8003c86:	f000 f84f 	bl	8003d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68fa      	ldr	r2, [r7, #12]
 8003c90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	2220      	movs	r2, #32
 8003c96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3710      	adds	r7, #16
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	bd80      	pop	{r7, pc}

08003cac <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b084      	sub	sp, #16
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003cbc:	2b01      	cmp	r3, #1
 8003cbe:	d101      	bne.n	8003cc4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003cc0:	2302      	movs	r3, #2
 8003cc2:	e02d      	b.n	8003d20 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2224      	movs	r2, #36	@ 0x24
 8003cd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0201 	bic.w	r2, r2, #1
 8003cea:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	683a      	ldr	r2, [r7, #0]
 8003cfc:	430a      	orrs	r2, r1
 8003cfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003d00:	6878      	ldr	r0, [r7, #4]
 8003d02:	f000 f811 	bl	8003d28 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	68fa      	ldr	r2, [r7, #12]
 8003d0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2220      	movs	r2, #32
 8003d12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3710      	adds	r7, #16
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bd80      	pop	{r7, pc}

08003d28 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b085      	sub	sp, #20
 8003d2c:	af00      	add	r7, sp, #0
 8003d2e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d108      	bne.n	8003d4a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2201      	movs	r2, #1
 8003d3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2201      	movs	r2, #1
 8003d44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003d48:	e031      	b.n	8003dae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003d4a:	2308      	movs	r3, #8
 8003d4c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003d4e:	2308      	movs	r3, #8
 8003d50:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	689b      	ldr	r3, [r3, #8]
 8003d58:	0e5b      	lsrs	r3, r3, #25
 8003d5a:	b2db      	uxtb	r3, r3
 8003d5c:	f003 0307 	and.w	r3, r3, #7
 8003d60:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	0f5b      	lsrs	r3, r3, #29
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d72:	7bbb      	ldrb	r3, [r7, #14]
 8003d74:	7b3a      	ldrb	r2, [r7, #12]
 8003d76:	4911      	ldr	r1, [pc, #68]	@ (8003dbc <UARTEx_SetNbDataToProcess+0x94>)
 8003d78:	5c8a      	ldrb	r2, [r1, r2]
 8003d7a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003d7e:	7b3a      	ldrb	r2, [r7, #12]
 8003d80:	490f      	ldr	r1, [pc, #60]	@ (8003dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8003d82:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003d84:	fb93 f3f2 	sdiv	r3, r3, r2
 8003d88:	b29a      	uxth	r2, r3
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003d90:	7bfb      	ldrb	r3, [r7, #15]
 8003d92:	7b7a      	ldrb	r2, [r7, #13]
 8003d94:	4909      	ldr	r1, [pc, #36]	@ (8003dbc <UARTEx_SetNbDataToProcess+0x94>)
 8003d96:	5c8a      	ldrb	r2, [r1, r2]
 8003d98:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003d9c:	7b7a      	ldrb	r2, [r7, #13]
 8003d9e:	4908      	ldr	r1, [pc, #32]	@ (8003dc0 <UARTEx_SetNbDataToProcess+0x98>)
 8003da0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003da2:	fb93 f3f2 	sdiv	r3, r3, r2
 8003da6:	b29a      	uxth	r2, r3
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003dae:	bf00      	nop
 8003db0:	3714      	adds	r7, #20
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	08004f90 	.word	0x08004f90
 8003dc0:	08004f98 	.word	0x08004f98

08003dc4 <std>:
 8003dc4:	2300      	movs	r3, #0
 8003dc6:	b510      	push	{r4, lr}
 8003dc8:	4604      	mov	r4, r0
 8003dca:	e9c0 3300 	strd	r3, r3, [r0]
 8003dce:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dd2:	6083      	str	r3, [r0, #8]
 8003dd4:	8181      	strh	r1, [r0, #12]
 8003dd6:	6643      	str	r3, [r0, #100]	@ 0x64
 8003dd8:	81c2      	strh	r2, [r0, #14]
 8003dda:	6183      	str	r3, [r0, #24]
 8003ddc:	4619      	mov	r1, r3
 8003dde:	2208      	movs	r2, #8
 8003de0:	305c      	adds	r0, #92	@ 0x5c
 8003de2:	f000 fab5 	bl	8004350 <memset>
 8003de6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e1c <std+0x58>)
 8003de8:	6263      	str	r3, [r4, #36]	@ 0x24
 8003dea:	4b0d      	ldr	r3, [pc, #52]	@ (8003e20 <std+0x5c>)
 8003dec:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003dee:	4b0d      	ldr	r3, [pc, #52]	@ (8003e24 <std+0x60>)
 8003df0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003df2:	4b0d      	ldr	r3, [pc, #52]	@ (8003e28 <std+0x64>)
 8003df4:	6323      	str	r3, [r4, #48]	@ 0x30
 8003df6:	4b0d      	ldr	r3, [pc, #52]	@ (8003e2c <std+0x68>)
 8003df8:	6224      	str	r4, [r4, #32]
 8003dfa:	429c      	cmp	r4, r3
 8003dfc:	d006      	beq.n	8003e0c <std+0x48>
 8003dfe:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003e02:	4294      	cmp	r4, r2
 8003e04:	d002      	beq.n	8003e0c <std+0x48>
 8003e06:	33d0      	adds	r3, #208	@ 0xd0
 8003e08:	429c      	cmp	r4, r3
 8003e0a:	d105      	bne.n	8003e18 <std+0x54>
 8003e0c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003e10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e14:	f000 bb14 	b.w	8004440 <__retarget_lock_init_recursive>
 8003e18:	bd10      	pop	{r4, pc}
 8003e1a:	bf00      	nop
 8003e1c:	080041a1 	.word	0x080041a1
 8003e20:	080041c3 	.word	0x080041c3
 8003e24:	080041fb 	.word	0x080041fb
 8003e28:	0800421f 	.word	0x0800421f
 8003e2c:	200001dc 	.word	0x200001dc

08003e30 <stdio_exit_handler>:
 8003e30:	4a02      	ldr	r2, [pc, #8]	@ (8003e3c <stdio_exit_handler+0xc>)
 8003e32:	4903      	ldr	r1, [pc, #12]	@ (8003e40 <stdio_exit_handler+0x10>)
 8003e34:	4803      	ldr	r0, [pc, #12]	@ (8003e44 <stdio_exit_handler+0x14>)
 8003e36:	f000 b869 	b.w	8003f0c <_fwalk_sglue>
 8003e3a:	bf00      	nop
 8003e3c:	2000000c 	.word	0x2000000c
 8003e40:	08004cf1 	.word	0x08004cf1
 8003e44:	2000001c 	.word	0x2000001c

08003e48 <cleanup_stdio>:
 8003e48:	6841      	ldr	r1, [r0, #4]
 8003e4a:	4b0c      	ldr	r3, [pc, #48]	@ (8003e7c <cleanup_stdio+0x34>)
 8003e4c:	4299      	cmp	r1, r3
 8003e4e:	b510      	push	{r4, lr}
 8003e50:	4604      	mov	r4, r0
 8003e52:	d001      	beq.n	8003e58 <cleanup_stdio+0x10>
 8003e54:	f000 ff4c 	bl	8004cf0 <_fflush_r>
 8003e58:	68a1      	ldr	r1, [r4, #8]
 8003e5a:	4b09      	ldr	r3, [pc, #36]	@ (8003e80 <cleanup_stdio+0x38>)
 8003e5c:	4299      	cmp	r1, r3
 8003e5e:	d002      	beq.n	8003e66 <cleanup_stdio+0x1e>
 8003e60:	4620      	mov	r0, r4
 8003e62:	f000 ff45 	bl	8004cf0 <_fflush_r>
 8003e66:	68e1      	ldr	r1, [r4, #12]
 8003e68:	4b06      	ldr	r3, [pc, #24]	@ (8003e84 <cleanup_stdio+0x3c>)
 8003e6a:	4299      	cmp	r1, r3
 8003e6c:	d004      	beq.n	8003e78 <cleanup_stdio+0x30>
 8003e6e:	4620      	mov	r0, r4
 8003e70:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003e74:	f000 bf3c 	b.w	8004cf0 <_fflush_r>
 8003e78:	bd10      	pop	{r4, pc}
 8003e7a:	bf00      	nop
 8003e7c:	200001dc 	.word	0x200001dc
 8003e80:	20000244 	.word	0x20000244
 8003e84:	200002ac 	.word	0x200002ac

08003e88 <global_stdio_init.part.0>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	@ (8003eb8 <global_stdio_init.part.0+0x30>)
 8003e8c:	4c0b      	ldr	r4, [pc, #44]	@ (8003ebc <global_stdio_init.part.0+0x34>)
 8003e8e:	4a0c      	ldr	r2, [pc, #48]	@ (8003ec0 <global_stdio_init.part.0+0x38>)
 8003e90:	601a      	str	r2, [r3, #0]
 8003e92:	4620      	mov	r0, r4
 8003e94:	2200      	movs	r2, #0
 8003e96:	2104      	movs	r1, #4
 8003e98:	f7ff ff94 	bl	8003dc4 <std>
 8003e9c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003ea0:	2201      	movs	r2, #1
 8003ea2:	2109      	movs	r1, #9
 8003ea4:	f7ff ff8e 	bl	8003dc4 <std>
 8003ea8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003eac:	2202      	movs	r2, #2
 8003eae:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eb2:	2112      	movs	r1, #18
 8003eb4:	f7ff bf86 	b.w	8003dc4 <std>
 8003eb8:	20000314 	.word	0x20000314
 8003ebc:	200001dc 	.word	0x200001dc
 8003ec0:	08003e31 	.word	0x08003e31

08003ec4 <__sfp_lock_acquire>:
 8003ec4:	4801      	ldr	r0, [pc, #4]	@ (8003ecc <__sfp_lock_acquire+0x8>)
 8003ec6:	f000 babc 	b.w	8004442 <__retarget_lock_acquire_recursive>
 8003eca:	bf00      	nop
 8003ecc:	2000031d 	.word	0x2000031d

08003ed0 <__sfp_lock_release>:
 8003ed0:	4801      	ldr	r0, [pc, #4]	@ (8003ed8 <__sfp_lock_release+0x8>)
 8003ed2:	f000 bab7 	b.w	8004444 <__retarget_lock_release_recursive>
 8003ed6:	bf00      	nop
 8003ed8:	2000031d 	.word	0x2000031d

08003edc <__sinit>:
 8003edc:	b510      	push	{r4, lr}
 8003ede:	4604      	mov	r4, r0
 8003ee0:	f7ff fff0 	bl	8003ec4 <__sfp_lock_acquire>
 8003ee4:	6a23      	ldr	r3, [r4, #32]
 8003ee6:	b11b      	cbz	r3, 8003ef0 <__sinit+0x14>
 8003ee8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003eec:	f7ff bff0 	b.w	8003ed0 <__sfp_lock_release>
 8003ef0:	4b04      	ldr	r3, [pc, #16]	@ (8003f04 <__sinit+0x28>)
 8003ef2:	6223      	str	r3, [r4, #32]
 8003ef4:	4b04      	ldr	r3, [pc, #16]	@ (8003f08 <__sinit+0x2c>)
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d1f5      	bne.n	8003ee8 <__sinit+0xc>
 8003efc:	f7ff ffc4 	bl	8003e88 <global_stdio_init.part.0>
 8003f00:	e7f2      	b.n	8003ee8 <__sinit+0xc>
 8003f02:	bf00      	nop
 8003f04:	08003e49 	.word	0x08003e49
 8003f08:	20000314 	.word	0x20000314

08003f0c <_fwalk_sglue>:
 8003f0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f10:	4607      	mov	r7, r0
 8003f12:	4688      	mov	r8, r1
 8003f14:	4614      	mov	r4, r2
 8003f16:	2600      	movs	r6, #0
 8003f18:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003f1c:	f1b9 0901 	subs.w	r9, r9, #1
 8003f20:	d505      	bpl.n	8003f2e <_fwalk_sglue+0x22>
 8003f22:	6824      	ldr	r4, [r4, #0]
 8003f24:	2c00      	cmp	r4, #0
 8003f26:	d1f7      	bne.n	8003f18 <_fwalk_sglue+0xc>
 8003f28:	4630      	mov	r0, r6
 8003f2a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f2e:	89ab      	ldrh	r3, [r5, #12]
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d907      	bls.n	8003f44 <_fwalk_sglue+0x38>
 8003f34:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f38:	3301      	adds	r3, #1
 8003f3a:	d003      	beq.n	8003f44 <_fwalk_sglue+0x38>
 8003f3c:	4629      	mov	r1, r5
 8003f3e:	4638      	mov	r0, r7
 8003f40:	47c0      	blx	r8
 8003f42:	4306      	orrs	r6, r0
 8003f44:	3568      	adds	r5, #104	@ 0x68
 8003f46:	e7e9      	b.n	8003f1c <_fwalk_sglue+0x10>

08003f48 <iprintf>:
 8003f48:	b40f      	push	{r0, r1, r2, r3}
 8003f4a:	b507      	push	{r0, r1, r2, lr}
 8003f4c:	4906      	ldr	r1, [pc, #24]	@ (8003f68 <iprintf+0x20>)
 8003f4e:	ab04      	add	r3, sp, #16
 8003f50:	6808      	ldr	r0, [r1, #0]
 8003f52:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f56:	6881      	ldr	r1, [r0, #8]
 8003f58:	9301      	str	r3, [sp, #4]
 8003f5a:	f000 fb9f 	bl	800469c <_vfiprintf_r>
 8003f5e:	b003      	add	sp, #12
 8003f60:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f64:	b004      	add	sp, #16
 8003f66:	4770      	bx	lr
 8003f68:	20000018 	.word	0x20000018

08003f6c <_puts_r>:
 8003f6c:	6a03      	ldr	r3, [r0, #32]
 8003f6e:	b570      	push	{r4, r5, r6, lr}
 8003f70:	6884      	ldr	r4, [r0, #8]
 8003f72:	4605      	mov	r5, r0
 8003f74:	460e      	mov	r6, r1
 8003f76:	b90b      	cbnz	r3, 8003f7c <_puts_r+0x10>
 8003f78:	f7ff ffb0 	bl	8003edc <__sinit>
 8003f7c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003f7e:	07db      	lsls	r3, r3, #31
 8003f80:	d405      	bmi.n	8003f8e <_puts_r+0x22>
 8003f82:	89a3      	ldrh	r3, [r4, #12]
 8003f84:	0598      	lsls	r0, r3, #22
 8003f86:	d402      	bmi.n	8003f8e <_puts_r+0x22>
 8003f88:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003f8a:	f000 fa5a 	bl	8004442 <__retarget_lock_acquire_recursive>
 8003f8e:	89a3      	ldrh	r3, [r4, #12]
 8003f90:	0719      	lsls	r1, r3, #28
 8003f92:	d502      	bpl.n	8003f9a <_puts_r+0x2e>
 8003f94:	6923      	ldr	r3, [r4, #16]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d135      	bne.n	8004006 <_puts_r+0x9a>
 8003f9a:	4621      	mov	r1, r4
 8003f9c:	4628      	mov	r0, r5
 8003f9e:	f000 f981 	bl	80042a4 <__swsetup_r>
 8003fa2:	b380      	cbz	r0, 8004006 <_puts_r+0x9a>
 8003fa4:	f04f 35ff 	mov.w	r5, #4294967295
 8003fa8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003faa:	07da      	lsls	r2, r3, #31
 8003fac:	d405      	bmi.n	8003fba <_puts_r+0x4e>
 8003fae:	89a3      	ldrh	r3, [r4, #12]
 8003fb0:	059b      	lsls	r3, r3, #22
 8003fb2:	d402      	bmi.n	8003fba <_puts_r+0x4e>
 8003fb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003fb6:	f000 fa45 	bl	8004444 <__retarget_lock_release_recursive>
 8003fba:	4628      	mov	r0, r5
 8003fbc:	bd70      	pop	{r4, r5, r6, pc}
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	da04      	bge.n	8003fcc <_puts_r+0x60>
 8003fc2:	69a2      	ldr	r2, [r4, #24]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	dc17      	bgt.n	8003ff8 <_puts_r+0x8c>
 8003fc8:	290a      	cmp	r1, #10
 8003fca:	d015      	beq.n	8003ff8 <_puts_r+0x8c>
 8003fcc:	6823      	ldr	r3, [r4, #0]
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	6022      	str	r2, [r4, #0]
 8003fd2:	7019      	strb	r1, [r3, #0]
 8003fd4:	68a3      	ldr	r3, [r4, #8]
 8003fd6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	60a3      	str	r3, [r4, #8]
 8003fde:	2900      	cmp	r1, #0
 8003fe0:	d1ed      	bne.n	8003fbe <_puts_r+0x52>
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	da11      	bge.n	800400a <_puts_r+0x9e>
 8003fe6:	4622      	mov	r2, r4
 8003fe8:	210a      	movs	r1, #10
 8003fea:	4628      	mov	r0, r5
 8003fec:	f000 f91b 	bl	8004226 <__swbuf_r>
 8003ff0:	3001      	adds	r0, #1
 8003ff2:	d0d7      	beq.n	8003fa4 <_puts_r+0x38>
 8003ff4:	250a      	movs	r5, #10
 8003ff6:	e7d7      	b.n	8003fa8 <_puts_r+0x3c>
 8003ff8:	4622      	mov	r2, r4
 8003ffa:	4628      	mov	r0, r5
 8003ffc:	f000 f913 	bl	8004226 <__swbuf_r>
 8004000:	3001      	adds	r0, #1
 8004002:	d1e7      	bne.n	8003fd4 <_puts_r+0x68>
 8004004:	e7ce      	b.n	8003fa4 <_puts_r+0x38>
 8004006:	3e01      	subs	r6, #1
 8004008:	e7e4      	b.n	8003fd4 <_puts_r+0x68>
 800400a:	6823      	ldr	r3, [r4, #0]
 800400c:	1c5a      	adds	r2, r3, #1
 800400e:	6022      	str	r2, [r4, #0]
 8004010:	220a      	movs	r2, #10
 8004012:	701a      	strb	r2, [r3, #0]
 8004014:	e7ee      	b.n	8003ff4 <_puts_r+0x88>
	...

08004018 <puts>:
 8004018:	4b02      	ldr	r3, [pc, #8]	@ (8004024 <puts+0xc>)
 800401a:	4601      	mov	r1, r0
 800401c:	6818      	ldr	r0, [r3, #0]
 800401e:	f7ff bfa5 	b.w	8003f6c <_puts_r>
 8004022:	bf00      	nop
 8004024:	20000018 	.word	0x20000018

08004028 <setbuf>:
 8004028:	fab1 f281 	clz	r2, r1
 800402c:	0952      	lsrs	r2, r2, #5
 800402e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004032:	0052      	lsls	r2, r2, #1
 8004034:	f000 b800 	b.w	8004038 <setvbuf>

08004038 <setvbuf>:
 8004038:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800403c:	461d      	mov	r5, r3
 800403e:	4b57      	ldr	r3, [pc, #348]	@ (800419c <setvbuf+0x164>)
 8004040:	681f      	ldr	r7, [r3, #0]
 8004042:	4604      	mov	r4, r0
 8004044:	460e      	mov	r6, r1
 8004046:	4690      	mov	r8, r2
 8004048:	b127      	cbz	r7, 8004054 <setvbuf+0x1c>
 800404a:	6a3b      	ldr	r3, [r7, #32]
 800404c:	b913      	cbnz	r3, 8004054 <setvbuf+0x1c>
 800404e:	4638      	mov	r0, r7
 8004050:	f7ff ff44 	bl	8003edc <__sinit>
 8004054:	f1b8 0f02 	cmp.w	r8, #2
 8004058:	d006      	beq.n	8004068 <setvbuf+0x30>
 800405a:	f1b8 0f01 	cmp.w	r8, #1
 800405e:	f200 809a 	bhi.w	8004196 <setvbuf+0x15e>
 8004062:	2d00      	cmp	r5, #0
 8004064:	f2c0 8097 	blt.w	8004196 <setvbuf+0x15e>
 8004068:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800406a:	07d9      	lsls	r1, r3, #31
 800406c:	d405      	bmi.n	800407a <setvbuf+0x42>
 800406e:	89a3      	ldrh	r3, [r4, #12]
 8004070:	059a      	lsls	r2, r3, #22
 8004072:	d402      	bmi.n	800407a <setvbuf+0x42>
 8004074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004076:	f000 f9e4 	bl	8004442 <__retarget_lock_acquire_recursive>
 800407a:	4621      	mov	r1, r4
 800407c:	4638      	mov	r0, r7
 800407e:	f000 fe37 	bl	8004cf0 <_fflush_r>
 8004082:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004084:	b141      	cbz	r1, 8004098 <setvbuf+0x60>
 8004086:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800408a:	4299      	cmp	r1, r3
 800408c:	d002      	beq.n	8004094 <setvbuf+0x5c>
 800408e:	4638      	mov	r0, r7
 8004090:	f000 f9da 	bl	8004448 <_free_r>
 8004094:	2300      	movs	r3, #0
 8004096:	6363      	str	r3, [r4, #52]	@ 0x34
 8004098:	2300      	movs	r3, #0
 800409a:	61a3      	str	r3, [r4, #24]
 800409c:	6063      	str	r3, [r4, #4]
 800409e:	89a3      	ldrh	r3, [r4, #12]
 80040a0:	061b      	lsls	r3, r3, #24
 80040a2:	d503      	bpl.n	80040ac <setvbuf+0x74>
 80040a4:	6921      	ldr	r1, [r4, #16]
 80040a6:	4638      	mov	r0, r7
 80040a8:	f000 f9ce 	bl	8004448 <_free_r>
 80040ac:	89a3      	ldrh	r3, [r4, #12]
 80040ae:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80040b2:	f023 0303 	bic.w	r3, r3, #3
 80040b6:	f1b8 0f02 	cmp.w	r8, #2
 80040ba:	81a3      	strh	r3, [r4, #12]
 80040bc:	d061      	beq.n	8004182 <setvbuf+0x14a>
 80040be:	ab01      	add	r3, sp, #4
 80040c0:	466a      	mov	r2, sp
 80040c2:	4621      	mov	r1, r4
 80040c4:	4638      	mov	r0, r7
 80040c6:	f000 fe3b 	bl	8004d40 <__swhatbuf_r>
 80040ca:	89a3      	ldrh	r3, [r4, #12]
 80040cc:	4318      	orrs	r0, r3
 80040ce:	81a0      	strh	r0, [r4, #12]
 80040d0:	bb2d      	cbnz	r5, 800411e <setvbuf+0xe6>
 80040d2:	9d00      	ldr	r5, [sp, #0]
 80040d4:	4628      	mov	r0, r5
 80040d6:	f000 fa01 	bl	80044dc <malloc>
 80040da:	4606      	mov	r6, r0
 80040dc:	2800      	cmp	r0, #0
 80040de:	d152      	bne.n	8004186 <setvbuf+0x14e>
 80040e0:	f8dd 9000 	ldr.w	r9, [sp]
 80040e4:	45a9      	cmp	r9, r5
 80040e6:	d140      	bne.n	800416a <setvbuf+0x132>
 80040e8:	f04f 35ff 	mov.w	r5, #4294967295
 80040ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040f0:	f043 0202 	orr.w	r2, r3, #2
 80040f4:	81a2      	strh	r2, [r4, #12]
 80040f6:	2200      	movs	r2, #0
 80040f8:	60a2      	str	r2, [r4, #8]
 80040fa:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80040fe:	6022      	str	r2, [r4, #0]
 8004100:	6122      	str	r2, [r4, #16]
 8004102:	2201      	movs	r2, #1
 8004104:	6162      	str	r2, [r4, #20]
 8004106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004108:	07d6      	lsls	r6, r2, #31
 800410a:	d404      	bmi.n	8004116 <setvbuf+0xde>
 800410c:	0598      	lsls	r0, r3, #22
 800410e:	d402      	bmi.n	8004116 <setvbuf+0xde>
 8004110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004112:	f000 f997 	bl	8004444 <__retarget_lock_release_recursive>
 8004116:	4628      	mov	r0, r5
 8004118:	b003      	add	sp, #12
 800411a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800411e:	2e00      	cmp	r6, #0
 8004120:	d0d8      	beq.n	80040d4 <setvbuf+0x9c>
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	b913      	cbnz	r3, 800412c <setvbuf+0xf4>
 8004126:	4638      	mov	r0, r7
 8004128:	f7ff fed8 	bl	8003edc <__sinit>
 800412c:	f1b8 0f01 	cmp.w	r8, #1
 8004130:	bf08      	it	eq
 8004132:	89a3      	ldrheq	r3, [r4, #12]
 8004134:	6026      	str	r6, [r4, #0]
 8004136:	bf04      	itt	eq
 8004138:	f043 0301 	orreq.w	r3, r3, #1
 800413c:	81a3      	strheq	r3, [r4, #12]
 800413e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004142:	f013 0208 	ands.w	r2, r3, #8
 8004146:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800414a:	d01e      	beq.n	800418a <setvbuf+0x152>
 800414c:	07d9      	lsls	r1, r3, #31
 800414e:	bf41      	itttt	mi
 8004150:	2200      	movmi	r2, #0
 8004152:	426d      	negmi	r5, r5
 8004154:	60a2      	strmi	r2, [r4, #8]
 8004156:	61a5      	strmi	r5, [r4, #24]
 8004158:	bf58      	it	pl
 800415a:	60a5      	strpl	r5, [r4, #8]
 800415c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800415e:	07d2      	lsls	r2, r2, #31
 8004160:	d401      	bmi.n	8004166 <setvbuf+0x12e>
 8004162:	059b      	lsls	r3, r3, #22
 8004164:	d513      	bpl.n	800418e <setvbuf+0x156>
 8004166:	2500      	movs	r5, #0
 8004168:	e7d5      	b.n	8004116 <setvbuf+0xde>
 800416a:	4648      	mov	r0, r9
 800416c:	f000 f9b6 	bl	80044dc <malloc>
 8004170:	4606      	mov	r6, r0
 8004172:	2800      	cmp	r0, #0
 8004174:	d0b8      	beq.n	80040e8 <setvbuf+0xb0>
 8004176:	89a3      	ldrh	r3, [r4, #12]
 8004178:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800417c:	81a3      	strh	r3, [r4, #12]
 800417e:	464d      	mov	r5, r9
 8004180:	e7cf      	b.n	8004122 <setvbuf+0xea>
 8004182:	2500      	movs	r5, #0
 8004184:	e7b2      	b.n	80040ec <setvbuf+0xb4>
 8004186:	46a9      	mov	r9, r5
 8004188:	e7f5      	b.n	8004176 <setvbuf+0x13e>
 800418a:	60a2      	str	r2, [r4, #8]
 800418c:	e7e6      	b.n	800415c <setvbuf+0x124>
 800418e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004190:	f000 f958 	bl	8004444 <__retarget_lock_release_recursive>
 8004194:	e7e7      	b.n	8004166 <setvbuf+0x12e>
 8004196:	f04f 35ff 	mov.w	r5, #4294967295
 800419a:	e7bc      	b.n	8004116 <setvbuf+0xde>
 800419c:	20000018 	.word	0x20000018

080041a0 <__sread>:
 80041a0:	b510      	push	{r4, lr}
 80041a2:	460c      	mov	r4, r1
 80041a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041a8:	f000 f8fc 	bl	80043a4 <_read_r>
 80041ac:	2800      	cmp	r0, #0
 80041ae:	bfab      	itete	ge
 80041b0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80041b2:	89a3      	ldrhlt	r3, [r4, #12]
 80041b4:	181b      	addge	r3, r3, r0
 80041b6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80041ba:	bfac      	ite	ge
 80041bc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80041be:	81a3      	strhlt	r3, [r4, #12]
 80041c0:	bd10      	pop	{r4, pc}

080041c2 <__swrite>:
 80041c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041c6:	461f      	mov	r7, r3
 80041c8:	898b      	ldrh	r3, [r1, #12]
 80041ca:	05db      	lsls	r3, r3, #23
 80041cc:	4605      	mov	r5, r0
 80041ce:	460c      	mov	r4, r1
 80041d0:	4616      	mov	r6, r2
 80041d2:	d505      	bpl.n	80041e0 <__swrite+0x1e>
 80041d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041d8:	2302      	movs	r3, #2
 80041da:	2200      	movs	r2, #0
 80041dc:	f000 f8d0 	bl	8004380 <_lseek_r>
 80041e0:	89a3      	ldrh	r3, [r4, #12]
 80041e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80041e6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80041ea:	81a3      	strh	r3, [r4, #12]
 80041ec:	4632      	mov	r2, r6
 80041ee:	463b      	mov	r3, r7
 80041f0:	4628      	mov	r0, r5
 80041f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041f6:	f000 b8e7 	b.w	80043c8 <_write_r>

080041fa <__sseek>:
 80041fa:	b510      	push	{r4, lr}
 80041fc:	460c      	mov	r4, r1
 80041fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004202:	f000 f8bd 	bl	8004380 <_lseek_r>
 8004206:	1c43      	adds	r3, r0, #1
 8004208:	89a3      	ldrh	r3, [r4, #12]
 800420a:	bf15      	itete	ne
 800420c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800420e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004212:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8004216:	81a3      	strheq	r3, [r4, #12]
 8004218:	bf18      	it	ne
 800421a:	81a3      	strhne	r3, [r4, #12]
 800421c:	bd10      	pop	{r4, pc}

0800421e <__sclose>:
 800421e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004222:	f000 b89d 	b.w	8004360 <_close_r>

08004226 <__swbuf_r>:
 8004226:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004228:	460e      	mov	r6, r1
 800422a:	4614      	mov	r4, r2
 800422c:	4605      	mov	r5, r0
 800422e:	b118      	cbz	r0, 8004238 <__swbuf_r+0x12>
 8004230:	6a03      	ldr	r3, [r0, #32]
 8004232:	b90b      	cbnz	r3, 8004238 <__swbuf_r+0x12>
 8004234:	f7ff fe52 	bl	8003edc <__sinit>
 8004238:	69a3      	ldr	r3, [r4, #24]
 800423a:	60a3      	str	r3, [r4, #8]
 800423c:	89a3      	ldrh	r3, [r4, #12]
 800423e:	071a      	lsls	r2, r3, #28
 8004240:	d501      	bpl.n	8004246 <__swbuf_r+0x20>
 8004242:	6923      	ldr	r3, [r4, #16]
 8004244:	b943      	cbnz	r3, 8004258 <__swbuf_r+0x32>
 8004246:	4621      	mov	r1, r4
 8004248:	4628      	mov	r0, r5
 800424a:	f000 f82b 	bl	80042a4 <__swsetup_r>
 800424e:	b118      	cbz	r0, 8004258 <__swbuf_r+0x32>
 8004250:	f04f 37ff 	mov.w	r7, #4294967295
 8004254:	4638      	mov	r0, r7
 8004256:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004258:	6823      	ldr	r3, [r4, #0]
 800425a:	6922      	ldr	r2, [r4, #16]
 800425c:	1a98      	subs	r0, r3, r2
 800425e:	6963      	ldr	r3, [r4, #20]
 8004260:	b2f6      	uxtb	r6, r6
 8004262:	4283      	cmp	r3, r0
 8004264:	4637      	mov	r7, r6
 8004266:	dc05      	bgt.n	8004274 <__swbuf_r+0x4e>
 8004268:	4621      	mov	r1, r4
 800426a:	4628      	mov	r0, r5
 800426c:	f000 fd40 	bl	8004cf0 <_fflush_r>
 8004270:	2800      	cmp	r0, #0
 8004272:	d1ed      	bne.n	8004250 <__swbuf_r+0x2a>
 8004274:	68a3      	ldr	r3, [r4, #8]
 8004276:	3b01      	subs	r3, #1
 8004278:	60a3      	str	r3, [r4, #8]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	1c5a      	adds	r2, r3, #1
 800427e:	6022      	str	r2, [r4, #0]
 8004280:	701e      	strb	r6, [r3, #0]
 8004282:	6962      	ldr	r2, [r4, #20]
 8004284:	1c43      	adds	r3, r0, #1
 8004286:	429a      	cmp	r2, r3
 8004288:	d004      	beq.n	8004294 <__swbuf_r+0x6e>
 800428a:	89a3      	ldrh	r3, [r4, #12]
 800428c:	07db      	lsls	r3, r3, #31
 800428e:	d5e1      	bpl.n	8004254 <__swbuf_r+0x2e>
 8004290:	2e0a      	cmp	r6, #10
 8004292:	d1df      	bne.n	8004254 <__swbuf_r+0x2e>
 8004294:	4621      	mov	r1, r4
 8004296:	4628      	mov	r0, r5
 8004298:	f000 fd2a 	bl	8004cf0 <_fflush_r>
 800429c:	2800      	cmp	r0, #0
 800429e:	d0d9      	beq.n	8004254 <__swbuf_r+0x2e>
 80042a0:	e7d6      	b.n	8004250 <__swbuf_r+0x2a>
	...

080042a4 <__swsetup_r>:
 80042a4:	b538      	push	{r3, r4, r5, lr}
 80042a6:	4b29      	ldr	r3, [pc, #164]	@ (800434c <__swsetup_r+0xa8>)
 80042a8:	4605      	mov	r5, r0
 80042aa:	6818      	ldr	r0, [r3, #0]
 80042ac:	460c      	mov	r4, r1
 80042ae:	b118      	cbz	r0, 80042b8 <__swsetup_r+0x14>
 80042b0:	6a03      	ldr	r3, [r0, #32]
 80042b2:	b90b      	cbnz	r3, 80042b8 <__swsetup_r+0x14>
 80042b4:	f7ff fe12 	bl	8003edc <__sinit>
 80042b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042bc:	0719      	lsls	r1, r3, #28
 80042be:	d422      	bmi.n	8004306 <__swsetup_r+0x62>
 80042c0:	06da      	lsls	r2, r3, #27
 80042c2:	d407      	bmi.n	80042d4 <__swsetup_r+0x30>
 80042c4:	2209      	movs	r2, #9
 80042c6:	602a      	str	r2, [r5, #0]
 80042c8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80042cc:	81a3      	strh	r3, [r4, #12]
 80042ce:	f04f 30ff 	mov.w	r0, #4294967295
 80042d2:	e033      	b.n	800433c <__swsetup_r+0x98>
 80042d4:	0758      	lsls	r0, r3, #29
 80042d6:	d512      	bpl.n	80042fe <__swsetup_r+0x5a>
 80042d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80042da:	b141      	cbz	r1, 80042ee <__swsetup_r+0x4a>
 80042dc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80042e0:	4299      	cmp	r1, r3
 80042e2:	d002      	beq.n	80042ea <__swsetup_r+0x46>
 80042e4:	4628      	mov	r0, r5
 80042e6:	f000 f8af 	bl	8004448 <_free_r>
 80042ea:	2300      	movs	r3, #0
 80042ec:	6363      	str	r3, [r4, #52]	@ 0x34
 80042ee:	89a3      	ldrh	r3, [r4, #12]
 80042f0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042f4:	81a3      	strh	r3, [r4, #12]
 80042f6:	2300      	movs	r3, #0
 80042f8:	6063      	str	r3, [r4, #4]
 80042fa:	6923      	ldr	r3, [r4, #16]
 80042fc:	6023      	str	r3, [r4, #0]
 80042fe:	89a3      	ldrh	r3, [r4, #12]
 8004300:	f043 0308 	orr.w	r3, r3, #8
 8004304:	81a3      	strh	r3, [r4, #12]
 8004306:	6923      	ldr	r3, [r4, #16]
 8004308:	b94b      	cbnz	r3, 800431e <__swsetup_r+0x7a>
 800430a:	89a3      	ldrh	r3, [r4, #12]
 800430c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004310:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004314:	d003      	beq.n	800431e <__swsetup_r+0x7a>
 8004316:	4621      	mov	r1, r4
 8004318:	4628      	mov	r0, r5
 800431a:	f000 fd37 	bl	8004d8c <__smakebuf_r>
 800431e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004322:	f013 0201 	ands.w	r2, r3, #1
 8004326:	d00a      	beq.n	800433e <__swsetup_r+0x9a>
 8004328:	2200      	movs	r2, #0
 800432a:	60a2      	str	r2, [r4, #8]
 800432c:	6962      	ldr	r2, [r4, #20]
 800432e:	4252      	negs	r2, r2
 8004330:	61a2      	str	r2, [r4, #24]
 8004332:	6922      	ldr	r2, [r4, #16]
 8004334:	b942      	cbnz	r2, 8004348 <__swsetup_r+0xa4>
 8004336:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800433a:	d1c5      	bne.n	80042c8 <__swsetup_r+0x24>
 800433c:	bd38      	pop	{r3, r4, r5, pc}
 800433e:	0799      	lsls	r1, r3, #30
 8004340:	bf58      	it	pl
 8004342:	6962      	ldrpl	r2, [r4, #20]
 8004344:	60a2      	str	r2, [r4, #8]
 8004346:	e7f4      	b.n	8004332 <__swsetup_r+0x8e>
 8004348:	2000      	movs	r0, #0
 800434a:	e7f7      	b.n	800433c <__swsetup_r+0x98>
 800434c:	20000018 	.word	0x20000018

08004350 <memset>:
 8004350:	4402      	add	r2, r0
 8004352:	4603      	mov	r3, r0
 8004354:	4293      	cmp	r3, r2
 8004356:	d100      	bne.n	800435a <memset+0xa>
 8004358:	4770      	bx	lr
 800435a:	f803 1b01 	strb.w	r1, [r3], #1
 800435e:	e7f9      	b.n	8004354 <memset+0x4>

08004360 <_close_r>:
 8004360:	b538      	push	{r3, r4, r5, lr}
 8004362:	4d06      	ldr	r5, [pc, #24]	@ (800437c <_close_r+0x1c>)
 8004364:	2300      	movs	r3, #0
 8004366:	4604      	mov	r4, r0
 8004368:	4608      	mov	r0, r1
 800436a:	602b      	str	r3, [r5, #0]
 800436c:	f7fc fc5f 	bl	8000c2e <_close>
 8004370:	1c43      	adds	r3, r0, #1
 8004372:	d102      	bne.n	800437a <_close_r+0x1a>
 8004374:	682b      	ldr	r3, [r5, #0]
 8004376:	b103      	cbz	r3, 800437a <_close_r+0x1a>
 8004378:	6023      	str	r3, [r4, #0]
 800437a:	bd38      	pop	{r3, r4, r5, pc}
 800437c:	20000318 	.word	0x20000318

08004380 <_lseek_r>:
 8004380:	b538      	push	{r3, r4, r5, lr}
 8004382:	4d07      	ldr	r5, [pc, #28]	@ (80043a0 <_lseek_r+0x20>)
 8004384:	4604      	mov	r4, r0
 8004386:	4608      	mov	r0, r1
 8004388:	4611      	mov	r1, r2
 800438a:	2200      	movs	r2, #0
 800438c:	602a      	str	r2, [r5, #0]
 800438e:	461a      	mov	r2, r3
 8004390:	f7fc fc74 	bl	8000c7c <_lseek>
 8004394:	1c43      	adds	r3, r0, #1
 8004396:	d102      	bne.n	800439e <_lseek_r+0x1e>
 8004398:	682b      	ldr	r3, [r5, #0]
 800439a:	b103      	cbz	r3, 800439e <_lseek_r+0x1e>
 800439c:	6023      	str	r3, [r4, #0]
 800439e:	bd38      	pop	{r3, r4, r5, pc}
 80043a0:	20000318 	.word	0x20000318

080043a4 <_read_r>:
 80043a4:	b538      	push	{r3, r4, r5, lr}
 80043a6:	4d07      	ldr	r5, [pc, #28]	@ (80043c4 <_read_r+0x20>)
 80043a8:	4604      	mov	r4, r0
 80043aa:	4608      	mov	r0, r1
 80043ac:	4611      	mov	r1, r2
 80043ae:	2200      	movs	r2, #0
 80043b0:	602a      	str	r2, [r5, #0]
 80043b2:	461a      	mov	r2, r3
 80043b4:	f7fc fc1e 	bl	8000bf4 <_read>
 80043b8:	1c43      	adds	r3, r0, #1
 80043ba:	d102      	bne.n	80043c2 <_read_r+0x1e>
 80043bc:	682b      	ldr	r3, [r5, #0]
 80043be:	b103      	cbz	r3, 80043c2 <_read_r+0x1e>
 80043c0:	6023      	str	r3, [r4, #0]
 80043c2:	bd38      	pop	{r3, r4, r5, pc}
 80043c4:	20000318 	.word	0x20000318

080043c8 <_write_r>:
 80043c8:	b538      	push	{r3, r4, r5, lr}
 80043ca:	4d07      	ldr	r5, [pc, #28]	@ (80043e8 <_write_r+0x20>)
 80043cc:	4604      	mov	r4, r0
 80043ce:	4608      	mov	r0, r1
 80043d0:	4611      	mov	r1, r2
 80043d2:	2200      	movs	r2, #0
 80043d4:	602a      	str	r2, [r5, #0]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f7fc f998 	bl	800070c <_write>
 80043dc:	1c43      	adds	r3, r0, #1
 80043de:	d102      	bne.n	80043e6 <_write_r+0x1e>
 80043e0:	682b      	ldr	r3, [r5, #0]
 80043e2:	b103      	cbz	r3, 80043e6 <_write_r+0x1e>
 80043e4:	6023      	str	r3, [r4, #0]
 80043e6:	bd38      	pop	{r3, r4, r5, pc}
 80043e8:	20000318 	.word	0x20000318

080043ec <__errno>:
 80043ec:	4b01      	ldr	r3, [pc, #4]	@ (80043f4 <__errno+0x8>)
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	4770      	bx	lr
 80043f2:	bf00      	nop
 80043f4:	20000018 	.word	0x20000018

080043f8 <__libc_init_array>:
 80043f8:	b570      	push	{r4, r5, r6, lr}
 80043fa:	4d0d      	ldr	r5, [pc, #52]	@ (8004430 <__libc_init_array+0x38>)
 80043fc:	4c0d      	ldr	r4, [pc, #52]	@ (8004434 <__libc_init_array+0x3c>)
 80043fe:	1b64      	subs	r4, r4, r5
 8004400:	10a4      	asrs	r4, r4, #2
 8004402:	2600      	movs	r6, #0
 8004404:	42a6      	cmp	r6, r4
 8004406:	d109      	bne.n	800441c <__libc_init_array+0x24>
 8004408:	4d0b      	ldr	r5, [pc, #44]	@ (8004438 <__libc_init_array+0x40>)
 800440a:	4c0c      	ldr	r4, [pc, #48]	@ (800443c <__libc_init_array+0x44>)
 800440c:	f000 fd2c 	bl	8004e68 <_init>
 8004410:	1b64      	subs	r4, r4, r5
 8004412:	10a4      	asrs	r4, r4, #2
 8004414:	2600      	movs	r6, #0
 8004416:	42a6      	cmp	r6, r4
 8004418:	d105      	bne.n	8004426 <__libc_init_array+0x2e>
 800441a:	bd70      	pop	{r4, r5, r6, pc}
 800441c:	f855 3b04 	ldr.w	r3, [r5], #4
 8004420:	4798      	blx	r3
 8004422:	3601      	adds	r6, #1
 8004424:	e7ee      	b.n	8004404 <__libc_init_array+0xc>
 8004426:	f855 3b04 	ldr.w	r3, [r5], #4
 800442a:	4798      	blx	r3
 800442c:	3601      	adds	r6, #1
 800442e:	e7f2      	b.n	8004416 <__libc_init_array+0x1e>
 8004430:	08004fdc 	.word	0x08004fdc
 8004434:	08004fdc 	.word	0x08004fdc
 8004438:	08004fdc 	.word	0x08004fdc
 800443c:	08004fe0 	.word	0x08004fe0

08004440 <__retarget_lock_init_recursive>:
 8004440:	4770      	bx	lr

08004442 <__retarget_lock_acquire_recursive>:
 8004442:	4770      	bx	lr

08004444 <__retarget_lock_release_recursive>:
 8004444:	4770      	bx	lr
	...

08004448 <_free_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4605      	mov	r5, r0
 800444c:	2900      	cmp	r1, #0
 800444e:	d041      	beq.n	80044d4 <_free_r+0x8c>
 8004450:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004454:	1f0c      	subs	r4, r1, #4
 8004456:	2b00      	cmp	r3, #0
 8004458:	bfb8      	it	lt
 800445a:	18e4      	addlt	r4, r4, r3
 800445c:	f000 f8e8 	bl	8004630 <__malloc_lock>
 8004460:	4a1d      	ldr	r2, [pc, #116]	@ (80044d8 <_free_r+0x90>)
 8004462:	6813      	ldr	r3, [r2, #0]
 8004464:	b933      	cbnz	r3, 8004474 <_free_r+0x2c>
 8004466:	6063      	str	r3, [r4, #4]
 8004468:	6014      	str	r4, [r2, #0]
 800446a:	4628      	mov	r0, r5
 800446c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004470:	f000 b8e4 	b.w	800463c <__malloc_unlock>
 8004474:	42a3      	cmp	r3, r4
 8004476:	d908      	bls.n	800448a <_free_r+0x42>
 8004478:	6820      	ldr	r0, [r4, #0]
 800447a:	1821      	adds	r1, r4, r0
 800447c:	428b      	cmp	r3, r1
 800447e:	bf01      	itttt	eq
 8004480:	6819      	ldreq	r1, [r3, #0]
 8004482:	685b      	ldreq	r3, [r3, #4]
 8004484:	1809      	addeq	r1, r1, r0
 8004486:	6021      	streq	r1, [r4, #0]
 8004488:	e7ed      	b.n	8004466 <_free_r+0x1e>
 800448a:	461a      	mov	r2, r3
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	b10b      	cbz	r3, 8004494 <_free_r+0x4c>
 8004490:	42a3      	cmp	r3, r4
 8004492:	d9fa      	bls.n	800448a <_free_r+0x42>
 8004494:	6811      	ldr	r1, [r2, #0]
 8004496:	1850      	adds	r0, r2, r1
 8004498:	42a0      	cmp	r0, r4
 800449a:	d10b      	bne.n	80044b4 <_free_r+0x6c>
 800449c:	6820      	ldr	r0, [r4, #0]
 800449e:	4401      	add	r1, r0
 80044a0:	1850      	adds	r0, r2, r1
 80044a2:	4283      	cmp	r3, r0
 80044a4:	6011      	str	r1, [r2, #0]
 80044a6:	d1e0      	bne.n	800446a <_free_r+0x22>
 80044a8:	6818      	ldr	r0, [r3, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	6053      	str	r3, [r2, #4]
 80044ae:	4408      	add	r0, r1
 80044b0:	6010      	str	r0, [r2, #0]
 80044b2:	e7da      	b.n	800446a <_free_r+0x22>
 80044b4:	d902      	bls.n	80044bc <_free_r+0x74>
 80044b6:	230c      	movs	r3, #12
 80044b8:	602b      	str	r3, [r5, #0]
 80044ba:	e7d6      	b.n	800446a <_free_r+0x22>
 80044bc:	6820      	ldr	r0, [r4, #0]
 80044be:	1821      	adds	r1, r4, r0
 80044c0:	428b      	cmp	r3, r1
 80044c2:	bf04      	itt	eq
 80044c4:	6819      	ldreq	r1, [r3, #0]
 80044c6:	685b      	ldreq	r3, [r3, #4]
 80044c8:	6063      	str	r3, [r4, #4]
 80044ca:	bf04      	itt	eq
 80044cc:	1809      	addeq	r1, r1, r0
 80044ce:	6021      	streq	r1, [r4, #0]
 80044d0:	6054      	str	r4, [r2, #4]
 80044d2:	e7ca      	b.n	800446a <_free_r+0x22>
 80044d4:	bd38      	pop	{r3, r4, r5, pc}
 80044d6:	bf00      	nop
 80044d8:	20000324 	.word	0x20000324

080044dc <malloc>:
 80044dc:	4b02      	ldr	r3, [pc, #8]	@ (80044e8 <malloc+0xc>)
 80044de:	4601      	mov	r1, r0
 80044e0:	6818      	ldr	r0, [r3, #0]
 80044e2:	f000 b825 	b.w	8004530 <_malloc_r>
 80044e6:	bf00      	nop
 80044e8:	20000018 	.word	0x20000018

080044ec <sbrk_aligned>:
 80044ec:	b570      	push	{r4, r5, r6, lr}
 80044ee:	4e0f      	ldr	r6, [pc, #60]	@ (800452c <sbrk_aligned+0x40>)
 80044f0:	460c      	mov	r4, r1
 80044f2:	6831      	ldr	r1, [r6, #0]
 80044f4:	4605      	mov	r5, r0
 80044f6:	b911      	cbnz	r1, 80044fe <sbrk_aligned+0x12>
 80044f8:	f000 fca6 	bl	8004e48 <_sbrk_r>
 80044fc:	6030      	str	r0, [r6, #0]
 80044fe:	4621      	mov	r1, r4
 8004500:	4628      	mov	r0, r5
 8004502:	f000 fca1 	bl	8004e48 <_sbrk_r>
 8004506:	1c43      	adds	r3, r0, #1
 8004508:	d103      	bne.n	8004512 <sbrk_aligned+0x26>
 800450a:	f04f 34ff 	mov.w	r4, #4294967295
 800450e:	4620      	mov	r0, r4
 8004510:	bd70      	pop	{r4, r5, r6, pc}
 8004512:	1cc4      	adds	r4, r0, #3
 8004514:	f024 0403 	bic.w	r4, r4, #3
 8004518:	42a0      	cmp	r0, r4
 800451a:	d0f8      	beq.n	800450e <sbrk_aligned+0x22>
 800451c:	1a21      	subs	r1, r4, r0
 800451e:	4628      	mov	r0, r5
 8004520:	f000 fc92 	bl	8004e48 <_sbrk_r>
 8004524:	3001      	adds	r0, #1
 8004526:	d1f2      	bne.n	800450e <sbrk_aligned+0x22>
 8004528:	e7ef      	b.n	800450a <sbrk_aligned+0x1e>
 800452a:	bf00      	nop
 800452c:	20000320 	.word	0x20000320

08004530 <_malloc_r>:
 8004530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004534:	1ccd      	adds	r5, r1, #3
 8004536:	f025 0503 	bic.w	r5, r5, #3
 800453a:	3508      	adds	r5, #8
 800453c:	2d0c      	cmp	r5, #12
 800453e:	bf38      	it	cc
 8004540:	250c      	movcc	r5, #12
 8004542:	2d00      	cmp	r5, #0
 8004544:	4606      	mov	r6, r0
 8004546:	db01      	blt.n	800454c <_malloc_r+0x1c>
 8004548:	42a9      	cmp	r1, r5
 800454a:	d904      	bls.n	8004556 <_malloc_r+0x26>
 800454c:	230c      	movs	r3, #12
 800454e:	6033      	str	r3, [r6, #0]
 8004550:	2000      	movs	r0, #0
 8004552:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004556:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800462c <_malloc_r+0xfc>
 800455a:	f000 f869 	bl	8004630 <__malloc_lock>
 800455e:	f8d8 3000 	ldr.w	r3, [r8]
 8004562:	461c      	mov	r4, r3
 8004564:	bb44      	cbnz	r4, 80045b8 <_malloc_r+0x88>
 8004566:	4629      	mov	r1, r5
 8004568:	4630      	mov	r0, r6
 800456a:	f7ff ffbf 	bl	80044ec <sbrk_aligned>
 800456e:	1c43      	adds	r3, r0, #1
 8004570:	4604      	mov	r4, r0
 8004572:	d158      	bne.n	8004626 <_malloc_r+0xf6>
 8004574:	f8d8 4000 	ldr.w	r4, [r8]
 8004578:	4627      	mov	r7, r4
 800457a:	2f00      	cmp	r7, #0
 800457c:	d143      	bne.n	8004606 <_malloc_r+0xd6>
 800457e:	2c00      	cmp	r4, #0
 8004580:	d04b      	beq.n	800461a <_malloc_r+0xea>
 8004582:	6823      	ldr	r3, [r4, #0]
 8004584:	4639      	mov	r1, r7
 8004586:	4630      	mov	r0, r6
 8004588:	eb04 0903 	add.w	r9, r4, r3
 800458c:	f000 fc5c 	bl	8004e48 <_sbrk_r>
 8004590:	4581      	cmp	r9, r0
 8004592:	d142      	bne.n	800461a <_malloc_r+0xea>
 8004594:	6821      	ldr	r1, [r4, #0]
 8004596:	1a6d      	subs	r5, r5, r1
 8004598:	4629      	mov	r1, r5
 800459a:	4630      	mov	r0, r6
 800459c:	f7ff ffa6 	bl	80044ec <sbrk_aligned>
 80045a0:	3001      	adds	r0, #1
 80045a2:	d03a      	beq.n	800461a <_malloc_r+0xea>
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	442b      	add	r3, r5
 80045a8:	6023      	str	r3, [r4, #0]
 80045aa:	f8d8 3000 	ldr.w	r3, [r8]
 80045ae:	685a      	ldr	r2, [r3, #4]
 80045b0:	bb62      	cbnz	r2, 800460c <_malloc_r+0xdc>
 80045b2:	f8c8 7000 	str.w	r7, [r8]
 80045b6:	e00f      	b.n	80045d8 <_malloc_r+0xa8>
 80045b8:	6822      	ldr	r2, [r4, #0]
 80045ba:	1b52      	subs	r2, r2, r5
 80045bc:	d420      	bmi.n	8004600 <_malloc_r+0xd0>
 80045be:	2a0b      	cmp	r2, #11
 80045c0:	d917      	bls.n	80045f2 <_malloc_r+0xc2>
 80045c2:	1961      	adds	r1, r4, r5
 80045c4:	42a3      	cmp	r3, r4
 80045c6:	6025      	str	r5, [r4, #0]
 80045c8:	bf18      	it	ne
 80045ca:	6059      	strne	r1, [r3, #4]
 80045cc:	6863      	ldr	r3, [r4, #4]
 80045ce:	bf08      	it	eq
 80045d0:	f8c8 1000 	streq.w	r1, [r8]
 80045d4:	5162      	str	r2, [r4, r5]
 80045d6:	604b      	str	r3, [r1, #4]
 80045d8:	4630      	mov	r0, r6
 80045da:	f000 f82f 	bl	800463c <__malloc_unlock>
 80045de:	f104 000b 	add.w	r0, r4, #11
 80045e2:	1d23      	adds	r3, r4, #4
 80045e4:	f020 0007 	bic.w	r0, r0, #7
 80045e8:	1ac2      	subs	r2, r0, r3
 80045ea:	bf1c      	itt	ne
 80045ec:	1a1b      	subne	r3, r3, r0
 80045ee:	50a3      	strne	r3, [r4, r2]
 80045f0:	e7af      	b.n	8004552 <_malloc_r+0x22>
 80045f2:	6862      	ldr	r2, [r4, #4]
 80045f4:	42a3      	cmp	r3, r4
 80045f6:	bf0c      	ite	eq
 80045f8:	f8c8 2000 	streq.w	r2, [r8]
 80045fc:	605a      	strne	r2, [r3, #4]
 80045fe:	e7eb      	b.n	80045d8 <_malloc_r+0xa8>
 8004600:	4623      	mov	r3, r4
 8004602:	6864      	ldr	r4, [r4, #4]
 8004604:	e7ae      	b.n	8004564 <_malloc_r+0x34>
 8004606:	463c      	mov	r4, r7
 8004608:	687f      	ldr	r7, [r7, #4]
 800460a:	e7b6      	b.n	800457a <_malloc_r+0x4a>
 800460c:	461a      	mov	r2, r3
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	42a3      	cmp	r3, r4
 8004612:	d1fb      	bne.n	800460c <_malloc_r+0xdc>
 8004614:	2300      	movs	r3, #0
 8004616:	6053      	str	r3, [r2, #4]
 8004618:	e7de      	b.n	80045d8 <_malloc_r+0xa8>
 800461a:	230c      	movs	r3, #12
 800461c:	6033      	str	r3, [r6, #0]
 800461e:	4630      	mov	r0, r6
 8004620:	f000 f80c 	bl	800463c <__malloc_unlock>
 8004624:	e794      	b.n	8004550 <_malloc_r+0x20>
 8004626:	6005      	str	r5, [r0, #0]
 8004628:	e7d6      	b.n	80045d8 <_malloc_r+0xa8>
 800462a:	bf00      	nop
 800462c:	20000324 	.word	0x20000324

08004630 <__malloc_lock>:
 8004630:	4801      	ldr	r0, [pc, #4]	@ (8004638 <__malloc_lock+0x8>)
 8004632:	f7ff bf06 	b.w	8004442 <__retarget_lock_acquire_recursive>
 8004636:	bf00      	nop
 8004638:	2000031c 	.word	0x2000031c

0800463c <__malloc_unlock>:
 800463c:	4801      	ldr	r0, [pc, #4]	@ (8004644 <__malloc_unlock+0x8>)
 800463e:	f7ff bf01 	b.w	8004444 <__retarget_lock_release_recursive>
 8004642:	bf00      	nop
 8004644:	2000031c 	.word	0x2000031c

08004648 <__sfputc_r>:
 8004648:	6893      	ldr	r3, [r2, #8]
 800464a:	3b01      	subs	r3, #1
 800464c:	2b00      	cmp	r3, #0
 800464e:	b410      	push	{r4}
 8004650:	6093      	str	r3, [r2, #8]
 8004652:	da08      	bge.n	8004666 <__sfputc_r+0x1e>
 8004654:	6994      	ldr	r4, [r2, #24]
 8004656:	42a3      	cmp	r3, r4
 8004658:	db01      	blt.n	800465e <__sfputc_r+0x16>
 800465a:	290a      	cmp	r1, #10
 800465c:	d103      	bne.n	8004666 <__sfputc_r+0x1e>
 800465e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004662:	f7ff bde0 	b.w	8004226 <__swbuf_r>
 8004666:	6813      	ldr	r3, [r2, #0]
 8004668:	1c58      	adds	r0, r3, #1
 800466a:	6010      	str	r0, [r2, #0]
 800466c:	7019      	strb	r1, [r3, #0]
 800466e:	4608      	mov	r0, r1
 8004670:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004674:	4770      	bx	lr

08004676 <__sfputs_r>:
 8004676:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004678:	4606      	mov	r6, r0
 800467a:	460f      	mov	r7, r1
 800467c:	4614      	mov	r4, r2
 800467e:	18d5      	adds	r5, r2, r3
 8004680:	42ac      	cmp	r4, r5
 8004682:	d101      	bne.n	8004688 <__sfputs_r+0x12>
 8004684:	2000      	movs	r0, #0
 8004686:	e007      	b.n	8004698 <__sfputs_r+0x22>
 8004688:	f814 1b01 	ldrb.w	r1, [r4], #1
 800468c:	463a      	mov	r2, r7
 800468e:	4630      	mov	r0, r6
 8004690:	f7ff ffda 	bl	8004648 <__sfputc_r>
 8004694:	1c43      	adds	r3, r0, #1
 8004696:	d1f3      	bne.n	8004680 <__sfputs_r+0xa>
 8004698:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800469c <_vfiprintf_r>:
 800469c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046a0:	460d      	mov	r5, r1
 80046a2:	b09d      	sub	sp, #116	@ 0x74
 80046a4:	4614      	mov	r4, r2
 80046a6:	4698      	mov	r8, r3
 80046a8:	4606      	mov	r6, r0
 80046aa:	b118      	cbz	r0, 80046b4 <_vfiprintf_r+0x18>
 80046ac:	6a03      	ldr	r3, [r0, #32]
 80046ae:	b90b      	cbnz	r3, 80046b4 <_vfiprintf_r+0x18>
 80046b0:	f7ff fc14 	bl	8003edc <__sinit>
 80046b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046b6:	07d9      	lsls	r1, r3, #31
 80046b8:	d405      	bmi.n	80046c6 <_vfiprintf_r+0x2a>
 80046ba:	89ab      	ldrh	r3, [r5, #12]
 80046bc:	059a      	lsls	r2, r3, #22
 80046be:	d402      	bmi.n	80046c6 <_vfiprintf_r+0x2a>
 80046c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046c2:	f7ff febe 	bl	8004442 <__retarget_lock_acquire_recursive>
 80046c6:	89ab      	ldrh	r3, [r5, #12]
 80046c8:	071b      	lsls	r3, r3, #28
 80046ca:	d501      	bpl.n	80046d0 <_vfiprintf_r+0x34>
 80046cc:	692b      	ldr	r3, [r5, #16]
 80046ce:	b99b      	cbnz	r3, 80046f8 <_vfiprintf_r+0x5c>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4630      	mov	r0, r6
 80046d4:	f7ff fde6 	bl	80042a4 <__swsetup_r>
 80046d8:	b170      	cbz	r0, 80046f8 <_vfiprintf_r+0x5c>
 80046da:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80046dc:	07dc      	lsls	r4, r3, #31
 80046de:	d504      	bpl.n	80046ea <_vfiprintf_r+0x4e>
 80046e0:	f04f 30ff 	mov.w	r0, #4294967295
 80046e4:	b01d      	add	sp, #116	@ 0x74
 80046e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046ea:	89ab      	ldrh	r3, [r5, #12]
 80046ec:	0598      	lsls	r0, r3, #22
 80046ee:	d4f7      	bmi.n	80046e0 <_vfiprintf_r+0x44>
 80046f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80046f2:	f7ff fea7 	bl	8004444 <__retarget_lock_release_recursive>
 80046f6:	e7f3      	b.n	80046e0 <_vfiprintf_r+0x44>
 80046f8:	2300      	movs	r3, #0
 80046fa:	9309      	str	r3, [sp, #36]	@ 0x24
 80046fc:	2320      	movs	r3, #32
 80046fe:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004702:	f8cd 800c 	str.w	r8, [sp, #12]
 8004706:	2330      	movs	r3, #48	@ 0x30
 8004708:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80048b8 <_vfiprintf_r+0x21c>
 800470c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004710:	f04f 0901 	mov.w	r9, #1
 8004714:	4623      	mov	r3, r4
 8004716:	469a      	mov	sl, r3
 8004718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800471c:	b10a      	cbz	r2, 8004722 <_vfiprintf_r+0x86>
 800471e:	2a25      	cmp	r2, #37	@ 0x25
 8004720:	d1f9      	bne.n	8004716 <_vfiprintf_r+0x7a>
 8004722:	ebba 0b04 	subs.w	fp, sl, r4
 8004726:	d00b      	beq.n	8004740 <_vfiprintf_r+0xa4>
 8004728:	465b      	mov	r3, fp
 800472a:	4622      	mov	r2, r4
 800472c:	4629      	mov	r1, r5
 800472e:	4630      	mov	r0, r6
 8004730:	f7ff ffa1 	bl	8004676 <__sfputs_r>
 8004734:	3001      	adds	r0, #1
 8004736:	f000 80a7 	beq.w	8004888 <_vfiprintf_r+0x1ec>
 800473a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800473c:	445a      	add	r2, fp
 800473e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004740:	f89a 3000 	ldrb.w	r3, [sl]
 8004744:	2b00      	cmp	r3, #0
 8004746:	f000 809f 	beq.w	8004888 <_vfiprintf_r+0x1ec>
 800474a:	2300      	movs	r3, #0
 800474c:	f04f 32ff 	mov.w	r2, #4294967295
 8004750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004754:	f10a 0a01 	add.w	sl, sl, #1
 8004758:	9304      	str	r3, [sp, #16]
 800475a:	9307      	str	r3, [sp, #28]
 800475c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004760:	931a      	str	r3, [sp, #104]	@ 0x68
 8004762:	4654      	mov	r4, sl
 8004764:	2205      	movs	r2, #5
 8004766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800476a:	4853      	ldr	r0, [pc, #332]	@ (80048b8 <_vfiprintf_r+0x21c>)
 800476c:	f7fb fd58 	bl	8000220 <memchr>
 8004770:	9a04      	ldr	r2, [sp, #16]
 8004772:	b9d8      	cbnz	r0, 80047ac <_vfiprintf_r+0x110>
 8004774:	06d1      	lsls	r1, r2, #27
 8004776:	bf44      	itt	mi
 8004778:	2320      	movmi	r3, #32
 800477a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800477e:	0713      	lsls	r3, r2, #28
 8004780:	bf44      	itt	mi
 8004782:	232b      	movmi	r3, #43	@ 0x2b
 8004784:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004788:	f89a 3000 	ldrb.w	r3, [sl]
 800478c:	2b2a      	cmp	r3, #42	@ 0x2a
 800478e:	d015      	beq.n	80047bc <_vfiprintf_r+0x120>
 8004790:	9a07      	ldr	r2, [sp, #28]
 8004792:	4654      	mov	r4, sl
 8004794:	2000      	movs	r0, #0
 8004796:	f04f 0c0a 	mov.w	ip, #10
 800479a:	4621      	mov	r1, r4
 800479c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80047a0:	3b30      	subs	r3, #48	@ 0x30
 80047a2:	2b09      	cmp	r3, #9
 80047a4:	d94b      	bls.n	800483e <_vfiprintf_r+0x1a2>
 80047a6:	b1b0      	cbz	r0, 80047d6 <_vfiprintf_r+0x13a>
 80047a8:	9207      	str	r2, [sp, #28]
 80047aa:	e014      	b.n	80047d6 <_vfiprintf_r+0x13a>
 80047ac:	eba0 0308 	sub.w	r3, r0, r8
 80047b0:	fa09 f303 	lsl.w	r3, r9, r3
 80047b4:	4313      	orrs	r3, r2
 80047b6:	9304      	str	r3, [sp, #16]
 80047b8:	46a2      	mov	sl, r4
 80047ba:	e7d2      	b.n	8004762 <_vfiprintf_r+0xc6>
 80047bc:	9b03      	ldr	r3, [sp, #12]
 80047be:	1d19      	adds	r1, r3, #4
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	9103      	str	r1, [sp, #12]
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	bfbb      	ittet	lt
 80047c8:	425b      	neglt	r3, r3
 80047ca:	f042 0202 	orrlt.w	r2, r2, #2
 80047ce:	9307      	strge	r3, [sp, #28]
 80047d0:	9307      	strlt	r3, [sp, #28]
 80047d2:	bfb8      	it	lt
 80047d4:	9204      	strlt	r2, [sp, #16]
 80047d6:	7823      	ldrb	r3, [r4, #0]
 80047d8:	2b2e      	cmp	r3, #46	@ 0x2e
 80047da:	d10a      	bne.n	80047f2 <_vfiprintf_r+0x156>
 80047dc:	7863      	ldrb	r3, [r4, #1]
 80047de:	2b2a      	cmp	r3, #42	@ 0x2a
 80047e0:	d132      	bne.n	8004848 <_vfiprintf_r+0x1ac>
 80047e2:	9b03      	ldr	r3, [sp, #12]
 80047e4:	1d1a      	adds	r2, r3, #4
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	9203      	str	r2, [sp, #12]
 80047ea:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80047ee:	3402      	adds	r4, #2
 80047f0:	9305      	str	r3, [sp, #20]
 80047f2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80048c8 <_vfiprintf_r+0x22c>
 80047f6:	7821      	ldrb	r1, [r4, #0]
 80047f8:	2203      	movs	r2, #3
 80047fa:	4650      	mov	r0, sl
 80047fc:	f7fb fd10 	bl	8000220 <memchr>
 8004800:	b138      	cbz	r0, 8004812 <_vfiprintf_r+0x176>
 8004802:	9b04      	ldr	r3, [sp, #16]
 8004804:	eba0 000a 	sub.w	r0, r0, sl
 8004808:	2240      	movs	r2, #64	@ 0x40
 800480a:	4082      	lsls	r2, r0
 800480c:	4313      	orrs	r3, r2
 800480e:	3401      	adds	r4, #1
 8004810:	9304      	str	r3, [sp, #16]
 8004812:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004816:	4829      	ldr	r0, [pc, #164]	@ (80048bc <_vfiprintf_r+0x220>)
 8004818:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800481c:	2206      	movs	r2, #6
 800481e:	f7fb fcff 	bl	8000220 <memchr>
 8004822:	2800      	cmp	r0, #0
 8004824:	d03f      	beq.n	80048a6 <_vfiprintf_r+0x20a>
 8004826:	4b26      	ldr	r3, [pc, #152]	@ (80048c0 <_vfiprintf_r+0x224>)
 8004828:	bb1b      	cbnz	r3, 8004872 <_vfiprintf_r+0x1d6>
 800482a:	9b03      	ldr	r3, [sp, #12]
 800482c:	3307      	adds	r3, #7
 800482e:	f023 0307 	bic.w	r3, r3, #7
 8004832:	3308      	adds	r3, #8
 8004834:	9303      	str	r3, [sp, #12]
 8004836:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004838:	443b      	add	r3, r7
 800483a:	9309      	str	r3, [sp, #36]	@ 0x24
 800483c:	e76a      	b.n	8004714 <_vfiprintf_r+0x78>
 800483e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004842:	460c      	mov	r4, r1
 8004844:	2001      	movs	r0, #1
 8004846:	e7a8      	b.n	800479a <_vfiprintf_r+0xfe>
 8004848:	2300      	movs	r3, #0
 800484a:	3401      	adds	r4, #1
 800484c:	9305      	str	r3, [sp, #20]
 800484e:	4619      	mov	r1, r3
 8004850:	f04f 0c0a 	mov.w	ip, #10
 8004854:	4620      	mov	r0, r4
 8004856:	f810 2b01 	ldrb.w	r2, [r0], #1
 800485a:	3a30      	subs	r2, #48	@ 0x30
 800485c:	2a09      	cmp	r2, #9
 800485e:	d903      	bls.n	8004868 <_vfiprintf_r+0x1cc>
 8004860:	2b00      	cmp	r3, #0
 8004862:	d0c6      	beq.n	80047f2 <_vfiprintf_r+0x156>
 8004864:	9105      	str	r1, [sp, #20]
 8004866:	e7c4      	b.n	80047f2 <_vfiprintf_r+0x156>
 8004868:	fb0c 2101 	mla	r1, ip, r1, r2
 800486c:	4604      	mov	r4, r0
 800486e:	2301      	movs	r3, #1
 8004870:	e7f0      	b.n	8004854 <_vfiprintf_r+0x1b8>
 8004872:	ab03      	add	r3, sp, #12
 8004874:	9300      	str	r3, [sp, #0]
 8004876:	462a      	mov	r2, r5
 8004878:	4b12      	ldr	r3, [pc, #72]	@ (80048c4 <_vfiprintf_r+0x228>)
 800487a:	a904      	add	r1, sp, #16
 800487c:	4630      	mov	r0, r6
 800487e:	f3af 8000 	nop.w
 8004882:	4607      	mov	r7, r0
 8004884:	1c78      	adds	r0, r7, #1
 8004886:	d1d6      	bne.n	8004836 <_vfiprintf_r+0x19a>
 8004888:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800488a:	07d9      	lsls	r1, r3, #31
 800488c:	d405      	bmi.n	800489a <_vfiprintf_r+0x1fe>
 800488e:	89ab      	ldrh	r3, [r5, #12]
 8004890:	059a      	lsls	r2, r3, #22
 8004892:	d402      	bmi.n	800489a <_vfiprintf_r+0x1fe>
 8004894:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004896:	f7ff fdd5 	bl	8004444 <__retarget_lock_release_recursive>
 800489a:	89ab      	ldrh	r3, [r5, #12]
 800489c:	065b      	lsls	r3, r3, #25
 800489e:	f53f af1f 	bmi.w	80046e0 <_vfiprintf_r+0x44>
 80048a2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80048a4:	e71e      	b.n	80046e4 <_vfiprintf_r+0x48>
 80048a6:	ab03      	add	r3, sp, #12
 80048a8:	9300      	str	r3, [sp, #0]
 80048aa:	462a      	mov	r2, r5
 80048ac:	4b05      	ldr	r3, [pc, #20]	@ (80048c4 <_vfiprintf_r+0x228>)
 80048ae:	a904      	add	r1, sp, #16
 80048b0:	4630      	mov	r0, r6
 80048b2:	f000 f879 	bl	80049a8 <_printf_i>
 80048b6:	e7e4      	b.n	8004882 <_vfiprintf_r+0x1e6>
 80048b8:	08004fa0 	.word	0x08004fa0
 80048bc:	08004faa 	.word	0x08004faa
 80048c0:	00000000 	.word	0x00000000
 80048c4:	08004677 	.word	0x08004677
 80048c8:	08004fa6 	.word	0x08004fa6

080048cc <_printf_common>:
 80048cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048d0:	4616      	mov	r6, r2
 80048d2:	4698      	mov	r8, r3
 80048d4:	688a      	ldr	r2, [r1, #8]
 80048d6:	690b      	ldr	r3, [r1, #16]
 80048d8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80048dc:	4293      	cmp	r3, r2
 80048de:	bfb8      	it	lt
 80048e0:	4613      	movlt	r3, r2
 80048e2:	6033      	str	r3, [r6, #0]
 80048e4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80048e8:	4607      	mov	r7, r0
 80048ea:	460c      	mov	r4, r1
 80048ec:	b10a      	cbz	r2, 80048f2 <_printf_common+0x26>
 80048ee:	3301      	adds	r3, #1
 80048f0:	6033      	str	r3, [r6, #0]
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	0699      	lsls	r1, r3, #26
 80048f6:	bf42      	ittt	mi
 80048f8:	6833      	ldrmi	r3, [r6, #0]
 80048fa:	3302      	addmi	r3, #2
 80048fc:	6033      	strmi	r3, [r6, #0]
 80048fe:	6825      	ldr	r5, [r4, #0]
 8004900:	f015 0506 	ands.w	r5, r5, #6
 8004904:	d106      	bne.n	8004914 <_printf_common+0x48>
 8004906:	f104 0a19 	add.w	sl, r4, #25
 800490a:	68e3      	ldr	r3, [r4, #12]
 800490c:	6832      	ldr	r2, [r6, #0]
 800490e:	1a9b      	subs	r3, r3, r2
 8004910:	42ab      	cmp	r3, r5
 8004912:	dc26      	bgt.n	8004962 <_printf_common+0x96>
 8004914:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004918:	6822      	ldr	r2, [r4, #0]
 800491a:	3b00      	subs	r3, #0
 800491c:	bf18      	it	ne
 800491e:	2301      	movne	r3, #1
 8004920:	0692      	lsls	r2, r2, #26
 8004922:	d42b      	bmi.n	800497c <_printf_common+0xb0>
 8004924:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004928:	4641      	mov	r1, r8
 800492a:	4638      	mov	r0, r7
 800492c:	47c8      	blx	r9
 800492e:	3001      	adds	r0, #1
 8004930:	d01e      	beq.n	8004970 <_printf_common+0xa4>
 8004932:	6823      	ldr	r3, [r4, #0]
 8004934:	6922      	ldr	r2, [r4, #16]
 8004936:	f003 0306 	and.w	r3, r3, #6
 800493a:	2b04      	cmp	r3, #4
 800493c:	bf02      	ittt	eq
 800493e:	68e5      	ldreq	r5, [r4, #12]
 8004940:	6833      	ldreq	r3, [r6, #0]
 8004942:	1aed      	subeq	r5, r5, r3
 8004944:	68a3      	ldr	r3, [r4, #8]
 8004946:	bf0c      	ite	eq
 8004948:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800494c:	2500      	movne	r5, #0
 800494e:	4293      	cmp	r3, r2
 8004950:	bfc4      	itt	gt
 8004952:	1a9b      	subgt	r3, r3, r2
 8004954:	18ed      	addgt	r5, r5, r3
 8004956:	2600      	movs	r6, #0
 8004958:	341a      	adds	r4, #26
 800495a:	42b5      	cmp	r5, r6
 800495c:	d11a      	bne.n	8004994 <_printf_common+0xc8>
 800495e:	2000      	movs	r0, #0
 8004960:	e008      	b.n	8004974 <_printf_common+0xa8>
 8004962:	2301      	movs	r3, #1
 8004964:	4652      	mov	r2, sl
 8004966:	4641      	mov	r1, r8
 8004968:	4638      	mov	r0, r7
 800496a:	47c8      	blx	r9
 800496c:	3001      	adds	r0, #1
 800496e:	d103      	bne.n	8004978 <_printf_common+0xac>
 8004970:	f04f 30ff 	mov.w	r0, #4294967295
 8004974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004978:	3501      	adds	r5, #1
 800497a:	e7c6      	b.n	800490a <_printf_common+0x3e>
 800497c:	18e1      	adds	r1, r4, r3
 800497e:	1c5a      	adds	r2, r3, #1
 8004980:	2030      	movs	r0, #48	@ 0x30
 8004982:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004986:	4422      	add	r2, r4
 8004988:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800498c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004990:	3302      	adds	r3, #2
 8004992:	e7c7      	b.n	8004924 <_printf_common+0x58>
 8004994:	2301      	movs	r3, #1
 8004996:	4622      	mov	r2, r4
 8004998:	4641      	mov	r1, r8
 800499a:	4638      	mov	r0, r7
 800499c:	47c8      	blx	r9
 800499e:	3001      	adds	r0, #1
 80049a0:	d0e6      	beq.n	8004970 <_printf_common+0xa4>
 80049a2:	3601      	adds	r6, #1
 80049a4:	e7d9      	b.n	800495a <_printf_common+0x8e>
	...

080049a8 <_printf_i>:
 80049a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80049ac:	7e0f      	ldrb	r7, [r1, #24]
 80049ae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80049b0:	2f78      	cmp	r7, #120	@ 0x78
 80049b2:	4691      	mov	r9, r2
 80049b4:	4680      	mov	r8, r0
 80049b6:	460c      	mov	r4, r1
 80049b8:	469a      	mov	sl, r3
 80049ba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80049be:	d807      	bhi.n	80049d0 <_printf_i+0x28>
 80049c0:	2f62      	cmp	r7, #98	@ 0x62
 80049c2:	d80a      	bhi.n	80049da <_printf_i+0x32>
 80049c4:	2f00      	cmp	r7, #0
 80049c6:	f000 80d2 	beq.w	8004b6e <_printf_i+0x1c6>
 80049ca:	2f58      	cmp	r7, #88	@ 0x58
 80049cc:	f000 80b9 	beq.w	8004b42 <_printf_i+0x19a>
 80049d0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80049d4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80049d8:	e03a      	b.n	8004a50 <_printf_i+0xa8>
 80049da:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80049de:	2b15      	cmp	r3, #21
 80049e0:	d8f6      	bhi.n	80049d0 <_printf_i+0x28>
 80049e2:	a101      	add	r1, pc, #4	@ (adr r1, 80049e8 <_printf_i+0x40>)
 80049e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80049e8:	08004a41 	.word	0x08004a41
 80049ec:	08004a55 	.word	0x08004a55
 80049f0:	080049d1 	.word	0x080049d1
 80049f4:	080049d1 	.word	0x080049d1
 80049f8:	080049d1 	.word	0x080049d1
 80049fc:	080049d1 	.word	0x080049d1
 8004a00:	08004a55 	.word	0x08004a55
 8004a04:	080049d1 	.word	0x080049d1
 8004a08:	080049d1 	.word	0x080049d1
 8004a0c:	080049d1 	.word	0x080049d1
 8004a10:	080049d1 	.word	0x080049d1
 8004a14:	08004b55 	.word	0x08004b55
 8004a18:	08004a7f 	.word	0x08004a7f
 8004a1c:	08004b0f 	.word	0x08004b0f
 8004a20:	080049d1 	.word	0x080049d1
 8004a24:	080049d1 	.word	0x080049d1
 8004a28:	08004b77 	.word	0x08004b77
 8004a2c:	080049d1 	.word	0x080049d1
 8004a30:	08004a7f 	.word	0x08004a7f
 8004a34:	080049d1 	.word	0x080049d1
 8004a38:	080049d1 	.word	0x080049d1
 8004a3c:	08004b17 	.word	0x08004b17
 8004a40:	6833      	ldr	r3, [r6, #0]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	6032      	str	r2, [r6, #0]
 8004a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8004a4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004a50:	2301      	movs	r3, #1
 8004a52:	e09d      	b.n	8004b90 <_printf_i+0x1e8>
 8004a54:	6833      	ldr	r3, [r6, #0]
 8004a56:	6820      	ldr	r0, [r4, #0]
 8004a58:	1d19      	adds	r1, r3, #4
 8004a5a:	6031      	str	r1, [r6, #0]
 8004a5c:	0606      	lsls	r6, r0, #24
 8004a5e:	d501      	bpl.n	8004a64 <_printf_i+0xbc>
 8004a60:	681d      	ldr	r5, [r3, #0]
 8004a62:	e003      	b.n	8004a6c <_printf_i+0xc4>
 8004a64:	0645      	lsls	r5, r0, #25
 8004a66:	d5fb      	bpl.n	8004a60 <_printf_i+0xb8>
 8004a68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8004a6c:	2d00      	cmp	r5, #0
 8004a6e:	da03      	bge.n	8004a78 <_printf_i+0xd0>
 8004a70:	232d      	movs	r3, #45	@ 0x2d
 8004a72:	426d      	negs	r5, r5
 8004a74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004a78:	4859      	ldr	r0, [pc, #356]	@ (8004be0 <_printf_i+0x238>)
 8004a7a:	230a      	movs	r3, #10
 8004a7c:	e011      	b.n	8004aa2 <_printf_i+0xfa>
 8004a7e:	6821      	ldr	r1, [r4, #0]
 8004a80:	6833      	ldr	r3, [r6, #0]
 8004a82:	0608      	lsls	r0, r1, #24
 8004a84:	f853 5b04 	ldr.w	r5, [r3], #4
 8004a88:	d402      	bmi.n	8004a90 <_printf_i+0xe8>
 8004a8a:	0649      	lsls	r1, r1, #25
 8004a8c:	bf48      	it	mi
 8004a8e:	b2ad      	uxthmi	r5, r5
 8004a90:	2f6f      	cmp	r7, #111	@ 0x6f
 8004a92:	4853      	ldr	r0, [pc, #332]	@ (8004be0 <_printf_i+0x238>)
 8004a94:	6033      	str	r3, [r6, #0]
 8004a96:	bf14      	ite	ne
 8004a98:	230a      	movne	r3, #10
 8004a9a:	2308      	moveq	r3, #8
 8004a9c:	2100      	movs	r1, #0
 8004a9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004aa2:	6866      	ldr	r6, [r4, #4]
 8004aa4:	60a6      	str	r6, [r4, #8]
 8004aa6:	2e00      	cmp	r6, #0
 8004aa8:	bfa2      	ittt	ge
 8004aaa:	6821      	ldrge	r1, [r4, #0]
 8004aac:	f021 0104 	bicge.w	r1, r1, #4
 8004ab0:	6021      	strge	r1, [r4, #0]
 8004ab2:	b90d      	cbnz	r5, 8004ab8 <_printf_i+0x110>
 8004ab4:	2e00      	cmp	r6, #0
 8004ab6:	d04b      	beq.n	8004b50 <_printf_i+0x1a8>
 8004ab8:	4616      	mov	r6, r2
 8004aba:	fbb5 f1f3 	udiv	r1, r5, r3
 8004abe:	fb03 5711 	mls	r7, r3, r1, r5
 8004ac2:	5dc7      	ldrb	r7, [r0, r7]
 8004ac4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004ac8:	462f      	mov	r7, r5
 8004aca:	42bb      	cmp	r3, r7
 8004acc:	460d      	mov	r5, r1
 8004ace:	d9f4      	bls.n	8004aba <_printf_i+0x112>
 8004ad0:	2b08      	cmp	r3, #8
 8004ad2:	d10b      	bne.n	8004aec <_printf_i+0x144>
 8004ad4:	6823      	ldr	r3, [r4, #0]
 8004ad6:	07df      	lsls	r7, r3, #31
 8004ad8:	d508      	bpl.n	8004aec <_printf_i+0x144>
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6861      	ldr	r1, [r4, #4]
 8004ade:	4299      	cmp	r1, r3
 8004ae0:	bfde      	ittt	le
 8004ae2:	2330      	movle	r3, #48	@ 0x30
 8004ae4:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ae8:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aec:	1b92      	subs	r2, r2, r6
 8004aee:	6122      	str	r2, [r4, #16]
 8004af0:	f8cd a000 	str.w	sl, [sp]
 8004af4:	464b      	mov	r3, r9
 8004af6:	aa03      	add	r2, sp, #12
 8004af8:	4621      	mov	r1, r4
 8004afa:	4640      	mov	r0, r8
 8004afc:	f7ff fee6 	bl	80048cc <_printf_common>
 8004b00:	3001      	adds	r0, #1
 8004b02:	d14a      	bne.n	8004b9a <_printf_i+0x1f2>
 8004b04:	f04f 30ff 	mov.w	r0, #4294967295
 8004b08:	b004      	add	sp, #16
 8004b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b0e:	6823      	ldr	r3, [r4, #0]
 8004b10:	f043 0320 	orr.w	r3, r3, #32
 8004b14:	6023      	str	r3, [r4, #0]
 8004b16:	4833      	ldr	r0, [pc, #204]	@ (8004be4 <_printf_i+0x23c>)
 8004b18:	2778      	movs	r7, #120	@ 0x78
 8004b1a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004b1e:	6823      	ldr	r3, [r4, #0]
 8004b20:	6831      	ldr	r1, [r6, #0]
 8004b22:	061f      	lsls	r7, r3, #24
 8004b24:	f851 5b04 	ldr.w	r5, [r1], #4
 8004b28:	d402      	bmi.n	8004b30 <_printf_i+0x188>
 8004b2a:	065f      	lsls	r7, r3, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b2ad      	uxthmi	r5, r5
 8004b30:	6031      	str	r1, [r6, #0]
 8004b32:	07d9      	lsls	r1, r3, #31
 8004b34:	bf44      	itt	mi
 8004b36:	f043 0320 	orrmi.w	r3, r3, #32
 8004b3a:	6023      	strmi	r3, [r4, #0]
 8004b3c:	b11d      	cbz	r5, 8004b46 <_printf_i+0x19e>
 8004b3e:	2310      	movs	r3, #16
 8004b40:	e7ac      	b.n	8004a9c <_printf_i+0xf4>
 8004b42:	4827      	ldr	r0, [pc, #156]	@ (8004be0 <_printf_i+0x238>)
 8004b44:	e7e9      	b.n	8004b1a <_printf_i+0x172>
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	f023 0320 	bic.w	r3, r3, #32
 8004b4c:	6023      	str	r3, [r4, #0]
 8004b4e:	e7f6      	b.n	8004b3e <_printf_i+0x196>
 8004b50:	4616      	mov	r6, r2
 8004b52:	e7bd      	b.n	8004ad0 <_printf_i+0x128>
 8004b54:	6833      	ldr	r3, [r6, #0]
 8004b56:	6825      	ldr	r5, [r4, #0]
 8004b58:	6961      	ldr	r1, [r4, #20]
 8004b5a:	1d18      	adds	r0, r3, #4
 8004b5c:	6030      	str	r0, [r6, #0]
 8004b5e:	062e      	lsls	r6, r5, #24
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	d501      	bpl.n	8004b68 <_printf_i+0x1c0>
 8004b64:	6019      	str	r1, [r3, #0]
 8004b66:	e002      	b.n	8004b6e <_printf_i+0x1c6>
 8004b68:	0668      	lsls	r0, r5, #25
 8004b6a:	d5fb      	bpl.n	8004b64 <_printf_i+0x1bc>
 8004b6c:	8019      	strh	r1, [r3, #0]
 8004b6e:	2300      	movs	r3, #0
 8004b70:	6123      	str	r3, [r4, #16]
 8004b72:	4616      	mov	r6, r2
 8004b74:	e7bc      	b.n	8004af0 <_printf_i+0x148>
 8004b76:	6833      	ldr	r3, [r6, #0]
 8004b78:	1d1a      	adds	r2, r3, #4
 8004b7a:	6032      	str	r2, [r6, #0]
 8004b7c:	681e      	ldr	r6, [r3, #0]
 8004b7e:	6862      	ldr	r2, [r4, #4]
 8004b80:	2100      	movs	r1, #0
 8004b82:	4630      	mov	r0, r6
 8004b84:	f7fb fb4c 	bl	8000220 <memchr>
 8004b88:	b108      	cbz	r0, 8004b8e <_printf_i+0x1e6>
 8004b8a:	1b80      	subs	r0, r0, r6
 8004b8c:	6060      	str	r0, [r4, #4]
 8004b8e:	6863      	ldr	r3, [r4, #4]
 8004b90:	6123      	str	r3, [r4, #16]
 8004b92:	2300      	movs	r3, #0
 8004b94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004b98:	e7aa      	b.n	8004af0 <_printf_i+0x148>
 8004b9a:	6923      	ldr	r3, [r4, #16]
 8004b9c:	4632      	mov	r2, r6
 8004b9e:	4649      	mov	r1, r9
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	47d0      	blx	sl
 8004ba4:	3001      	adds	r0, #1
 8004ba6:	d0ad      	beq.n	8004b04 <_printf_i+0x15c>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	079b      	lsls	r3, r3, #30
 8004bac:	d413      	bmi.n	8004bd6 <_printf_i+0x22e>
 8004bae:	68e0      	ldr	r0, [r4, #12]
 8004bb0:	9b03      	ldr	r3, [sp, #12]
 8004bb2:	4298      	cmp	r0, r3
 8004bb4:	bfb8      	it	lt
 8004bb6:	4618      	movlt	r0, r3
 8004bb8:	e7a6      	b.n	8004b08 <_printf_i+0x160>
 8004bba:	2301      	movs	r3, #1
 8004bbc:	4632      	mov	r2, r6
 8004bbe:	4649      	mov	r1, r9
 8004bc0:	4640      	mov	r0, r8
 8004bc2:	47d0      	blx	sl
 8004bc4:	3001      	adds	r0, #1
 8004bc6:	d09d      	beq.n	8004b04 <_printf_i+0x15c>
 8004bc8:	3501      	adds	r5, #1
 8004bca:	68e3      	ldr	r3, [r4, #12]
 8004bcc:	9903      	ldr	r1, [sp, #12]
 8004bce:	1a5b      	subs	r3, r3, r1
 8004bd0:	42ab      	cmp	r3, r5
 8004bd2:	dcf2      	bgt.n	8004bba <_printf_i+0x212>
 8004bd4:	e7eb      	b.n	8004bae <_printf_i+0x206>
 8004bd6:	2500      	movs	r5, #0
 8004bd8:	f104 0619 	add.w	r6, r4, #25
 8004bdc:	e7f5      	b.n	8004bca <_printf_i+0x222>
 8004bde:	bf00      	nop
 8004be0:	08004fb1 	.word	0x08004fb1
 8004be4:	08004fc2 	.word	0x08004fc2

08004be8 <__sflush_r>:
 8004be8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bf0:	0716      	lsls	r6, r2, #28
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	460c      	mov	r4, r1
 8004bf6:	d454      	bmi.n	8004ca2 <__sflush_r+0xba>
 8004bf8:	684b      	ldr	r3, [r1, #4]
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	dc02      	bgt.n	8004c04 <__sflush_r+0x1c>
 8004bfe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	dd48      	ble.n	8004c96 <__sflush_r+0xae>
 8004c04:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c06:	2e00      	cmp	r6, #0
 8004c08:	d045      	beq.n	8004c96 <__sflush_r+0xae>
 8004c0a:	2300      	movs	r3, #0
 8004c0c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c10:	682f      	ldr	r7, [r5, #0]
 8004c12:	6a21      	ldr	r1, [r4, #32]
 8004c14:	602b      	str	r3, [r5, #0]
 8004c16:	d030      	beq.n	8004c7a <__sflush_r+0x92>
 8004c18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c1a:	89a3      	ldrh	r3, [r4, #12]
 8004c1c:	0759      	lsls	r1, r3, #29
 8004c1e:	d505      	bpl.n	8004c2c <__sflush_r+0x44>
 8004c20:	6863      	ldr	r3, [r4, #4]
 8004c22:	1ad2      	subs	r2, r2, r3
 8004c24:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c26:	b10b      	cbz	r3, 8004c2c <__sflush_r+0x44>
 8004c28:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c2a:	1ad2      	subs	r2, r2, r3
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c30:	6a21      	ldr	r1, [r4, #32]
 8004c32:	4628      	mov	r0, r5
 8004c34:	47b0      	blx	r6
 8004c36:	1c43      	adds	r3, r0, #1
 8004c38:	89a3      	ldrh	r3, [r4, #12]
 8004c3a:	d106      	bne.n	8004c4a <__sflush_r+0x62>
 8004c3c:	6829      	ldr	r1, [r5, #0]
 8004c3e:	291d      	cmp	r1, #29
 8004c40:	d82b      	bhi.n	8004c9a <__sflush_r+0xb2>
 8004c42:	4a2a      	ldr	r2, [pc, #168]	@ (8004cec <__sflush_r+0x104>)
 8004c44:	410a      	asrs	r2, r1
 8004c46:	07d6      	lsls	r6, r2, #31
 8004c48:	d427      	bmi.n	8004c9a <__sflush_r+0xb2>
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	6062      	str	r2, [r4, #4]
 8004c4e:	04d9      	lsls	r1, r3, #19
 8004c50:	6922      	ldr	r2, [r4, #16]
 8004c52:	6022      	str	r2, [r4, #0]
 8004c54:	d504      	bpl.n	8004c60 <__sflush_r+0x78>
 8004c56:	1c42      	adds	r2, r0, #1
 8004c58:	d101      	bne.n	8004c5e <__sflush_r+0x76>
 8004c5a:	682b      	ldr	r3, [r5, #0]
 8004c5c:	b903      	cbnz	r3, 8004c60 <__sflush_r+0x78>
 8004c5e:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c60:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c62:	602f      	str	r7, [r5, #0]
 8004c64:	b1b9      	cbz	r1, 8004c96 <__sflush_r+0xae>
 8004c66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c6a:	4299      	cmp	r1, r3
 8004c6c:	d002      	beq.n	8004c74 <__sflush_r+0x8c>
 8004c6e:	4628      	mov	r0, r5
 8004c70:	f7ff fbea 	bl	8004448 <_free_r>
 8004c74:	2300      	movs	r3, #0
 8004c76:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c78:	e00d      	b.n	8004c96 <__sflush_r+0xae>
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	47b0      	blx	r6
 8004c80:	4602      	mov	r2, r0
 8004c82:	1c50      	adds	r0, r2, #1
 8004c84:	d1c9      	bne.n	8004c1a <__sflush_r+0x32>
 8004c86:	682b      	ldr	r3, [r5, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d0c6      	beq.n	8004c1a <__sflush_r+0x32>
 8004c8c:	2b1d      	cmp	r3, #29
 8004c8e:	d001      	beq.n	8004c94 <__sflush_r+0xac>
 8004c90:	2b16      	cmp	r3, #22
 8004c92:	d11e      	bne.n	8004cd2 <__sflush_r+0xea>
 8004c94:	602f      	str	r7, [r5, #0]
 8004c96:	2000      	movs	r0, #0
 8004c98:	e022      	b.n	8004ce0 <__sflush_r+0xf8>
 8004c9a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004c9e:	b21b      	sxth	r3, r3
 8004ca0:	e01b      	b.n	8004cda <__sflush_r+0xf2>
 8004ca2:	690f      	ldr	r7, [r1, #16]
 8004ca4:	2f00      	cmp	r7, #0
 8004ca6:	d0f6      	beq.n	8004c96 <__sflush_r+0xae>
 8004ca8:	0793      	lsls	r3, r2, #30
 8004caa:	680e      	ldr	r6, [r1, #0]
 8004cac:	bf08      	it	eq
 8004cae:	694b      	ldreq	r3, [r1, #20]
 8004cb0:	600f      	str	r7, [r1, #0]
 8004cb2:	bf18      	it	ne
 8004cb4:	2300      	movne	r3, #0
 8004cb6:	eba6 0807 	sub.w	r8, r6, r7
 8004cba:	608b      	str	r3, [r1, #8]
 8004cbc:	f1b8 0f00 	cmp.w	r8, #0
 8004cc0:	dde9      	ble.n	8004c96 <__sflush_r+0xae>
 8004cc2:	6a21      	ldr	r1, [r4, #32]
 8004cc4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8004cc6:	4643      	mov	r3, r8
 8004cc8:	463a      	mov	r2, r7
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b0      	blx	r6
 8004cce:	2800      	cmp	r0, #0
 8004cd0:	dc08      	bgt.n	8004ce4 <__sflush_r+0xfc>
 8004cd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cd6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cda:	81a3      	strh	r3, [r4, #12]
 8004cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8004ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ce4:	4407      	add	r7, r0
 8004ce6:	eba8 0800 	sub.w	r8, r8, r0
 8004cea:	e7e7      	b.n	8004cbc <__sflush_r+0xd4>
 8004cec:	dfbffffe 	.word	0xdfbffffe

08004cf0 <_fflush_r>:
 8004cf0:	b538      	push	{r3, r4, r5, lr}
 8004cf2:	690b      	ldr	r3, [r1, #16]
 8004cf4:	4605      	mov	r5, r0
 8004cf6:	460c      	mov	r4, r1
 8004cf8:	b913      	cbnz	r3, 8004d00 <_fflush_r+0x10>
 8004cfa:	2500      	movs	r5, #0
 8004cfc:	4628      	mov	r0, r5
 8004cfe:	bd38      	pop	{r3, r4, r5, pc}
 8004d00:	b118      	cbz	r0, 8004d0a <_fflush_r+0x1a>
 8004d02:	6a03      	ldr	r3, [r0, #32]
 8004d04:	b90b      	cbnz	r3, 8004d0a <_fflush_r+0x1a>
 8004d06:	f7ff f8e9 	bl	8003edc <__sinit>
 8004d0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0f3      	beq.n	8004cfa <_fflush_r+0xa>
 8004d12:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d14:	07d0      	lsls	r0, r2, #31
 8004d16:	d404      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d18:	0599      	lsls	r1, r3, #22
 8004d1a:	d402      	bmi.n	8004d22 <_fflush_r+0x32>
 8004d1c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d1e:	f7ff fb90 	bl	8004442 <__retarget_lock_acquire_recursive>
 8004d22:	4628      	mov	r0, r5
 8004d24:	4621      	mov	r1, r4
 8004d26:	f7ff ff5f 	bl	8004be8 <__sflush_r>
 8004d2a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d2c:	07da      	lsls	r2, r3, #31
 8004d2e:	4605      	mov	r5, r0
 8004d30:	d4e4      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d32:	89a3      	ldrh	r3, [r4, #12]
 8004d34:	059b      	lsls	r3, r3, #22
 8004d36:	d4e1      	bmi.n	8004cfc <_fflush_r+0xc>
 8004d38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d3a:	f7ff fb83 	bl	8004444 <__retarget_lock_release_recursive>
 8004d3e:	e7dd      	b.n	8004cfc <_fflush_r+0xc>

08004d40 <__swhatbuf_r>:
 8004d40:	b570      	push	{r4, r5, r6, lr}
 8004d42:	460c      	mov	r4, r1
 8004d44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	b096      	sub	sp, #88	@ 0x58
 8004d4c:	4615      	mov	r5, r2
 8004d4e:	461e      	mov	r6, r3
 8004d50:	da0d      	bge.n	8004d6e <__swhatbuf_r+0x2e>
 8004d52:	89a3      	ldrh	r3, [r4, #12]
 8004d54:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004d58:	f04f 0100 	mov.w	r1, #0
 8004d5c:	bf14      	ite	ne
 8004d5e:	2340      	movne	r3, #64	@ 0x40
 8004d60:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004d64:	2000      	movs	r0, #0
 8004d66:	6031      	str	r1, [r6, #0]
 8004d68:	602b      	str	r3, [r5, #0]
 8004d6a:	b016      	add	sp, #88	@ 0x58
 8004d6c:	bd70      	pop	{r4, r5, r6, pc}
 8004d6e:	466a      	mov	r2, sp
 8004d70:	f000 f848 	bl	8004e04 <_fstat_r>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	dbec      	blt.n	8004d52 <__swhatbuf_r+0x12>
 8004d78:	9901      	ldr	r1, [sp, #4]
 8004d7a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004d7e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004d82:	4259      	negs	r1, r3
 8004d84:	4159      	adcs	r1, r3
 8004d86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004d8a:	e7eb      	b.n	8004d64 <__swhatbuf_r+0x24>

08004d8c <__smakebuf_r>:
 8004d8c:	898b      	ldrh	r3, [r1, #12]
 8004d8e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004d90:	079d      	lsls	r5, r3, #30
 8004d92:	4606      	mov	r6, r0
 8004d94:	460c      	mov	r4, r1
 8004d96:	d507      	bpl.n	8004da8 <__smakebuf_r+0x1c>
 8004d98:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004d9c:	6023      	str	r3, [r4, #0]
 8004d9e:	6123      	str	r3, [r4, #16]
 8004da0:	2301      	movs	r3, #1
 8004da2:	6163      	str	r3, [r4, #20]
 8004da4:	b003      	add	sp, #12
 8004da6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004da8:	ab01      	add	r3, sp, #4
 8004daa:	466a      	mov	r2, sp
 8004dac:	f7ff ffc8 	bl	8004d40 <__swhatbuf_r>
 8004db0:	9f00      	ldr	r7, [sp, #0]
 8004db2:	4605      	mov	r5, r0
 8004db4:	4639      	mov	r1, r7
 8004db6:	4630      	mov	r0, r6
 8004db8:	f7ff fbba 	bl	8004530 <_malloc_r>
 8004dbc:	b948      	cbnz	r0, 8004dd2 <__smakebuf_r+0x46>
 8004dbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004dc2:	059a      	lsls	r2, r3, #22
 8004dc4:	d4ee      	bmi.n	8004da4 <__smakebuf_r+0x18>
 8004dc6:	f023 0303 	bic.w	r3, r3, #3
 8004dca:	f043 0302 	orr.w	r3, r3, #2
 8004dce:	81a3      	strh	r3, [r4, #12]
 8004dd0:	e7e2      	b.n	8004d98 <__smakebuf_r+0xc>
 8004dd2:	89a3      	ldrh	r3, [r4, #12]
 8004dd4:	6020      	str	r0, [r4, #0]
 8004dd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004dda:	81a3      	strh	r3, [r4, #12]
 8004ddc:	9b01      	ldr	r3, [sp, #4]
 8004dde:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004de2:	b15b      	cbz	r3, 8004dfc <__smakebuf_r+0x70>
 8004de4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004de8:	4630      	mov	r0, r6
 8004dea:	f000 f81d 	bl	8004e28 <_isatty_r>
 8004dee:	b128      	cbz	r0, 8004dfc <__smakebuf_r+0x70>
 8004df0:	89a3      	ldrh	r3, [r4, #12]
 8004df2:	f023 0303 	bic.w	r3, r3, #3
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	81a3      	strh	r3, [r4, #12]
 8004dfc:	89a3      	ldrh	r3, [r4, #12]
 8004dfe:	431d      	orrs	r5, r3
 8004e00:	81a5      	strh	r5, [r4, #12]
 8004e02:	e7cf      	b.n	8004da4 <__smakebuf_r+0x18>

08004e04 <_fstat_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	4d07      	ldr	r5, [pc, #28]	@ (8004e24 <_fstat_r+0x20>)
 8004e08:	2300      	movs	r3, #0
 8004e0a:	4604      	mov	r4, r0
 8004e0c:	4608      	mov	r0, r1
 8004e0e:	4611      	mov	r1, r2
 8004e10:	602b      	str	r3, [r5, #0]
 8004e12:	f7fb ff18 	bl	8000c46 <_fstat>
 8004e16:	1c43      	adds	r3, r0, #1
 8004e18:	d102      	bne.n	8004e20 <_fstat_r+0x1c>
 8004e1a:	682b      	ldr	r3, [r5, #0]
 8004e1c:	b103      	cbz	r3, 8004e20 <_fstat_r+0x1c>
 8004e1e:	6023      	str	r3, [r4, #0]
 8004e20:	bd38      	pop	{r3, r4, r5, pc}
 8004e22:	bf00      	nop
 8004e24:	20000318 	.word	0x20000318

08004e28 <_isatty_r>:
 8004e28:	b538      	push	{r3, r4, r5, lr}
 8004e2a:	4d06      	ldr	r5, [pc, #24]	@ (8004e44 <_isatty_r+0x1c>)
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	4604      	mov	r4, r0
 8004e30:	4608      	mov	r0, r1
 8004e32:	602b      	str	r3, [r5, #0]
 8004e34:	f7fb ff17 	bl	8000c66 <_isatty>
 8004e38:	1c43      	adds	r3, r0, #1
 8004e3a:	d102      	bne.n	8004e42 <_isatty_r+0x1a>
 8004e3c:	682b      	ldr	r3, [r5, #0]
 8004e3e:	b103      	cbz	r3, 8004e42 <_isatty_r+0x1a>
 8004e40:	6023      	str	r3, [r4, #0]
 8004e42:	bd38      	pop	{r3, r4, r5, pc}
 8004e44:	20000318 	.word	0x20000318

08004e48 <_sbrk_r>:
 8004e48:	b538      	push	{r3, r4, r5, lr}
 8004e4a:	4d06      	ldr	r5, [pc, #24]	@ (8004e64 <_sbrk_r+0x1c>)
 8004e4c:	2300      	movs	r3, #0
 8004e4e:	4604      	mov	r4, r0
 8004e50:	4608      	mov	r0, r1
 8004e52:	602b      	str	r3, [r5, #0]
 8004e54:	f7fb ff20 	bl	8000c98 <_sbrk>
 8004e58:	1c43      	adds	r3, r0, #1
 8004e5a:	d102      	bne.n	8004e62 <_sbrk_r+0x1a>
 8004e5c:	682b      	ldr	r3, [r5, #0]
 8004e5e:	b103      	cbz	r3, 8004e62 <_sbrk_r+0x1a>
 8004e60:	6023      	str	r3, [r4, #0]
 8004e62:	bd38      	pop	{r3, r4, r5, pc}
 8004e64:	20000318 	.word	0x20000318

08004e68 <_init>:
 8004e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e6a:	bf00      	nop
 8004e6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e6e:	bc08      	pop	{r3}
 8004e70:	469e      	mov	lr, r3
 8004e72:	4770      	bx	lr

08004e74 <_fini>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr
